
03_Robot_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005158  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800547c  0800547c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800547c  0800547c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800547c  0800547c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800547c  0800547c  0001547c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005480  08005480  00015480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  080054f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080054f4  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e73e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002049  00000000  00000000  0002e7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00030820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb0  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001964c  00000000  00000000  00032288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3a9  00000000  00000000  0004b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090788  00000000  00000000  00056c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e54  00000000  00000000  000e7480  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000eb2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000eb2f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800524c 	.word	0x0800524c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800524c 	.word	0x0800524c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <robotDefaultValuesInit>:
 *      Author: pawel
 */
#include "STM32_Robot.h"

void robotDefaultValuesInit(Robot* rob, TIM_HandleTypeDef* timEngLeft, TIM_HandleTypeDef* timEngRight, UART_HandleTypeDef* uartUSB, UART_HandleTypeDef* uartBlth, UART_HandleTypeDef* uartSelected, ADC_HandleTypeDef* adc)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	603b      	str	r3, [r7, #0]
	rob->engLeft.tim = timEngLeft;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	601a      	str	r2, [r3, #0]
	rob->engLeft.timChl = TIM_CHANNEL_1;//3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
	rob->engLeft.dirPinPort = GPIOB;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4a5e      	ldr	r2, [pc, #376]	; (8000a90 <robotDefaultValuesInit+0x198>)
 8000916:	609a      	str	r2, [r3, #8]
	rob->engLeft.dirPin = GPIO_PIN_5;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2220      	movs	r2, #32
 800091c:	60da      	str	r2, [r3, #12]
	rob->engLeft.pwmVal = 0;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2200      	movs	r2, #0
 8000922:	741a      	strb	r2, [r3, #16]

	rob->engRight.tim = timEngRight;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	615a      	str	r2, [r3, #20]
	rob->engRight.timChl = TIM_CHANNEL_3;//1
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2208      	movs	r2, #8
 800092e:	619a      	str	r2, [r3, #24]
	rob->engRight.dirPinPort = GPIOC;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a58      	ldr	r2, [pc, #352]	; (8000a94 <robotDefaultValuesInit+0x19c>)
 8000934:	61da      	str	r2, [r3, #28]
	rob->engRight.dirPin = GPIO_PIN_7;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	621a      	str	r2, [r3, #32]
	rob->engRight.pwmVal = 0;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	rob->uartUSB = uartUSB;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
	rob->uartBlth = uartBlth;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
	rob->blthPinPort = GPIOA;		//to trzeba przerzucic na i2c
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4a51      	ldr	r2, [pc, #324]	; (8000a98 <robotDefaultValuesInit+0x1a0>)
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
	rob->blthPin = GPIO_PIN_15;		//to trzeba przerzucic na i2c
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
	rob->uartSelected = uartSelected;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	631a      	str	r2, [r3, #48]	; 0x30

	strcpy(rob->snr[0].snrName, "RgtCnct");
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3340      	adds	r3, #64	; 0x40
 8000968:	494c      	ldr	r1, [pc, #304]	; (8000a9c <robotDefaultValuesInit+0x1a4>)
 800096a:	461a      	mov	r2, r3
 800096c:	460b      	mov	r3, r1
 800096e:	cb03      	ldmia	r3!, {r0, r1}
 8000970:	6010      	str	r0, [r2, #0]
 8000972:	6051      	str	r1, [r2, #4]
	rob->snr[0].snrPinPort = DIGIAL_SNR;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2200      	movs	r2, #0
 8000978:	64da      	str	r2, [r3, #76]	; 0x4c
	rob->snr[0].snrPinPort = GPIOA;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4a46      	ldr	r2, [pc, #280]	; (8000a98 <robotDefaultValuesInit+0x1a0>)
 800097e:	64da      	str	r2, [r3, #76]	; 0x4c
	rob->snr[0].snrPin = GPIO_PIN_0;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2201      	movs	r2, #1
 8000984:	651a      	str	r2, [r3, #80]	; 0x50
	rob->snr[0].snrVal = 0;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2200      	movs	r2, #0
 800098a:	655a      	str	r2, [r3, #84]	; 0x54

	strcpy(rob->snr[1].snrName, "LftCnct");
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3368      	adds	r3, #104	; 0x68
 8000990:	4943      	ldr	r1, [pc, #268]	; (8000aa0 <robotDefaultValuesInit+0x1a8>)
 8000992:	461a      	mov	r2, r3
 8000994:	460b      	mov	r3, r1
 8000996:	cb03      	ldmia	r3!, {r0, r1}
 8000998:	6010      	str	r0, [r2, #0]
 800099a:	6051      	str	r1, [r2, #4]
	rob->snr[1].snrType = DIGIAL_SNR;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rob->snr[1].snrPinPort = GPIOA;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4a3c      	ldr	r2, [pc, #240]	; (8000a98 <robotDefaultValuesInit+0x1a0>)
 80009a8:	675a      	str	r2, [r3, #116]	; 0x74
	rob->snr[1].snrPin = GPIO_PIN_1;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2202      	movs	r2, #2
 80009ae:	679a      	str	r2, [r3, #120]	; 0x78
	rob->snr[1].snrVal = 0;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	67da      	str	r2, [r3, #124]	; 0x7c

	strcpy(rob->snr[2].snrName, "RgtLight");
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3390      	adds	r3, #144	; 0x90
 80009ba:	493a      	ldr	r1, [pc, #232]	; (8000aa4 <robotDefaultValuesInit+0x1ac>)
 80009bc:	461a      	mov	r2, r3
 80009be:	460b      	mov	r3, r1
 80009c0:	cb03      	ldmia	r3!, {r0, r1}
 80009c2:	6010      	str	r0, [r2, #0]
 80009c4:	6051      	str	r1, [r2, #4]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	7213      	strb	r3, [r2, #8]
	rob->snr[2].snrType = ANALOG_SNR;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2201      	movs	r2, #1
 80009ce:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rob->snr[2].snrPinPort = GPIOC;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4a2f      	ldr	r2, [pc, #188]	; (8000a94 <robotDefaultValuesInit+0x19c>)
 80009d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	rob->snr[2].snrPin = GPIO_PIN_5;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2220      	movs	r2, #32
 80009de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	rob->snr[2].snrVal = 0;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2200      	movs	r2, #0
 80009e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	rob->snr[2].snrAdc = adc;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6a3a      	ldr	r2, [r7, #32]
 80009ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	rob->snr[2].snrAdcChannel.Channel = ADC_CHANNEL_15;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	220f      	movs	r2, #15
 80009f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	rob->snr[2].snrAdcChannel.Rank = ADC_REGULAR_RANK_1;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2201      	movs	r2, #1
 80009fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	rob->snr[2].snrAdcChannel.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <robotDefaultValuesInit+0x19c>)
 8000a12:	f002 f856 	bl	8002ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	481e      	ldr	r0, [pc, #120]	; (8000a94 <robotDefaultValuesInit+0x19c>)
 8000a1c:	f002 f851 	bl	8002ac2 <HAL_GPIO_WritePin>

	strcpy(rob->snr[3].snrName, "LftLight");
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	33b8      	adds	r3, #184	; 0xb8
 8000a24:	4920      	ldr	r1, [pc, #128]	; (8000aa8 <robotDefaultValuesInit+0x1b0>)
 8000a26:	461a      	mov	r2, r3
 8000a28:	460b      	mov	r3, r1
 8000a2a:	cb03      	ldmia	r3!, {r0, r1}
 8000a2c:	6010      	str	r0, [r2, #0]
 8000a2e:	6051      	str	r1, [r2, #4]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	7213      	strb	r3, [r2, #8]
	rob->snr[3].snrType = ANALOG_SNR;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2201      	movs	r2, #1
 8000a38:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rob->snr[3].snrPinPort = GPIOC;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <robotDefaultValuesInit+0x19c>)
 8000a40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	rob->snr[3].snrPin = GPIO_PIN_0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	rob->snr[3].snrVal = 0;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	rob->snr[3].snrAdc = adc;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6a3a      	ldr	r2, [r7, #32]
 8000a58:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	rob->snr[3].snrAdcChannel.Channel = ADC_CHANNEL_10;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	220a      	movs	r2, #10
 8000a60:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	rob->snr[3].snrAdcChannel.Rank = ADC_REGULAR_RANK_1;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	rob->snr[3].snrAdcChannel.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2202      	movs	r2, #2
 8000a70:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2101      	movs	r1, #1
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <robotDefaultValuesInit+0x198>)
 8000a7a:	f002 f822 	bl	8002ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <robotDefaultValuesInit+0x19c>)
 8000a84:	f002 f81d 	bl	8002ac2 <HAL_GPIO_WritePin>


}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	08005264 	.word	0x08005264
 8000aa0:	0800526c 	.word	0x0800526c
 8000aa4:	08005274 	.word	0x08005274
 8000aa8:	08005280 	.word	0x08005280

08000aac <robotSetEnginePwm>:

void robotSetEnginePwm(Robot* rob, int8_t pwmValLeft, int8_t pwmValRight)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	70bb      	strb	r3, [r7, #2]
	if(pwmValLeft >= -100 && pwmValLeft <= 100 && pwmValRight >= -100 && pwmValRight <= 100)
 8000abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ac0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000ac4:	f2c0 80c1 	blt.w	8000c4a <robotSetEnginePwm+0x19e>
 8000ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000acc:	2b64      	cmp	r3, #100	; 0x64
 8000ace:	f300 80bc 	bgt.w	8000c4a <robotSetEnginePwm+0x19e>
 8000ad2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000ad6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000ada:	f2c0 80b6 	blt.w	8000c4a <robotSetEnginePwm+0x19e>
 8000ade:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000ae2:	2b64      	cmp	r3, #100	; 0x64
 8000ae4:	f300 80b1 	bgt.w	8000c4a <robotSetEnginePwm+0x19e>
	{
		rob->engLeft.pwmVal = pwmValLeft;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	78fa      	ldrb	r2, [r7, #3]
 8000aec:	741a      	strb	r2, [r3, #16]
		rob->engRight.pwmVal = pwmValRight;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	78ba      	ldrb	r2, [r7, #2]
 8000af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if(rob->engLeft.pwmVal >= 0)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db09      	blt.n	8000b14 <robotSetEnginePwm+0x68>
			HAL_GPIO_WritePin(rob->engLeft.dirPinPort, rob->engLeft.dirPin, FOWARD);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6898      	ldr	r0, [r3, #8]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f001 ffd8 	bl	8002ac2 <HAL_GPIO_WritePin>
 8000b12:	e008      	b.n	8000b26 <robotSetEnginePwm+0x7a>
		else
			HAL_GPIO_WritePin(rob->engLeft.dirPinPort, rob->engLeft.dirPin, BACKWARD);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6898      	ldr	r0, [r3, #8]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4619      	mov	r1, r3
 8000b22:	f001 ffce 	bl	8002ac2 <HAL_GPIO_WritePin>

		if(rob->engRight.pwmVal >= 0)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db09      	blt.n	8000b44 <robotSetEnginePwm+0x98>
			HAL_GPIO_WritePin(rob->engRight.dirPinPort, rob->engRight.dirPin, FOWARD);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69d8      	ldr	r0, [r3, #28]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a1b      	ldr	r3, [r3, #32]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f001 ffc0 	bl	8002ac2 <HAL_GPIO_WritePin>
 8000b42:	e008      	b.n	8000b56 <robotSetEnginePwm+0xaa>
		else
			HAL_GPIO_WritePin(rob->engRight.dirPinPort, rob->engRight.dirPin, BACKWARD);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69d8      	ldr	r0, [r3, #28]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4619      	mov	r1, r3
 8000b52:	f001 ffb6 	bl	8002ac2 <HAL_GPIO_WritePin>

		uint32_t pwmVal = abs((rob->engLeft.pwmVal * PWM_MAX) / 100);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f649 1399 	movw	r3, #39321	; 0x9999
 8000b62:	fb03 f302 	mul.w	r3, r3, r2
 8000b66:	4a3b      	ldr	r2, [pc, #236]	; (8000c54 <robotSetEnginePwm+0x1a8>)
 8000b68:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6c:	1152      	asrs	r2, r2, #5
 8000b6e:	17db      	asrs	r3, r3, #31
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bfb8      	it	lt
 8000b76:	425b      	neglt	r3, r3
 8000b78:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(rob->engLeft.tim, rob->engLeft.timChl, pwmVal);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d105      	bne.n	8000b8e <robotSetEnginePwm+0xe2>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b8c:	e018      	b.n	8000bc0 <robotSetEnginePwm+0x114>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d105      	bne.n	8000ba2 <robotSetEnginePwm+0xf6>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba0:	e00e      	b.n	8000bc0 <robotSetEnginePwm+0x114>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d105      	bne.n	8000bb6 <robotSetEnginePwm+0x10a>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb4:	e004      	b.n	8000bc0 <robotSetEnginePwm+0x114>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40

		pwmVal = abs((rob->engRight.pwmVal * PWM_MAX) / 100)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f649 1399 	movw	r3, #39321	; 0x9999
 8000bcc:	fb03 f302 	mul.w	r3, r3, r2
 8000bd0:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <robotSetEnginePwm+0x1a8>)
 8000bd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd6:	1152      	asrs	r2, r2, #5
 8000bd8:	17db      	asrs	r3, r3, #31
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bfb8      	it	lt
 8000be0:	425b      	neglt	r3, r3
 8000be2:	60fb      	str	r3, [r7, #12]
				;
		__HAL_TIM_SET_COMPARE(rob->engRight.tim, rob->engRight.timChl, pwmVal);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d105      	bne.n	8000bf8 <robotSetEnginePwm+0x14c>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf6:	e018      	b.n	8000c2a <robotSetEnginePwm+0x17e>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d105      	bne.n	8000c0c <robotSetEnginePwm+0x160>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38
 8000c0a:	e00e      	b.n	8000c2a <robotSetEnginePwm+0x17e>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d105      	bne.n	8000c20 <robotSetEnginePwm+0x174>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c1e:	e004      	b.n	8000c2a <robotSetEnginePwm+0x17e>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(rob->engRight.tim, rob->engRight.timChl);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4610      	mov	r0, r2
 8000c36:	f002 fe07 	bl	8003848 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(rob->engLeft.tim, rob->engLeft.timChl);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4610      	mov	r0, r2
 8000c46:	f002 fdff 	bl	8003848 <HAL_TIM_PWM_Start>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	51eb851f 	.word	0x51eb851f

08000c58 <robotTelemetry>:

void robotTelemetry(Robot *rob)
{
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	f5ad 7d6b 	sub.w	sp, sp, #940	; 0x3ac
 8000c5e:	af12      	add	r7, sp, #72	; 0x48
 8000c60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c64:	6018      	str	r0, [r3, #0]
	double time_spent = 0.0;
 8000c66:	f04f 0300 	mov.w	r3, #0
 8000c6a:	f04f 0400 	mov.w	r4, #0
 8000c6e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8000c72:	e9c2 3400 	strd	r3, r4, [r2]
	clock_t begin = clock();
 8000c76:	f003 fdf7 	bl	8004868 <clock>
 8000c7a:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
	// array with data to be send
	char data[400];

	// JSON serialisation structure for data from robot
	char json[] = "{\"blthState\":\"%i\",\"StartProcedureFinished\":\"%i\",\"StartProcedureCountNum\":\"%i\",\""
 8000c7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c82:	4a7f      	ldr	r2, [pc, #508]	; (8000e80 <robotTelemetry+0x228>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	4611      	mov	r1, r2
 8000c88:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f003 fe29 	bl	80048e4 <memcpy>
			"snr[1]\":{\"snrName\":\"%s\",\"snrType\":\"%i\",\"snrVal\":\"%i\"},\""
			"snr[2]\":{\"snrName\":\"%s\",\"snrType\":\"%i\",\"snrVal\":\"%i\"},\""
			"snr[3]\":{\"snrName\":\"%s\",\"snrType\":\"%i\",\"snrVal\":\"%i\"}}";

	// JSON structure connection with robot variable into data array
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000c92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c9c:	469c      	mov	ip, r3
 8000c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8000ca8:	469e      	mov	lr, r3
 8000caa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8000cb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
			rob->engLeft.dirPin, rob->engLeft.pwmVal,
 8000cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f993 3010 	ldrsb.w	r3, [r3, #16]
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ccc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6a19      	ldr	r1, [r3, #32]
 8000cd4:	6279      	str	r1, [r7, #36]	; 0x24
			rob->engRight.dirPin, rob->engRight.pwmVal,
 8000cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000ce0:	623b      	str	r3, [r7, #32]
			rob->snr[0].snrName, rob->snr[0].snrType, rob->snr[0].snrVal,
 8000ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8000cec:	61f8      	str	r0, [r7, #28]
 8000cee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8000d02:	617d      	str	r5, [r7, #20]
			rob->snr[1].snrName, rob->snr[1].snrType, rob->snr[1].snrVal,
 8000d04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000d0e:	6138      	str	r0, [r7, #16]
 8000d10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 8000d24:	60bd      	str	r5, [r7, #8]
			rob->snr[2].snrName, rob->snr[2].snrType, rob->snr[2].snrVal,
 8000d26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f103 0690 	add.w	r6, r3, #144	; 0x90
 8000d30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
			rob->snr[3].snrName, rob->snr[3].snrType, rob->snr[3].snrVal);
 8000d46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8000d50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000d66:	f107 0544 	add.w	r5, r7, #68	; 0x44
 8000d6a:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 8000d6e:	9310      	str	r3, [sp, #64]	; 0x40
 8000d70:	910f      	str	r1, [sp, #60]	; 0x3c
 8000d72:	920e      	str	r2, [sp, #56]	; 0x38
 8000d74:	940d      	str	r4, [sp, #52]	; 0x34
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	920c      	str	r2, [sp, #48]	; 0x30
 8000d7a:	960b      	str	r6, [sp, #44]	; 0x2c
 8000d7c:	68be      	ldr	r6, [r7, #8]
 8000d7e:	960a      	str	r6, [sp, #40]	; 0x28
 8000d80:	68fe      	ldr	r6, [r7, #12]
 8000d82:	9609      	str	r6, [sp, #36]	; 0x24
 8000d84:	693c      	ldr	r4, [r7, #16]
 8000d86:	9408      	str	r4, [sp, #32]
 8000d88:	697e      	ldr	r6, [r7, #20]
 8000d8a:	9607      	str	r6, [sp, #28]
 8000d8c:	69be      	ldr	r6, [r7, #24]
 8000d8e:	9606      	str	r6, [sp, #24]
 8000d90:	69fc      	ldr	r4, [r7, #28]
 8000d92:	9405      	str	r4, [sp, #20]
 8000d94:	6a3c      	ldr	r4, [r7, #32]
 8000d96:	9404      	str	r4, [sp, #16]
 8000d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d9a:	9103      	str	r1, [sp, #12]
 8000d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d9e:	9102      	str	r1, [sp, #8]
 8000da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000da2:	9201      	str	r2, [sp, #4]
 8000da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	4673      	mov	r3, lr
 8000daa:	4662      	mov	r2, ip
 8000dac:	4629      	mov	r1, r5
 8000dae:	f003 fe05 	bl	80049bc <siprintf>


	// Check if UART through bluetooth is selected, if no then switch off bluetooth module
	if(rob->uartSelected == rob->uartUSB)
 8000db2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d10d      	bne.n	8000de2 <robotTelemetry+0x18a>
		HAL_GPIO_WritePin(rob->blthPinPort, rob->blthPin, GPIO_PIN_RESET);
 8000dc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f001 fe71 	bl	8002ac2 <HAL_GPIO_WritePin>
 8000de0:	e016      	b.n	8000e10 <robotTelemetry+0x1b8>

	else if(rob->uartSelected == rob->uartBlth)
 8000de2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d10c      	bne.n	8000e10 <robotTelemetry+0x1b8>
		HAL_GPIO_WritePin(rob->blthPinPort, rob->blthPin, GPIO_PIN_SET);
 8000df6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000dfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f001 fe59 	bl	8002ac2 <HAL_GPIO_WritePin>

	// Transmit the JSON data via UART
	HAL_UART_Transmit(rob->uartSelected, (uint8_t*)data, strlen(data), 1000);
 8000e10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000e18:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f995 	bl	800014c <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f003 fbaf 	bl	8004592 <HAL_UART_Transmit>
	clock_t end = clock();
 8000e34:	f003 fd18 	bl	8004868 <clock>
 8000e38:	f8c7 0350 	str.w	r0, [r7, #848]	; 0x350
	time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
 8000e3c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e40:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff faca 	bl	80003e0 <__aeabi_ui2d>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <robotTelemetry+0x22c>)
 8000e52:	f7ff fc69 	bl	8000728 <__aeabi_ddiv>
 8000e56:	4603      	mov	r3, r0
 8000e58:	460c      	mov	r4, r1
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4623      	mov	r3, r4
 8000e5e:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e66:	f7ff f97f 	bl	8000168 <__adddf3>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8000e72:	e9c2 3400 	strd	r3, r4, [r2]
	char result[10];


}
 8000e76:	bf00      	nop
 8000e78:	f507 7759 	add.w	r7, r7, #868	; 0x364
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	0800528c 	.word	0x0800528c
 8000e84:	40590000 	.word	0x40590000

08000e88 <robotReadSensors>:
		robotSetEnginePwm(rob, 0, 0);
	}
}

void robotReadSensors(Robot* rob)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NUMBER_SNR; i++){
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e07f      	b.n	8000f96 <robotReadSensors+0x10e>
		if(rob->snr[i].snrType == DIGIAL_SNR)
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	334a      	adds	r3, #74	; 0x4a
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d121      	bne.n	8000ef0 <robotReadSensors+0x68>
			rob->snr[i].snrVal = HAL_GPIO_ReadPin(rob->snr[i].snrPinPort, rob->snr[i].snrPin);
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	440b      	add	r3, r1
 8000eba:	334c      	adds	r3, #76	; 0x4c
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	3350      	adds	r3, #80	; 0x50
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f001 fdde 	bl	8002a94 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	4618      	mov	r0, r3
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	3354      	adds	r3, #84	; 0x54
 8000eec:	6018      	str	r0, [r3, #0]
 8000eee:	e04f      	b.n	8000f90 <robotReadSensors+0x108>

		else if(rob->snr[i].snrType == ANALOG_SNR){
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	334a      	adds	r3, #74	; 0x4a
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d144      	bne.n	8000f90 <robotReadSensors+0x108>
			HAL_ADC_ConfigChannel(rob->snr[i].snrAdc, &rob->snr[i].snrAdcChannel);
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3358      	adds	r3, #88	; 0x58
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	3358      	adds	r3, #88	; 0x58
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	3304      	adds	r3, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f001 f9c6 	bl	80022bc <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(rob->snr[i].snrAdc);
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3358      	adds	r3, #88	; 0x58
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 f806 	bl	8001f54 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(rob->snr[i].snrAdc, 1000);
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3358      	adds	r3, #88	; 0x58
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 f8a6 	bl	80020b0 <HAL_ADC_PollForConversion>
			rob->snr[i].snrVal = HAL_ADC_GetValue(rob->snr[i].snrAdc);
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	3358      	adds	r3, #88	; 0x58
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	7bfc      	ldrb	r4, [r7, #15]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 f993 	bl	80022a4 <HAL_ADC_GetValue>
 8000f7e:	4601      	mov	r1, r0
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4623      	mov	r3, r4
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4423      	add	r3, r4
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3354      	adds	r3, #84	; 0x54
 8000f8e:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0; i < NUMBER_SNR; i++){
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	f67f af7c 	bls.w	8000e96 <robotReadSensors+0xe>
		}
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd90      	pop	{r4, r7, pc}

08000fa6 <robotStartProcedure>:

	robotSetEnginePwm(rob, -40, -40);
}

void robotStartProcedure(Robot* rob)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	// loop until whole procedure is finished
	while(rob->StartProcedureFinished == 0){
 8000fae:	e053      	b.n	8001058 <robotStartProcedure+0xb2>

		// read data from sensors
		robotReadSensors(rob);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff69 	bl	8000e88 <robotReadSensors>

		// loop until both sensors are switched on
		do{
			robotReadSensors(rob);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff66 	bl	8000e88 <robotReadSensors>
		}
		while(rob->snr[0].snrVal == 1 || rob->snr[1].snrVal == 1);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d0f8      	beq.n	8000fb6 <robotStartProcedure+0x10>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d0f4      	beq.n	8000fb6 <robotStartProcedure+0x10>


		// switch on LED to inform that start procedure is on
		robotSwitchLED(rob, 1);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f8e0 	bl	8001194 <robotSwitchLED>

		// counter initialization
		rob->StartProcedureCountNum = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		// counter is set for around 4 seconds
		while(rob->StartProcedureCountNum < START_CNT_NUM){
 8000fdc:	e011      	b.n	8001002 <robotStartProcedure+0x5c>
			robotReadSensors(rob);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff52 	bl	8000e88 <robotReadSensors>

			// if one of sensor is not switched on, stop the counting
			if(rob->snr[0].snrVal == 1 || rob->snr[1].snrVal == 1){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d011      	beq.n	8001010 <robotStartProcedure+0x6a>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00d      	beq.n	8001010 <robotStartProcedure+0x6a>
				break;
			}
			rob->StartProcedureCountNum++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		while(rob->StartProcedureCountNum < START_CNT_NUM){
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001008:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800100c:	4293      	cmp	r3, r2
 800100e:	d9e6      	bls.n	8000fde <robotStartProcedure+0x38>
		}

		// check if counter finished properly
		if(rob->StartProcedureCountNum == START_CNT_NUM){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001016:	f644 6220 	movw	r2, #20000	; 0x4e20
 800101a:	4293      	cmp	r3, r2
 800101c:	d114      	bne.n	8001048 <robotStartProcedure+0xa2>

			// mark that start procedure finished
			rob->StartProcedureFinished = 1;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

			// switch on buzzer for 0.5 second to announce that start procedure finished
			robotSwitchBuzzer(rob, 1);
 8001026:	2101      	movs	r1, #1
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f89b 	bl	8001164 <robotSwitchBuzzer>
			HAL_Delay(1000);
 800102e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001032:	f000 fe95 	bl	8001d60 <HAL_Delay>
			robotSwitchLED(rob, 0);
 8001036:	2100      	movs	r1, #0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f8ab 	bl	8001194 <robotSwitchLED>

			// switch off LED
			robotSwitchBuzzer(rob, 0);
 800103e:	2100      	movs	r1, #0
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f88f 	bl	8001164 <robotSwitchBuzzer>
 8001046:	e007      	b.n	8001058 <robotStartProcedure+0xb2>
		}

		//if counter does not finished properly, just switch off LED
		else{
			rob->StartProcedureCountNum = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			robotSwitchLED(rob,0);
 8001050:	2100      	movs	r1, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f89e 	bl	8001194 <robotSwitchLED>
	while(rob->StartProcedureFinished == 0){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0a6      	beq.n	8000fb0 <robotStartProcedure+0xa>
		}
	}
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <robotWallBouncer>:

void robotWallBouncer(Robot* rob)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	// create seed
	srand(time(0));
 8001074:	2000      	movs	r0, #0
 8001076:	f003 fcc1 	bl	80049fc <time>
 800107a:	4603      	mov	r3, r0
 800107c:	460c      	mov	r4, r1
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fc44 	bl	800490c <srand>
	while(1){
		// read data from sensors
		robotReadSensors(rob);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff feff 	bl	8000e88 <robotReadSensors>

		// go straight if nothing is in front
		robotSetEnginePwm(rob, 40, 40);
 800108a:	2228      	movs	r2, #40	; 0x28
 800108c:	2128      	movs	r1, #40	; 0x28
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fd0c 	bl	8000aac <robotSetEnginePwm>

		// check if robot touch the wall from left side
		if(rob->snr[0].snrVal == 0){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001098:	2b00      	cmp	r3, #0
 800109a:	d12e      	bne.n	80010fa <robotWallBouncer+0x8e>
			HAL_Delay(100);
 800109c:	2064      	movs	r0, #100	; 0x64
 800109e:	f000 fe5f 	bl	8001d60 <HAL_Delay>

			// go backward
			robotSetEnginePwm(rob, -40,-40);
 80010a2:	f06f 0227 	mvn.w	r2, #39	; 0x27
 80010a6:	f06f 0127 	mvn.w	r1, #39	; 0x27
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fcfe 	bl	8000aac <robotSetEnginePwm>
			HAL_Delay(500);
 80010b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b4:	f000 fe54 	bl	8001d60 <HAL_Delay>

			// turn right for random period of time
			robotSetEnginePwm(rob, 40, -40);
 80010b8:	f06f 0227 	mvn.w	r2, #39	; 0x27
 80010bc:	2128      	movs	r1, #40	; 0x28
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fcf4 	bl	8000aac <robotSetEnginePwm>
			HAL_Delay(rand()%1000 + 200);
 80010c4:	f003 fc46 	bl	8004954 <rand>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <robotWallBouncer+0xf4>)
 80010cc:	fb83 1302 	smull	r1, r3, r3, r2
 80010d0:	1199      	asrs	r1, r3, #6
 80010d2:	17d3      	asrs	r3, r2, #31
 80010d4:	1acb      	subs	r3, r1, r3
 80010d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010da:	fb01 f303 	mul.w	r3, r1, r3
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	33c8      	adds	r3, #200	; 0xc8
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fe3c 	bl	8001d60 <HAL_Delay>

			// quick stop for better robot stability
			robotSetEnginePwm(rob, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fcdd 	bl	8000aac <robotSetEnginePwm>
			HAL_Delay(200);
 80010f2:	20c8      	movs	r0, #200	; 0xc8
 80010f4:	f000 fe34 	bl	8001d60 <HAL_Delay>
 80010f8:	e7c4      	b.n	8001084 <robotWallBouncer+0x18>
		}

		// check if robot touch the wall from right side
		else if(rob->snr[1].snrVal == 0){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1c0      	bne.n	8001084 <robotWallBouncer+0x18>
			HAL_Delay(100);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f000 fe2c 	bl	8001d60 <HAL_Delay>

			// go backward
			robotSetEnginePwm(rob, -40,-40);
 8001108:	f06f 0227 	mvn.w	r2, #39	; 0x27
 800110c:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fccb 	bl	8000aac <robotSetEnginePwm>
			HAL_Delay(500);
 8001116:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111a:	f000 fe21 	bl	8001d60 <HAL_Delay>

			// turn left for random period of time
			robotSetEnginePwm(rob, -40, 40);
 800111e:	2228      	movs	r2, #40	; 0x28
 8001120:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fcc1 	bl	8000aac <robotSetEnginePwm>
			HAL_Delay(rand()%1000 + 200);
 800112a:	f003 fc13 	bl	8004954 <rand>
 800112e:	4602      	mov	r2, r0
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <robotWallBouncer+0xf4>)
 8001132:	fb83 1302 	smull	r1, r3, r3, r2
 8001136:	1199      	asrs	r1, r3, #6
 8001138:	17d3      	asrs	r3, r2, #31
 800113a:	1acb      	subs	r3, r1, r3
 800113c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001140:	fb01 f303 	mul.w	r3, r1, r3
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	33c8      	adds	r3, #200	; 0xc8
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fe09 	bl	8001d60 <HAL_Delay>

			// quick stop for better robot stability
			robotSetEnginePwm(rob, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fcaa 	bl	8000aac <robotSetEnginePwm>
			HAL_Delay(200);
 8001158:	20c8      	movs	r0, #200	; 0xc8
 800115a:	f000 fe01 	bl	8001d60 <HAL_Delay>
		robotReadSensors(rob);
 800115e:	e791      	b.n	8001084 <robotWallBouncer+0x18>
 8001160:	10624dd3 	.word	0x10624dd3

08001164 <robotSwitchBuzzer>:
	  robotSetEnginePwm(rob, 40-diff, 40);
	}
}

void robotSwitchBuzzer(Robot* rob, uint8_t state)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
	if(state == 0 || state == 1)
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <robotSwitchBuzzer+0x18>
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <robotSwitchBuzzer+0x24>
		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, state);
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	461a      	mov	r2, r3
 8001180:	2140      	movs	r1, #64	; 0x40
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <robotSwitchBuzzer+0x2c>)
 8001184:	f001 fc9d 	bl	8002ac2 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40010c00 	.word	0x40010c00

08001194 <robotSwitchLED>:

void robotSwitchLED(Robot* rob, uint8_t state)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
	if(state == 0 || state == 1)
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <robotSwitchLED+0x18>
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d105      	bne.n	80011b8 <robotSwitchLED+0x24>
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, state);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	461a      	mov	r2, r3
 80011b0:	2120      	movs	r1, #32
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <robotSwitchLED+0x2c>)
 80011b4:	f001 fc85 	bl	8002ac2 <HAL_GPIO_WritePin>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40010800 	.word	0x40010800

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f000 fd67 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f839 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 fa59 	bl	8001688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d6:	f000 fa2d 	bl	8001634 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011da:	f000 f8c7 	bl	800136c <MX_TIM2_Init>
  MX_TIM3_Init();
 80011de:	f000 f93b 	bl	8001458 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011e2:	f000 f9fd 	bl	80015e0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80011e6:	f000 f883 	bl	80012f0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80011ea:	f000 f9ab 	bl	8001544 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	  robotDefaultValuesInit(&rob, &htim3, &htim2, &huart2, &huart1, &huart2, &hadc1);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <main+0x64>)
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <main+0x68>)
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <main+0x6c>)
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <main+0x68>)
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <main+0x70>)
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <main+0x74>)
 8001200:	480e      	ldr	r0, [pc, #56]	; (800123c <main+0x78>)
 8001202:	f7ff fb79 	bl	80008f8 <robotDefaultValuesInit>
  	  HAL_TIM_Base_Start_IT(&htim4);
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <main+0x7c>)
 8001208:	f002 fa74 	bl	80036f4 <HAL_TIM_Base_Start_IT>
  	  robotStartProcedure(&rob);
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <main+0x78>)
 800120e:	f7ff feca 	bl	8000fa6 <robotStartProcedure>
  	  robotWallBouncer(&rob);
 8001212:	480a      	ldr	r0, [pc, #40]	; (800123c <main+0x78>)
 8001214:	f7ff ff2a 	bl	800106c <robotWallBouncer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  robotReadSensors(&rob);
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <main+0x78>)
 800121a:	f7ff fe35 	bl	8000e88 <robotReadSensors>
	  robotWallBouncer(&rob);
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <main+0x78>)
 8001220:	f7ff ff24 	bl	800106c <robotWallBouncer>
	  robotReadSensors(&rob);
 8001224:	e7f8      	b.n	8001218 <main+0x54>
 8001226:	bf00      	nop
 8001228:	20000128 	.word	0x20000128
 800122c:	200002c8 	.word	0x200002c8
 8001230:	20000158 	.word	0x20000158
 8001234:	20000280 	.word	0x20000280
 8001238:	200000e0 	.word	0x200000e0
 800123c:	20000198 	.word	0x20000198
 8001240:	20000098 	.word	0x20000098

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	2228      	movs	r2, #40	; 0x28
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fb51 	bl	80048fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2310      	movs	r3, #16
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001284:	2300      	movs	r3, #0
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001288:	2300      	movs	r3, #0
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fc51 	bl	8002b38 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800129c:	f000 faa8 	bl	80017f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
 80012a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 febb 	bl	8003038 <HAL_RCC_ClockConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80012c8:	f000 fa92 	bl	80017f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012cc:	2302      	movs	r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 f84a 	bl	8003370 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80012e2:	f000 fa85 	bl	80017f0 <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	; 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_ADC1_Init+0x74>)
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <MX_ADC1_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_ADC1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_ADC1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_ADC1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_ADC1_Init+0x74>)
 800131a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800131e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_ADC1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_ADC1_Init+0x74>)
 8001328:	2201      	movs	r2, #1
 800132a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_ADC1_Init+0x74>)
 800132e:	f000 fd39 	bl	8001da4 <HAL_ADC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fa5a 	bl	80017f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800133c:	230f      	movs	r3, #15
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001340:	2301      	movs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_ADC1_Init+0x74>)
 800134e:	f000 ffb5 	bl	80022bc <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001358:	f000 fa4a 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000128 	.word	0x20000128
 8001368:	40012400 	.word	0x40012400

0800136c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <MX_TIM2_Init+0xe8>)
 800139e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <MX_TIM2_Init+0xe8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <MX_TIM2_Init+0xe8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <MX_TIM2_Init+0xe8>)
 80013b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_TIM2_Init+0xe8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <MX_TIM2_Init+0xe8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c4:	4823      	ldr	r0, [pc, #140]	; (8001454 <MX_TIM2_Init+0xe8>)
 80013c6:	f002 f945 	bl	8003654 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013d0:	f000 fa0e 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	4619      	mov	r1, r3
 80013e0:	481c      	ldr	r0, [pc, #112]	; (8001454 <MX_TIM2_Init+0xe8>)
 80013e2:	f002 fc99 	bl	8003d18 <HAL_TIM_ConfigClockSource>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013ec:	f000 fa00 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013f0:	4818      	ldr	r0, [pc, #96]	; (8001454 <MX_TIM2_Init+0xe8>)
 80013f2:	f002 f9d1 	bl	8003798 <HAL_TIM_PWM_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013fc:	f000 f9f8 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4619      	mov	r1, r3
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_TIM2_Init+0xe8>)
 8001410:	f003 f802 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800141a:	f000 f9e9 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141e:	2360      	movs	r3, #96	; 0x60
 8001420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2208      	movs	r2, #8
 8001432:	4619      	mov	r1, r3
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM2_Init+0xe8>)
 8001436:	f002 fbb1 	bl	8003b9c <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001440:	f000 f9d6 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM2_Init+0xe8>)
 8001446:	f000 fa91 	bl	800196c <HAL_TIM_MspPostInit>

}
 800144a:	bf00      	nop
 800144c:	3738      	adds	r7, #56	; 0x38
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000280 	.word	0x20000280

08001458 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_TIM3_Init+0xe4>)
 800148a:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <MX_TIM3_Init+0xe8>)
 800148c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <MX_TIM3_Init+0xe4>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <MX_TIM3_Init+0xe4>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <MX_TIM3_Init+0xe4>)
 800149c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <MX_TIM3_Init+0xe4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <MX_TIM3_Init+0xe4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ae:	4823      	ldr	r0, [pc, #140]	; (800153c <MX_TIM3_Init+0xe4>)
 80014b0:	f002 f8d0 	bl	8003654 <HAL_TIM_Base_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014ba:	f000 f999 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c8:	4619      	mov	r1, r3
 80014ca:	481c      	ldr	r0, [pc, #112]	; (800153c <MX_TIM3_Init+0xe4>)
 80014cc:	f002 fc24 	bl	8003d18 <HAL_TIM_ConfigClockSource>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014d6:	f000 f98b 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014da:	4818      	ldr	r0, [pc, #96]	; (800153c <MX_TIM3_Init+0xe4>)
 80014dc:	f002 f95c 	bl	8003798 <HAL_TIM_PWM_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014e6:	f000 f983 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	4619      	mov	r1, r3
 80014f8:	4810      	ldr	r0, [pc, #64]	; (800153c <MX_TIM3_Init+0xe4>)
 80014fa:	f002 ff8d 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001504:	f000 f974 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001508:	2360      	movs	r3, #96	; 0x60
 800150a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_TIM3_Init+0xe4>)
 8001520:	f002 fb3c 	bl	8003b9c <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800152a:	f000 f961 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM3_Init+0xe4>)
 8001530:	f000 fa1c 	bl	800196c <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3738      	adds	r7, #56	; 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000e0 	.word	0x200000e0
 8001540:	40000400 	.word	0x40000400

08001544 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_TIM4_Init+0x94>)
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <MX_TIM4_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MX_TIM4_Init+0x94>)
 8001568:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800156c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_TIM4_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_TIM4_Init+0x94>)
 8001576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800157a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_TIM4_Init+0x94>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_TIM4_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <MX_TIM4_Init+0x94>)
 800158a:	f002 f863 	bl	8003654 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001594:	f000 f92c 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4619      	mov	r1, r3
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <MX_TIM4_Init+0x94>)
 80015a6:	f002 fbb7 	bl	8003d18 <HAL_TIM_ConfigClockSource>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80015b0:	f000 f91e 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_TIM4_Init+0x94>)
 80015c2:	f002 ff29 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f000 f910 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000098 	.word	0x20000098
 80015dc:	40000800 	.word	0x40000800

080015e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_USART1_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_USART1_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_USART1_UART_Init+0x4c>)
 80015ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_USART1_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART1_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART1_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_USART1_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_USART1_UART_Init+0x4c>)
 8001618:	f002 ff6e 	bl	80044f8 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f000 f8e5 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000158 	.word	0x20000158
 8001630:	40013800 	.word	0x40013800

08001634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_USART2_UART_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001640:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 800166c:	f002 ff44 	bl	80044f8 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f8bb 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200002c8 	.word	0x200002c8
 8001684:	40004400 	.word	0x40004400

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <MX_GPIO_Init+0x138>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b45      	ldr	r3, [pc, #276]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a41      	ldr	r2, [pc, #260]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a3b      	ldr	r2, [pc, #236]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a35      	ldr	r2, [pc, #212]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <MX_GPIO_Init+0x138>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_GND_Light_Sensor_Pin|Right_GND_Light_Sensor_Pin|Right_Engine_Directiob_Pin|Right_5V_Light_Sensor_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001702:	4830      	ldr	r0, [pc, #192]	; (80017c4 <MX_GPIO_Init+0x13c>)
 8001704:	f001 f9dd 	bl	8002ac2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Bluetooth_Power_Supply_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f248 0120 	movw	r1, #32800	; 0x8020
 800170e:	482e      	ldr	r0, [pc, #184]	; (80017c8 <MX_GPIO_Init+0x140>)
 8001710:	f001 f9d7 	bl	8002ac2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Left_5V_Light_Sensor_Pin|Left_Engine_Direction_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2161      	movs	r1, #97	; 0x61
 8001718:	482c      	ldr	r0, [pc, #176]	; (80017cc <MX_GPIO_Init+0x144>)
 800171a:	f001 f9d2 	bl	8002ac2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <MX_GPIO_Init+0x148>)
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	4824      	ldr	r0, [pc, #144]	; (80017c4 <MX_GPIO_Init+0x13c>)
 8001734:	f001 f854 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_GND_Light_Sensor_Pin Right_GND_Light_Sensor_Pin Right_Engine_Directiob_Pin Right_5V_Light_Sensor_Pin */
  GPIO_InitStruct.Pin = Left_GND_Light_Sensor_Pin|Right_GND_Light_Sensor_Pin|Right_Engine_Directiob_Pin|Right_5V_Light_Sensor_Pin;
 8001738:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800173c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2302      	movs	r3, #2
 8001748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	4619      	mov	r1, r3
 8001750:	481c      	ldr	r0, [pc, #112]	; (80017c4 <MX_GPIO_Init+0x13c>)
 8001752:	f001 f845 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Contact_Sensor_Pin Left_Contact_Sensor_Pin */
  GPIO_InitStruct.Pin = Right_Contact_Sensor_Pin|Left_Contact_Sensor_Pin;
 8001756:	2303      	movs	r3, #3
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4619      	mov	r1, r3
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <MX_GPIO_Init+0x140>)
 800176a:	f001 f839 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Bluetooth_Power_Supply_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Bluetooth_Power_Supply_Pin;
 800176e:	f248 0320 	movw	r3, #32800	; 0x8020
 8001772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2302      	movs	r3, #2
 800177e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <MX_GPIO_Init+0x140>)
 8001788:	f001 f82a 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_5V_Light_Sensor_Pin Left_Engine_Direction_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = Left_5V_Light_Sensor_Pin|Left_Engine_Direction_Pin|Buzzer_Pin;
 800178c:	2361      	movs	r3, #97	; 0x61
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2302      	movs	r3, #2
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <MX_GPIO_Init+0x144>)
 80017a4:	f001 f81c 	bl	80027e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2028      	movs	r0, #40	; 0x28
 80017ae:	f000 ffe0 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b2:	2028      	movs	r0, #40	; 0x28
 80017b4:	f000 fff9 	bl	80027aa <HAL_NVIC_EnableIRQ>

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40010800 	.word	0x40010800
 80017cc:	40010c00 	.word	0x40010c00
 80017d0:	10110000 	.word	0x10110000

080017d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	 robotTelemetry(&rob);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x18>)
 80017de:	f7ff fa3b 	bl	8000c58 <robotTelemetry>
 }
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000198 	.word	0x20000198

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <Error_Handler+0x6>

080017f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <HAL_MspInit+0x5c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_MspInit+0x5c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_MspInit+0x60>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_MspInit+0x60>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000

0800185c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_ADC_MspInit+0x6c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d121      	bne.n	80018c0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_ADC_MspInit+0x70>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <HAL_ADC_MspInit+0x70>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_ADC_MspInit+0x70>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_ADC_MspInit+0x70>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_ADC_MspInit+0x70>)
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_ADC_MspInit+0x70>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Left_ADC_Light_Sensor_Pin|Right_ADC_Light_Sensor_Pin;
 80018ac:	2321      	movs	r3, #33	; 0x21
 80018ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b0:	2303      	movs	r3, #3
 80018b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <HAL_ADC_MspInit+0x74>)
 80018bc:	f000 ff90 	bl	80027e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40012400 	.word	0x40012400
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40011000 	.word	0x40011000

080018d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e4:	d10c      	bne.n	8001900 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018fe:	e02a      	b.n	8001956 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_TIM_Base_MspInit+0x90>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10c      	bne.n	8001924 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a14      	ldr	r2, [pc, #80]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
}
 8001922:	e018      	b.n	8001956 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_TIM_Base_MspInit+0x94>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d113      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_TIM_Base_MspInit+0x8c>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	201e      	movs	r0, #30
 800194c:	f000 ff11 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001950:	201e      	movs	r0, #30
 8001952:	f000 ff2a 	bl	80027aa <HAL_NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	40000400 	.word	0x40000400
 8001968:	40000800 	.word	0x40000800

0800196c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198a:	d12b      	bne.n	80019e4 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_TIM_MspPostInit+0xe0>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a2e      	ldr	r2, [pc, #184]	; (8001a4c <HAL_TIM_MspPostInit+0xe0>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_TIM_MspPostInit+0xe0>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <HAL_TIM_MspPostInit+0xe4>)
 80019ba:	f000 ff11 	bl	80027e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_TIM_MspPostInit+0xe8>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ca:	623b      	str	r3, [r7, #32]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_TIM_MspPostInit+0xe8>)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019e2:	e02e      	b.n	8001a42 <HAL_TIM_MspPostInit+0xd6>
  else if(htim->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_TIM_MspPostInit+0xec>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d129      	bne.n	8001a42 <HAL_TIM_MspPostInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_TIM_MspPostInit+0xe0>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <HAL_TIM_MspPostInit+0xe0>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_TIM_MspPostInit+0xe0>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a06:	2310      	movs	r3, #16
 8001a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4619      	mov	r1, r3
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <HAL_TIM_MspPostInit+0xe4>)
 8001a1a:	f000 fee1 	bl	80027e0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_TIM_MspPostInit+0xe8>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_TIM_MspPostInit+0xe8>)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	6053      	str	r3, [r2, #4]
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40000400 	.word	0x40000400

08001a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_UART_MspInit+0xe0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d132      	bne.n	8001ae2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a2f      	ldr	r2, [pc, #188]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a29      	ldr	r2, [pc, #164]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Bluetooth_Pin;
 8001aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_Bluetooth_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4820      	ldr	r0, [pc, #128]	; (8001b44 <HAL_UART_MspInit+0xe8>)
 8001ac2:	f000 fe8d 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Bluetooth_Pin;
 8001ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART1_RX_Bluetooth_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	481a      	ldr	r0, [pc, #104]	; (8001b44 <HAL_UART_MspInit+0xe8>)
 8001adc:	f000 fe80 	bl	80027e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ae0:	e028      	b.n	8001b34 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a18      	ldr	r2, [pc, #96]	; (8001b48 <HAL_UART_MspInit+0xec>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d123      	bne.n	8001b34 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af6:	61d3      	str	r3, [r2, #28]
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_UART_MspInit+0xe4>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2302      	movs	r3, #2
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_UART_MspInit+0xe8>)
 8001b30:	f000 fe56 	bl	80027e0 <HAL_GPIO_Init>
}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40004400 	.word	0x40004400

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <NMI_Handler+0x4>

08001b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <MemManage_Handler+0x4>

08001b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b92:	f000 f8c9 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <TIM4_IRQHandler+0x10>)
 8001ba2:	f001 fef3 	bl	800398c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000098 	.word	0x20000098

08001bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bb8:	f000 ff9c 	bl	8002af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
	...

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f002 fe42 	bl	8004890 <__errno>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	230c      	movs	r3, #12
 8001c10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20005000 	.word	0x20005000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	2000008c 	.word	0x2000008c
 8001c40:	20000310 	.word	0x20000310

08001c44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c52:	e003      	b.n	8001c5c <LoopCopyDataInit>

08001c54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c5a:	3104      	adds	r1, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c5c:	480a      	ldr	r0, [pc, #40]	; (8001c88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c64:	d3f6      	bcc.n	8001c54 <CopyDataInit>
  ldr r2, =_sbss
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c68:	e002      	b.n	8001c70 <LoopFillZerobss>

08001c6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c6c:	f842 3b04 	str.w	r3, [r2], #4

08001c70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c74:	d3f9      	bcc.n	8001c6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c76:	f7ff ffe5 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f002 fe0f 	bl	800489c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c7e:	f7ff faa1 	bl	80011c4 <main>
  bx lr
 8001c82:	4770      	bx	lr
  ldr r3, =_sidata
 8001c84:	08005484 	.word	0x08005484
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c8c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001c90:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001c94:	20000310 	.word	0x20000310

08001c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC1_2_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x28>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x28>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fd55 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fd9e 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fd6d 	bl	80027c6 <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 fd35 	bl	8002772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x1c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x20>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_IncTick+0x20>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000308 	.word	0x20000308

08001d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_GetTick+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000308 	.word	0x20000308

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_Delay+0x40>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffe0 	bl	8001d4c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0be      	b.n	8001f44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fd3a 	bl	800185c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fbb1 	bl	8002550 <ADC_ConversionStop_Disable>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 8099 	bne.w	8001f32 <HAL_ADC_Init+0x18e>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 8095 	bne.w	8001f32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e10:	f023 0302 	bic.w	r3, r3, #2
 8001e14:	f043 0202 	orr.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7b1b      	ldrb	r3, [r3, #12]
 8001e2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3c:	d003      	beq.n	8001e46 <HAL_ADC_Init+0xa2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_ADC_Init+0xa8>
 8001e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4a:	e000      	b.n	8001e4e <HAL_ADC_Init+0xaa>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7d1b      	ldrb	r3, [r3, #20]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d119      	bne.n	8001e90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7b1b      	ldrb	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	035a      	lsls	r2, r3, #13
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e00b      	b.n	8001e90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_ADC_Init+0x1a8>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec0:	d003      	beq.n	8001eca <HAL_ADC_Init+0x126>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d104      	bne.n	8001ed4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	051b      	lsls	r3, r3, #20
 8001ed2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_ADC_Init+0x1ac>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f0e:	e018      	b.n	8001f42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f023 0312 	bic.w	r3, r3, #18
 8001f18:	f043 0210 	orr.w	r2, r3, #16
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f30:	e007      	b.n	8001f42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	f043 0210 	orr.w	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f50:	ff1f0efe 	.word	0xff1f0efe

08001f54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Start+0x1a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e098      	b.n	80020a0 <HAL_ADC_Start+0x14c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa98 	bl	80024ac <ADC_Enable>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 8087 	bne.w	8002096 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a41      	ldr	r2, [pc, #260]	; (80020a8 <HAL_ADC_Start+0x154>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d105      	bne.n	8001fb2 <HAL_ADC_Start+0x5e>
 8001fa6:	4b41      	ldr	r3, [pc, #260]	; (80020ac <HAL_ADC_Start+0x158>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d026      	beq.n	800201a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fdc:	e01d      	b.n	800201a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <HAL_ADC_Start+0x158>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_ADC_Start+0xaa>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <HAL_ADC_Start+0x154>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10d      	bne.n	800201a <HAL_ADC_Start+0xc6>
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_ADC_Start+0x158>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	f023 0206 	bic.w	r2, r3, #6
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
 8002032:	e002      	b.n	800203a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0202 	mvn.w	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002056:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800205a:	d113      	bne.n	8002084 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_ADC_Start+0x154>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d105      	bne.n	8002072 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_ADC_Start+0x158>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	e00c      	b.n	800209e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e003      	b.n	800209e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40012800 	.word	0x40012800
 80020ac:	40012400 	.word	0x40012400

080020b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80020c6:	f7ff fe41 	bl	8001d4c <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0c8      	b.n	8002284 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12a      	bne.n	8002156 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d123      	bne.n	8002156 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800210e:	e01a      	b.n	8002146 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d016      	beq.n	8002146 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_ADC_PollForConversion+0x7e>
 800211e:	f7ff fe15 	bl	8001d4c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d20b      	bcs.n	8002146 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e09e      	b.n	8002284 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0dd      	beq.n	8002110 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002154:	e06c      	b.n	8002230 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002156:	4b4d      	ldr	r3, [pc, #308]	; (800228c <HAL_ADC_PollForConversion+0x1dc>)
 8002158:	681c      	ldr	r4, [r3, #0]
 800215a:	2002      	movs	r0, #2
 800215c:	f001 f9be 	bl	80034dc <HAL_RCCEx_GetPeriphCLKFreq>
 8002160:	4603      	mov	r3, r0
 8002162:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6919      	ldr	r1, [r3, #16]
 800216c:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_ADC_PollForConversion+0x1e0>)
 800216e:	400b      	ands	r3, r1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d118      	bne.n	80021a6 <HAL_ADC_PollForConversion+0xf6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68d9      	ldr	r1, [r3, #12]
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_ADC_PollForConversion+0x1e4>)
 800217c:	400b      	ands	r3, r1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d111      	bne.n	80021a6 <HAL_ADC_PollForConversion+0xf6>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6919      	ldr	r1, [r3, #16]
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_ADC_PollForConversion+0x1e8>)
 800218a:	400b      	ands	r3, r1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <HAL_ADC_PollForConversion+0xf2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68d9      	ldr	r1, [r3, #12]
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_ADC_PollForConversion+0x1ec>)
 8002198:	400b      	ands	r3, r1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_PollForConversion+0xf2>
 800219e:	2314      	movs	r3, #20
 80021a0:	e020      	b.n	80021e4 <HAL_ADC_PollForConversion+0x134>
 80021a2:	2329      	movs	r3, #41	; 0x29
 80021a4:	e01e      	b.n	80021e4 <HAL_ADC_PollForConversion+0x134>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6919      	ldr	r1, [r3, #16]
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_ADC_PollForConversion+0x1e8>)
 80021ae:	400b      	ands	r3, r1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <HAL_ADC_PollForConversion+0x112>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68d9      	ldr	r1, [r3, #12]
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_ADC_PollForConversion+0x1ec>)
 80021bc:	400b      	ands	r3, r1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <HAL_ADC_PollForConversion+0x12e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6919      	ldr	r1, [r3, #16]
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_ADC_PollForConversion+0x1f0>)
 80021ca:	400b      	ands	r3, r1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x132>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_ADC_PollForConversion+0x1f0>)
 80021d8:	400b      	ands	r3, r1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x132>
 80021de:	2354      	movs	r3, #84	; 0x54
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_PollForConversion+0x134>
 80021e2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021ea:	e01d      	b.n	8002228 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d016      	beq.n	8002222 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_ADC_PollForConversion+0x15a>
 80021fa:	f7ff fda7 	bl	8001d4c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d20b      	bcs.n	8002222 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e030      	b.n	8002284 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d8dd      	bhi.n	80021ec <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0212 	mvn.w	r2, #18
 8002238:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002250:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002254:	d115      	bne.n	8002282 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800225a:	2b00      	cmp	r3, #0
 800225c:	d111      	bne.n	8002282 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	24924924 	.word	0x24924924
 8002294:	00924924 	.word	0x00924924
 8002298:	12492492 	.word	0x12492492
 800229c:	00492492 	.word	0x00492492
 80022a0:	00249249 	.word	0x00249249

080022a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x20>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0dc      	b.n	8002496 <HAL_ADC_ConfigChannel+0x1da>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d81c      	bhi.n	8002326 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3b05      	subs	r3, #5
 80022fe:	221f      	movs	r2, #31
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	4019      	ands	r1, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b05      	subs	r3, #5
 8002318:	fa00 f203 	lsl.w	r2, r0, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
 8002324:	e03c      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d81c      	bhi.n	8002368 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3b23      	subs	r3, #35	; 0x23
 8002340:	221f      	movs	r2, #31
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	4019      	ands	r1, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	3b23      	subs	r3, #35	; 0x23
 800235a:	fa00 f203 	lsl.w	r2, r0, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
 8002366:	e01b      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b41      	subs	r3, #65	; 0x41
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b41      	subs	r3, #65	; 0x41
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d91c      	bls.n	80023e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68d9      	ldr	r1, [r3, #12]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	3b1e      	subs	r3, #30
 80023ba:	2207      	movs	r2, #7
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4019      	ands	r1, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6898      	ldr	r0, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	3b1e      	subs	r3, #30
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	e019      	b.n	8002416 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6919      	ldr	r1, [r3, #16]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	2207      	movs	r2, #7
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4019      	ands	r1, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6898      	ldr	r0, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	fa00 f203 	lsl.w	r2, r0, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d003      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002422:	2b11      	cmp	r3, #17
 8002424:	d132      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d125      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d126      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800244c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d11a      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0c9a      	lsrs	r2, r3, #18
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800246c:	e002      	b.n	8002474 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3b01      	subs	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f9      	bne.n	800246e <HAL_ADC_ConfigChannel+0x1b2>
 800247a:	e007      	b.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40012400 	.word	0x40012400
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d039      	beq.n	800253e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <ADC_Enable+0x9c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1b      	ldr	r2, [pc, #108]	; (800254c <ADC_Enable+0xa0>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	0c9b      	lsrs	r3, r3, #18
 80024e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e8:	e002      	b.n	80024f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f6:	f7ff fc29 	bl	8001d4c <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024fc:	e018      	b.n	8002530 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fe:	f7ff fc25 	bl	8001d4c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d911      	bls.n	8002530 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f043 0210 	orr.w	r2, r3, #16
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e007      	b.n	8002540 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	d1df      	bne.n	80024fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000000 	.word	0x20000000
 800254c:	431bde83 	.word	0x431bde83

08002550 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d127      	bne.n	80025ba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800257a:	f7ff fbe7 	bl	8001d4c <HAL_GetTick>
 800257e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002580:	e014      	b.n	80025ac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002582:	f7ff fbe3 	bl	8001d4c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d90d      	bls.n	80025ac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f043 0210 	orr.w	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e007      	b.n	80025bc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d0e3      	beq.n	8002582 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	60d3      	str	r3, [r2, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4906      	ldr	r1, [pc, #24]	; (800265c <__NVIC_EnableIRQ+0x34>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff90 	bl	8002660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff2d 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff42 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff90 	bl	80026b4 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5f 	bl	8002660 <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff35 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b08b      	sub	sp, #44	; 0x2c
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f2:	e127      	b.n	8002a44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027f4:	2201      	movs	r2, #1
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 8116 	bne.w	8002a3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b12      	cmp	r3, #18
 8002818:	d034      	beq.n	8002884 <HAL_GPIO_Init+0xa4>
 800281a:	2b12      	cmp	r3, #18
 800281c:	d80d      	bhi.n	800283a <HAL_GPIO_Init+0x5a>
 800281e:	2b02      	cmp	r3, #2
 8002820:	d02b      	beq.n	800287a <HAL_GPIO_Init+0x9a>
 8002822:	2b02      	cmp	r3, #2
 8002824:	d804      	bhi.n	8002830 <HAL_GPIO_Init+0x50>
 8002826:	2b00      	cmp	r3, #0
 8002828:	d031      	beq.n	800288e <HAL_GPIO_Init+0xae>
 800282a:	2b01      	cmp	r3, #1
 800282c:	d01c      	beq.n	8002868 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800282e:	e048      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002830:	2b03      	cmp	r3, #3
 8002832:	d043      	beq.n	80028bc <HAL_GPIO_Init+0xdc>
 8002834:	2b11      	cmp	r3, #17
 8002836:	d01b      	beq.n	8002870 <HAL_GPIO_Init+0x90>
          break;
 8002838:	e043      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800283a:	4a89      	ldr	r2, [pc, #548]	; (8002a60 <HAL_GPIO_Init+0x280>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d026      	beq.n	800288e <HAL_GPIO_Init+0xae>
 8002840:	4a87      	ldr	r2, [pc, #540]	; (8002a60 <HAL_GPIO_Init+0x280>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d806      	bhi.n	8002854 <HAL_GPIO_Init+0x74>
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <HAL_GPIO_Init+0x284>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d020      	beq.n	800288e <HAL_GPIO_Init+0xae>
 800284c:	4a86      	ldr	r2, [pc, #536]	; (8002a68 <HAL_GPIO_Init+0x288>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01d      	beq.n	800288e <HAL_GPIO_Init+0xae>
          break;
 8002852:	e036      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002854:	4a85      	ldr	r2, [pc, #532]	; (8002a6c <HAL_GPIO_Init+0x28c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0xae>
 800285a:	4a85      	ldr	r2, [pc, #532]	; (8002a70 <HAL_GPIO_Init+0x290>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d016      	beq.n	800288e <HAL_GPIO_Init+0xae>
 8002860:	4a84      	ldr	r2, [pc, #528]	; (8002a74 <HAL_GPIO_Init+0x294>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0xae>
          break;
 8002866:	e02c      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	623b      	str	r3, [r7, #32]
          break;
 800286e:	e028      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	623b      	str	r3, [r7, #32]
          break;
 8002878:	e023      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	3308      	adds	r3, #8
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e01e      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	330c      	adds	r3, #12
 800288a:	623b      	str	r3, [r7, #32]
          break;
 800288c:	e019      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002896:	2304      	movs	r3, #4
 8002898:	623b      	str	r3, [r7, #32]
          break;
 800289a:	e012      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a4:	2308      	movs	r3, #8
 80028a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	611a      	str	r2, [r3, #16]
          break;
 80028ae:	e008      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b0:	2308      	movs	r3, #8
 80028b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	615a      	str	r2, [r3, #20]
          break;
 80028ba:	e002      	b.n	80028c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
          break;
 80028c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2bff      	cmp	r3, #255	; 0xff
 80028c6:	d801      	bhi.n	80028cc <HAL_GPIO_Init+0xec>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	e001      	b.n	80028d0 <HAL_GPIO_Init+0xf0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2bff      	cmp	r3, #255	; 0xff
 80028d6:	d802      	bhi.n	80028de <HAL_GPIO_Init+0xfe>
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	e002      	b.n	80028e4 <HAL_GPIO_Init+0x104>
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	3b08      	subs	r3, #8
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	210f      	movs	r1, #15
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	401a      	ands	r2, r3
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	431a      	orrs	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8096 	beq.w	8002a3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002912:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_GPIO_Init+0x298>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4a58      	ldr	r2, [pc, #352]	; (8002a78 <HAL_GPIO_Init+0x298>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6193      	str	r3, [r2, #24]
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_GPIO_Init+0x298>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800292a:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <HAL_GPIO_Init+0x29c>)
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <HAL_GPIO_Init+0x2a0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_GPIO_Init+0x19e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_GPIO_Init+0x2a4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00d      	beq.n	800297a <HAL_GPIO_Init+0x19a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a49      	ldr	r2, [pc, #292]	; (8002a88 <HAL_GPIO_Init+0x2a8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d007      	beq.n	8002976 <HAL_GPIO_Init+0x196>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a48      	ldr	r2, [pc, #288]	; (8002a8c <HAL_GPIO_Init+0x2ac>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d101      	bne.n	8002972 <HAL_GPIO_Init+0x192>
 800296e:	2303      	movs	r3, #3
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x1a0>
 8002972:	2304      	movs	r3, #4
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x1a0>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x1a0>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x1a0>
 800297e:	2300      	movs	r3, #0
 8002980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002990:	493a      	ldr	r1, [pc, #232]	; (8002a7c <HAL_GPIO_Init+0x29c>)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4938      	ldr	r1, [pc, #224]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
 80029b6:	e006      	b.n	80029c6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	43db      	mvns	r3, r3
 80029c0:	4933      	ldr	r1, [pc, #204]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029d2:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	492e      	ldr	r1, [pc, #184]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
 80029de:	e006      	b.n	80029ee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	4929      	ldr	r1, [pc, #164]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029fa:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	4924      	ldr	r1, [pc, #144]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
 8002a06:	e006      	b.n	8002a16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	491f      	ldr	r1, [pc, #124]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	491a      	ldr	r1, [pc, #104]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60cb      	str	r3, [r1, #12]
 8002a2e:	e006      	b.n	8002a3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4915      	ldr	r1, [pc, #84]	; (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3301      	adds	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f aed0 	bne.w	80027f4 <HAL_GPIO_Init+0x14>
  }
}
 8002a54:	bf00      	nop
 8002a56:	372c      	adds	r7, #44	; 0x2c
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	10210000 	.word	0x10210000
 8002a64:	10110000 	.word	0x10110000
 8002a68:	10120000 	.word	0x10120000
 8002a6c:	10310000 	.word	0x10310000
 8002a70:	10320000 	.word	0x10320000
 8002a74:	10220000 	.word	0x10220000
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40010800 	.word	0x40010800
 8002a84:	40010c00 	.word	0x40010c00
 8002a88:	40011000 	.word	0x40011000
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	40010400 	.word	0x40010400

08002a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e001      	b.n	8002ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	807b      	strh	r3, [r7, #2]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad2:	787b      	ldrb	r3, [r7, #1]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad8:	887a      	ldrh	r2, [r7, #2]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ade:	e003      	b.n	8002ae8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	041a      	lsls	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	611a      	str	r2, [r3, #16]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f806 	bl	8002b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e26c      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8087 	beq.w	8002c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b64:	4b8f      	ldr	r3, [pc, #572]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x12c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d168      	bne.n	8002c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e246      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x76>
 8002ba0:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7f      	ldr	r2, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7a      	ldr	r2, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xbc>
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff f89a 	bl	8001d4c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff f896 	bl	8001d4c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1fa      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe4>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f886 	bl	8001d4c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7ff f882 	bl	8001d4c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1e6      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x10c>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1ba      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7ff f83b 	bl	8001d4c <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7ff f837 	bl	8001d4c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e19b      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4927      	ldr	r1, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7ff f81a 	bl	8001d4c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7ff f816 	bl	8001d4c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e17a      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fe fffa 	bl	8001d4c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fff6 	bl	8001d4c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e15a      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f000 fada 	bl	8003334 <RCC_Delay>
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe ffe0 	bl	8001d4c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe ffdc 	bl	8001d4c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e140      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	42420000 	.word	0x42420000
 8002dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b9e      	ldr	r3, [pc, #632]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e9      	bne.n	8002d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a6 	beq.w	8002f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b97      	ldr	r3, [pc, #604]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b94      	ldr	r3, [pc, #592]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a93      	ldr	r2, [pc, #588]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]
 8002de6:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b8e      	ldr	r3, [pc, #568]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b8b      	ldr	r3, [pc, #556]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a8a      	ldr	r2, [pc, #552]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe ff9d 	bl	8001d4c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7fe ff99 	bl	8001d4c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0fd      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e3c:	4b7b      	ldr	r3, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e02d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a75      	ldr	r2, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a72      	ldr	r2, [pc, #456]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x356>
 8002e74:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a6c      	ldr	r2, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	4b6a      	ldr	r3, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a69      	ldr	r2, [pc, #420]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e8e:	4b67      	ldr	r3, [pc, #412]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a66      	ldr	r2, [pc, #408]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b64      	ldr	r3, [pc, #400]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a63      	ldr	r2, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe ff4d 	bl	8001d4c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe ff49 	bl	8001d4c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0ab      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fe ff37 	bl	8001d4c <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe ff33 	bl	8001d4c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e095      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b48      	ldr	r3, [pc, #288]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a47      	ldr	r2, [pc, #284]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8081 	beq.w	8003022 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f20:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d061      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d146      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe ff07 	bl	8001d4c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe ff03 	bl	8001d4c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e067      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	492d      	ldr	r1, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a19      	ldr	r1, [r3, #32]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	4927      	ldr	r1, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fed7 	bl	8001d4c <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe fed3 	bl	8001d4c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e037      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46a>
 8002fc0:	e02f      	b.n	8003022 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fec0 	bl	8001d4c <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe febc 	bl	8001d4c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e020      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x498>
 8002fee:	e018      	b.n	8003022 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e013      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
 8003034:	42420060 	.word	0x42420060

08003038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0d0      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800304c:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d910      	bls.n	800307c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0207 	bic.w	r2, r3, #7
 8003062:	4965      	ldr	r1, [pc, #404]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800309e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d040      	beq.n	8003158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d115      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e073      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06b      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003116:	4b39      	ldr	r3, [pc, #228]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4936      	ldr	r1, [pc, #216]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003128:	f7fe fe10 	bl	8001d4c <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	e00a      	b.n	8003146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7fe fe0c 	bl	8001d4c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e053      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 020c 	and.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	429a      	cmp	r2, r3
 8003156:	d1eb      	bne.n	8003130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d210      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	4922      	ldr	r1, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4601      	mov	r1, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	fa21 f303 	lsr.w	r3, r1, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1cc>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fd6e 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40021000 	.word	0x40021000
 8003200:	08005430 	.word	0x08005430
 8003204:	20000000 	.word	0x20000000
 8003208:	20000004 	.word	0x20000004

0800320c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b490      	push	{r4, r7}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003214:	1d3c      	adds	r4, r7, #4
 8003216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800321c:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b04      	cmp	r3, #4
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x40>
 8003246:	2b08      	cmp	r3, #8
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x46>
 800324a:	e02d      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800324c:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800324e:	623b      	str	r3, [r7, #32]
      break;
 8003250:	e02d      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	0c9b      	lsrs	r3, r3, #18
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800325e:	4413      	add	r3, r2
 8003260:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003264:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c5b      	lsrs	r3, r3, #17
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800327e:	4413      	add	r3, r2
 8003280:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003284:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800328a:	fb02 f203 	mul.w	r2, r2, r3
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e004      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4a0c      	ldr	r2, [pc, #48]	; (80032cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	623b      	str	r3, [r7, #32]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032aa:	623b      	str	r3, [r7, #32]
      break;
 80032ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc90      	pop	{r4, r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	08005408 	.word	0x08005408
 80032c0:	08005418 	.word	0x08005418
 80032c4:	40021000 	.word	0x40021000
 80032c8:	007a1200 	.word	0x007a1200
 80032cc:	003d0900 	.word	0x003d0900

080032d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	20000000 	.word	0x20000000

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e8:	f7ff fff2 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032ec:	4601      	mov	r1, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4a03      	ldr	r2, [pc, #12]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000
 8003308:	08005440 	.word	0x08005440

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003310:	f7ff ffde 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8003314:	4601      	mov	r1, r0
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	0adb      	lsrs	r3, r3, #11
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4a03      	ldr	r2, [pc, #12]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	08005440 	.word	0x08005440

08003334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <RCC_Delay+0x34>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0a      	ldr	r2, [pc, #40]	; (800336c <RCC_Delay+0x38>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a5b      	lsrs	r3, r3, #9
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003350:	bf00      	nop
  }
  while (Delay --);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e5a      	subs	r2, r3, #1
 8003356:	60fa      	str	r2, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f9      	bne.n	8003350 <RCC_Delay+0x1c>
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d07d      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003390:	4b4f      	ldr	r3, [pc, #316]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10d      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4a4b      	ldr	r2, [pc, #300]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a6:	61d3      	str	r3, [r2, #28]
 80033a8:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d118      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c4:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a42      	ldr	r2, [pc, #264]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d0:	f7fe fcbc 	bl	8001d4c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	e008      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe fcb8 	bl	8001d4c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e06d      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f6:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d02e      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	429a      	cmp	r2, r3
 8003412:	d027      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003414:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800341e:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003424:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800342a:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d014      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fe fc87 	bl	8001d4c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe fc83 	bl	8001d4c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e036      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ee      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4917      	ldr	r1, [pc, #92]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	4313      	orrs	r3, r2
 8003474:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d105      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003486:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	490b      	ldr	r1, [pc, #44]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b2:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4904      	ldr	r1, [pc, #16]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42420440 	.word	0x42420440

080034dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b08d      	sub	sp, #52	; 0x34
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034e4:	4b55      	ldr	r3, [pc, #340]	; (800363c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80034e6:	f107 040c 	add.w	r4, r7, #12
 80034ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034f0:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	2300      	movs	r3, #0
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d07f      	beq.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003510:	2b10      	cmp	r3, #16
 8003512:	d002      	beq.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003514:	2b01      	cmp	r3, #1
 8003516:	d048      	beq.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003518:	e08b      	b.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003520:	4b48      	ldr	r3, [pc, #288]	; (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d07f      	beq.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	0c9b      	lsrs	r3, r3, #18
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003538:	4413      	add	r3, r2
 800353a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800353e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800354a:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	0c5b      	lsrs	r3, r3, #17
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003558:	4413      	add	r3, r2
 800355a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800356a:	4a37      	ldr	r2, [pc, #220]	; (8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357a:	e004      	b.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	4a33      	ldr	r2, [pc, #204]	; (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003586:	4b2f      	ldr	r3, [pc, #188]	; (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003592:	d102      	bne.n	800359a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003598:	e048      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4a2c      	ldr	r2, [pc, #176]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035a8:	e040      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ba:	d108      	bne.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80035cc:	e01f      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d109      	bne.n	80035ee <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80035e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ec:	e00f      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f8:	d11a      	bne.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d014      	beq.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003606:	f24f 4324 	movw	r3, #62500	; 0xf424
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800360c:	e010      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800360e:	e00f      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003610:	f7ff fe7c 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	0b9b      	lsrs	r3, r3, #14
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	3301      	adds	r3, #1
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800362a:	e002      	b.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800362c:	bf00      	nop
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003630:	bf00      	nop
    }
  }
  return (frequency);
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003634:	4618      	mov	r0, r3
 8003636:	3734      	adds	r7, #52	; 0x34
 8003638:	46bd      	mov	sp, r7
 800363a:	bd90      	pop	{r4, r7, pc}
 800363c:	0800541c 	.word	0x0800541c
 8003640:	0800542c 	.word	0x0800542c
 8003644:	40021000 	.word	0x40021000
 8003648:	007a1200 	.word	0x007a1200
 800364c:	003d0900 	.word	0x003d0900
 8003650:	aaaaaaab 	.word	0xaaaaaaab

08003654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e041      	b.n	80036ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe f92a 	bl	80018d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 fc1c 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e03a      	b.n	8003782 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	; (800378c <HAL_TIM_Base_Start_IT+0x98>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x58>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d009      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x58>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_TIM_Base_Start_IT+0x9c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x58>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <HAL_TIM_Base_Start_IT+0xa0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d010      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	e007      	b.n	8003780 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800

08003798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e041      	b.n	800382e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f839 	bl	8003836 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f000 fb7a 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_TIM_PWM_Start+0x24>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e022      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b04      	cmp	r3, #4
 8003870:	d109      	bne.n	8003886 <HAL_TIM_PWM_Start+0x3e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	bf14      	ite	ne
 800387e:	2301      	movne	r3, #1
 8003880:	2300      	moveq	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	e015      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d109      	bne.n	80038a0 <HAL_TIM_PWM_Start+0x58>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e008      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e05e      	b.n	8003978 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Start+0x82>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	e013      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0x92>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d8:	e00b      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0xa2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e8:	e003      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fd68 	bl	80043d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_TIM_PWM_Start+0x138>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d107      	bne.n	800391a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_TIM_PWM_Start+0x138>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_TIM_PWM_Start+0xfa>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d009      	beq.n	8003942 <HAL_TIM_PWM_Start+0xfa>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <HAL_TIM_PWM_Start+0x13c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_TIM_PWM_Start+0xfa>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a12      	ldr	r2, [pc, #72]	; (8003988 <HAL_TIM_PWM_Start+0x140>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d111      	bne.n	8003966 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b06      	cmp	r3, #6
 8003952:	d010      	beq.n	8003976 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003964:	e007      	b.n	8003976 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40000400 	.word	0x40000400
 8003988:	40000800 	.word	0x40000800

0800398c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0202 	mvn.w	r2, #2
 80039b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa62 	bl	8003e98 <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa55 	bl	8003e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fa64 	bl	8003eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0204 	mvn.w	r2, #4
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa38 	bl	8003e98 <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa2b 	bl	8003e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fa3a 	bl	8003eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d122      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d11b      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0208 	mvn.w	r2, #8
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2204      	movs	r2, #4
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa0e 	bl	8003e98 <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa01 	bl	8003e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa10 	bl	8003eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d122      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0210 	mvn.w	r2, #16
 8003ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f9e4 	bl	8003e98 <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f9d7 	bl	8003e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f9e6 	bl	8003eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0201 	mvn.w	r2, #1
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd fe62 	bl	80017d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b80      	cmp	r3, #128	; 0x80
 8003b2a:	d107      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fcd5 	bl	80044e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d10e      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d107      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f9aa 	bl	8003ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d10e      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d107      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0220 	mvn.w	r2, #32
 8003b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fca0 	bl	80044d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e0ac      	b.n	8003d10 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	f200 809f 	bhi.w	8003d04 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003d05 	.word	0x08003d05
 8003bd4:	08003d05 	.word	0x08003d05
 8003bd8:	08003d05 	.word	0x08003d05
 8003bdc:	08003c41 	.word	0x08003c41
 8003be0:	08003d05 	.word	0x08003d05
 8003be4:	08003d05 	.word	0x08003d05
 8003be8:	08003d05 	.word	0x08003d05
 8003bec:	08003c83 	.word	0x08003c83
 8003bf0:	08003d05 	.word	0x08003d05
 8003bf4:	08003d05 	.word	0x08003d05
 8003bf8:	08003d05 	.word	0x08003d05
 8003bfc:	08003cc3 	.word	0x08003cc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f9c4 	bl	8003f94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0208 	orr.w	r2, r2, #8
 8003c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0204 	bic.w	r2, r2, #4
 8003c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6999      	ldr	r1, [r3, #24]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	619a      	str	r2, [r3, #24]
      break;
 8003c3e:	e062      	b.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fa0a 	bl	8004060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6999      	ldr	r1, [r3, #24]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	619a      	str	r2, [r3, #24]
      break;
 8003c80:	e041      	b.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fa53 	bl	8004134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0208 	orr.w	r2, r2, #8
 8003c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0204 	bic.w	r2, r2, #4
 8003cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69d9      	ldr	r1, [r3, #28]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	61da      	str	r2, [r3, #28]
      break;
 8003cc0:	e021      	b.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fa9d 	bl	8004208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	021a      	lsls	r2, r3, #8
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	61da      	str	r2, [r3, #28]
      break;
 8003d02:	e000      	b.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_TIM_ConfigClockSource+0x18>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e0a6      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x166>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d067      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0x120>
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d80b      	bhi.n	8003d84 <HAL_TIM_ConfigClockSource+0x6c>
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d073      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x140>
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d802      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x62>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d06f      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d78:	e078      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d06c      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x140>
 8003d7e:	2b30      	cmp	r3, #48	; 0x30
 8003d80:	d06a      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d82:	e073      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d84:	2b70      	cmp	r3, #112	; 0x70
 8003d86:	d00d      	beq.n	8003da4 <HAL_TIM_ConfigClockSource+0x8c>
 8003d88:	2b70      	cmp	r3, #112	; 0x70
 8003d8a:	d804      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x7e>
 8003d8c:	2b50      	cmp	r3, #80	; 0x50
 8003d8e:	d033      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0xe0>
 8003d90:	2b60      	cmp	r3, #96	; 0x60
 8003d92:	d041      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d94:	e06a      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	d066      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x152>
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d017      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003da2:	e063      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6899      	ldr	r1, [r3, #8]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f000 faed 	bl	8004392 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	609a      	str	r2, [r3, #8]
      break;
 8003dd0:	e04c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6899      	ldr	r1, [r3, #8]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f000 fad6 	bl	8004392 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df4:	609a      	str	r2, [r3, #8]
      break;
 8003df6:	e039      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	461a      	mov	r2, r3
 8003e06:	f000 fa4d 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2150      	movs	r1, #80	; 0x50
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 faa4 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8003e16:	e029      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f000 fa6b 	bl	8004300 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2160      	movs	r1, #96	; 0x60
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fa94 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8003e36:	e019      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fa2d 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2140      	movs	r1, #64	; 0x40
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fa84 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8003e56:	e009      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f000 fa7b 	bl	800435e <TIM_ITRx_SetConfig>
        break;
 8003e68:	e000      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
	...

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <TIM_Base_SetConfig+0xb8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <TIM_Base_SetConfig+0x30>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d007      	beq.n	8003f00 <TIM_Base_SetConfig+0x30>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <TIM_Base_SetConfig+0xbc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0x30>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <TIM_Base_SetConfig+0xc0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d108      	bne.n	8003f12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <TIM_Base_SetConfig+0xb8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00b      	beq.n	8003f32 <TIM_Base_SetConfig+0x62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d007      	beq.n	8003f32 <TIM_Base_SetConfig+0x62>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <TIM_Base_SetConfig+0xbc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_Base_SetConfig+0x62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <TIM_Base_SetConfig+0xc0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d108      	bne.n	8003f44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a07      	ldr	r2, [pc, #28]	; (8003f88 <TIM_Base_SetConfig+0xb8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d103      	bne.n	8003f78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	615a      	str	r2, [r3, #20]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800

08003f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f023 0201 	bic.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f023 0302 	bic.w	r3, r3, #2
 8003fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a1c      	ldr	r2, [pc, #112]	; (800405c <TIM_OC1_SetConfig+0xc8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10c      	bne.n	800400a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0308 	bic.w	r3, r3, #8
 8003ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a13      	ldr	r2, [pc, #76]	; (800405c <TIM_OC1_SetConfig+0xc8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d111      	bne.n	8004036 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	621a      	str	r2, [r3, #32]
}
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40012c00 	.word	0x40012c00

08004060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0210 	bic.w	r2, r3, #16
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0320 	bic.w	r3, r3, #32
 80040aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <TIM_OC2_SetConfig+0xd0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d10d      	bne.n	80040dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a14      	ldr	r2, [pc, #80]	; (8004130 <TIM_OC2_SetConfig+0xd0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d113      	bne.n	800410c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00

08004134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <TIM_OC3_SetConfig+0xd0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a14      	ldr	r2, [pc, #80]	; (8004204 <TIM_OC3_SetConfig+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d113      	bne.n	80041de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40012c00 	.word	0x40012c00

08004208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	031b      	lsls	r3, r3, #12
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <TIM_OC4_SetConfig+0x98>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d109      	bne.n	800427c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	40012c00 	.word	0x40012c00

080042a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 030a 	bic.w	r3, r3, #10
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f023 0210 	bic.w	r2, r3, #16
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	031b      	lsls	r3, r3, #12
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800433c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	f043 0307 	orr.w	r3, r3, #7
 8004380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	021a      	lsls	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	609a      	str	r2, [r3, #8]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr

080043d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	2201      	movs	r2, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	401a      	ands	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800442c:	2302      	movs	r3, #2
 800442e:	e046      	b.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d009      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a12      	ldr	r2, [pc, #72]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d10c      	bne.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800

080044d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e03f      	b.n	800458a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fa9c 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f905 	bl	800474c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b08a      	sub	sp, #40	; 0x28
 8004596:	af02      	add	r7, sp, #8
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d17c      	bne.n	80046ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_UART_Transmit+0x2c>
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e075      	b.n	80046ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_UART_Transmit+0x3e>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e06e      	b.n	80046ae <HAL_UART_Transmit+0x11c>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2221      	movs	r2, #33	; 0x21
 80045e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80045e6:	f7fd fbb1 	bl	8001d4c <HAL_GetTick>
 80045ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	88fa      	ldrh	r2, [r7, #6]
 80045f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004600:	d108      	bne.n	8004614 <HAL_UART_Transmit+0x82>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	e003      	b.n	800461c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004624:	e02a      	b.n	800467c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2200      	movs	r2, #0
 800462e:	2180      	movs	r1, #128	; 0x80
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f840 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e036      	b.n	80046ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	3302      	adds	r3, #2
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	e007      	b.n	800466e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	3301      	adds	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1cf      	bne.n	8004626 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2200      	movs	r2, #0
 800468e:	2140      	movs	r1, #64	; 0x40
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f810 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e006      	b.n	80046ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c6:	e02c      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d028      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80046d6:	f7fd fb39 	bl	8001d4c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d21d      	bcs.n	8004722 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e00f      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4013      	ands	r3, r2
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	429a      	cmp	r2, r3
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2300      	movne	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	429a      	cmp	r2, r3
 800473e:	d0c3      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004786:	f023 030c 	bic.w	r3, r3, #12
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	430b      	orrs	r3, r1
 8004792:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <UART_SetConfig+0x114>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d103      	bne.n	80047bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047b4:	f7fe fdaa 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	e002      	b.n	80047c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047bc:	f7fe fd92 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 80047c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009a      	lsls	r2, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	4a22      	ldr	r2, [pc, #136]	; (8004864 <UART_SetConfig+0x118>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	0119      	lsls	r1, r3, #4
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009a      	lsls	r2, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f8:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <UART_SetConfig+0x118>)
 80047fa:	fba3 0302 	umull	r0, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2064      	movs	r0, #100	; 0x64
 8004802:	fb00 f303 	mul.w	r3, r0, r3
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	3332      	adds	r3, #50	; 0x32
 800480c:	4a15      	ldr	r2, [pc, #84]	; (8004864 <UART_SetConfig+0x118>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004818:	4419      	add	r1, r3
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009a      	lsls	r2, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <UART_SetConfig+0x118>)
 8004832:	fba3 0302 	umull	r0, r3, r3, r2
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2064      	movs	r0, #100	; 0x64
 800483a:	fb00 f303 	mul.w	r3, r0, r3
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	3332      	adds	r3, #50	; 0x32
 8004844:	4a07      	ldr	r2, [pc, #28]	; (8004864 <UART_SetConfig+0x118>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	f003 020f 	and.w	r2, r3, #15
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	440a      	add	r2, r1
 8004856:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40013800 	.word	0x40013800
 8004864:	51eb851f 	.word	0x51eb851f

08004868 <clock>:
 8004868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800486a:	4b08      	ldr	r3, [pc, #32]	; (800488c <clock+0x24>)
 800486c:	4669      	mov	r1, sp
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	f000 f8de 	bl	8004a30 <_times_r>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d006      	beq.n	8004886 <clock+0x1e>
 8004878:	e9dd 0300 	ldrd	r0, r3, [sp]
 800487c:	4418      	add	r0, r3
 800487e:	9b02      	ldr	r3, [sp, #8]
 8004880:	4418      	add	r0, r3
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	4418      	add	r0, r3
 8004886:	b005      	add	sp, #20
 8004888:	f85d fb04 	ldr.w	pc, [sp], #4
 800488c:	2000000c 	.word	0x2000000c

08004890 <__errno>:
 8004890:	4b01      	ldr	r3, [pc, #4]	; (8004898 <__errno+0x8>)
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000000c 	.word	0x2000000c

0800489c <__libc_init_array>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	2500      	movs	r5, #0
 80048a0:	4e0c      	ldr	r6, [pc, #48]	; (80048d4 <__libc_init_array+0x38>)
 80048a2:	4c0d      	ldr	r4, [pc, #52]	; (80048d8 <__libc_init_array+0x3c>)
 80048a4:	1ba4      	subs	r4, r4, r6
 80048a6:	10a4      	asrs	r4, r4, #2
 80048a8:	42a5      	cmp	r5, r4
 80048aa:	d109      	bne.n	80048c0 <__libc_init_array+0x24>
 80048ac:	f000 fcce 	bl	800524c <_init>
 80048b0:	2500      	movs	r5, #0
 80048b2:	4e0a      	ldr	r6, [pc, #40]	; (80048dc <__libc_init_array+0x40>)
 80048b4:	4c0a      	ldr	r4, [pc, #40]	; (80048e0 <__libc_init_array+0x44>)
 80048b6:	1ba4      	subs	r4, r4, r6
 80048b8:	10a4      	asrs	r4, r4, #2
 80048ba:	42a5      	cmp	r5, r4
 80048bc:	d105      	bne.n	80048ca <__libc_init_array+0x2e>
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048c4:	4798      	blx	r3
 80048c6:	3501      	adds	r5, #1
 80048c8:	e7ee      	b.n	80048a8 <__libc_init_array+0xc>
 80048ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048ce:	4798      	blx	r3
 80048d0:	3501      	adds	r5, #1
 80048d2:	e7f2      	b.n	80048ba <__libc_init_array+0x1e>
 80048d4:	0800547c 	.word	0x0800547c
 80048d8:	0800547c 	.word	0x0800547c
 80048dc:	0800547c 	.word	0x0800547c
 80048e0:	08005480 	.word	0x08005480

080048e4 <memcpy>:
 80048e4:	b510      	push	{r4, lr}
 80048e6:	1e43      	subs	r3, r0, #1
 80048e8:	440a      	add	r2, r1
 80048ea:	4291      	cmp	r1, r2
 80048ec:	d100      	bne.n	80048f0 <memcpy+0xc>
 80048ee:	bd10      	pop	{r4, pc}
 80048f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048f8:	e7f7      	b.n	80048ea <memcpy+0x6>

080048fa <memset>:
 80048fa:	4603      	mov	r3, r0
 80048fc:	4402      	add	r2, r0
 80048fe:	4293      	cmp	r3, r2
 8004900:	d100      	bne.n	8004904 <memset+0xa>
 8004902:	4770      	bx	lr
 8004904:	f803 1b01 	strb.w	r1, [r3], #1
 8004908:	e7f9      	b.n	80048fe <memset+0x4>
	...

0800490c <srand>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <srand+0x38>)
 8004910:	4605      	mov	r5, r0
 8004912:	681c      	ldr	r4, [r3, #0]
 8004914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004916:	b97b      	cbnz	r3, 8004938 <srand+0x2c>
 8004918:	2018      	movs	r0, #24
 800491a:	f000 f89f 	bl	8004a5c <malloc>
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <srand+0x3c>)
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <srand+0x40>)
 8004922:	63a0      	str	r0, [r4, #56]	; 0x38
 8004924:	e9c0 2300 	strd	r2, r3, [r0]
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <srand+0x44>)
 800492a:	2201      	movs	r2, #1
 800492c:	6083      	str	r3, [r0, #8]
 800492e:	230b      	movs	r3, #11
 8004930:	8183      	strh	r3, [r0, #12]
 8004932:	2300      	movs	r3, #0
 8004934:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004938:	2200      	movs	r2, #0
 800493a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800493c:	611d      	str	r5, [r3, #16]
 800493e:	615a      	str	r2, [r3, #20]
 8004940:	bd38      	pop	{r3, r4, r5, pc}
 8004942:	bf00      	nop
 8004944:	2000000c 	.word	0x2000000c
 8004948:	abcd330e 	.word	0xabcd330e
 800494c:	e66d1234 	.word	0xe66d1234
 8004950:	0005deec 	.word	0x0005deec

08004954 <rand>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <rand+0x50>)
 8004958:	681c      	ldr	r4, [r3, #0]
 800495a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800495c:	b97b      	cbnz	r3, 800497e <rand+0x2a>
 800495e:	2018      	movs	r0, #24
 8004960:	f000 f87c 	bl	8004a5c <malloc>
 8004964:	4a10      	ldr	r2, [pc, #64]	; (80049a8 <rand+0x54>)
 8004966:	4b11      	ldr	r3, [pc, #68]	; (80049ac <rand+0x58>)
 8004968:	63a0      	str	r0, [r4, #56]	; 0x38
 800496a:	e9c0 2300 	strd	r2, r3, [r0]
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <rand+0x5c>)
 8004970:	2201      	movs	r2, #1
 8004972:	6083      	str	r3, [r0, #8]
 8004974:	230b      	movs	r3, #11
 8004976:	8183      	strh	r3, [r0, #12]
 8004978:	2300      	movs	r3, #0
 800497a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800497e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004980:	480c      	ldr	r0, [pc, #48]	; (80049b4 <rand+0x60>)
 8004982:	690a      	ldr	r2, [r1, #16]
 8004984:	694b      	ldr	r3, [r1, #20]
 8004986:	4350      	muls	r0, r2
 8004988:	4c0b      	ldr	r4, [pc, #44]	; (80049b8 <rand+0x64>)
 800498a:	fb04 0003 	mla	r0, r4, r3, r0
 800498e:	fba2 2304 	umull	r2, r3, r2, r4
 8004992:	4403      	add	r3, r0
 8004994:	1c54      	adds	r4, r2, #1
 8004996:	f143 0500 	adc.w	r5, r3, #0
 800499a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800499e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	2000000c 	.word	0x2000000c
 80049a8:	abcd330e 	.word	0xabcd330e
 80049ac:	e66d1234 	.word	0xe66d1234
 80049b0:	0005deec 	.word	0x0005deec
 80049b4:	5851f42d 	.word	0x5851f42d
 80049b8:	4c957f2d 	.word	0x4c957f2d

080049bc <siprintf>:
 80049bc:	b40e      	push	{r1, r2, r3}
 80049be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049c2:	b500      	push	{lr}
 80049c4:	b09c      	sub	sp, #112	; 0x70
 80049c6:	ab1d      	add	r3, sp, #116	; 0x74
 80049c8:	9002      	str	r0, [sp, #8]
 80049ca:	9006      	str	r0, [sp, #24]
 80049cc:	9107      	str	r1, [sp, #28]
 80049ce:	9104      	str	r1, [sp, #16]
 80049d0:	4808      	ldr	r0, [pc, #32]	; (80049f4 <siprintf+0x38>)
 80049d2:	4909      	ldr	r1, [pc, #36]	; (80049f8 <siprintf+0x3c>)
 80049d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d8:	9105      	str	r1, [sp, #20]
 80049da:	6800      	ldr	r0, [r0, #0]
 80049dc:	a902      	add	r1, sp, #8
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	f000 f944 	bl	8004c6c <_svfiprintf_r>
 80049e4:	2200      	movs	r2, #0
 80049e6:	9b02      	ldr	r3, [sp, #8]
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	b01c      	add	sp, #112	; 0x70
 80049ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f0:	b003      	add	sp, #12
 80049f2:	4770      	bx	lr
 80049f4:	2000000c 	.word	0x2000000c
 80049f8:	ffff0208 	.word	0xffff0208

080049fc <time>:
 80049fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <time+0x30>)
 8004a00:	4604      	mov	r4, r0
 8004a02:	2200      	movs	r2, #0
 8004a04:	4669      	mov	r1, sp
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	f000 f816 	bl	8004a38 <_gettimeofday_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	da05      	bge.n	8004a1c <time+0x20>
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295
 8004a14:	f04f 33ff 	mov.w	r3, #4294967295
 8004a18:	e9cd 2300 	strd	r2, r3, [sp]
 8004a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a20:	b10c      	cbz	r4, 8004a26 <time+0x2a>
 8004a22:	e9c4 0100 	strd	r0, r1, [r4]
 8004a26:	b004      	add	sp, #16
 8004a28:	bd10      	pop	{r4, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000000c 	.word	0x2000000c

08004a30 <_times_r>:
 8004a30:	4608      	mov	r0, r1
 8004a32:	f7fd b8c5 	b.w	8001bc0 <_times>
	...

08004a38 <_gettimeofday_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4c06      	ldr	r4, [pc, #24]	; (8004a58 <_gettimeofday_r+0x20>)
 8004a3e:	4605      	mov	r5, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	f000 fbf9 	bl	800523c <_gettimeofday>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	d102      	bne.n	8004a54 <_gettimeofday_r+0x1c>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	b103      	cbz	r3, 8004a54 <_gettimeofday_r+0x1c>
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	bf00      	nop
 8004a58:	2000030c 	.word	0x2000030c

08004a5c <malloc>:
 8004a5c:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <malloc+0xc>)
 8004a5e:	4601      	mov	r1, r0
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	f000 b84f 	b.w	8004b04 <_malloc_r>
 8004a66:	bf00      	nop
 8004a68:	2000000c 	.word	0x2000000c

08004a6c <_free_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4605      	mov	r5, r0
 8004a70:	2900      	cmp	r1, #0
 8004a72:	d043      	beq.n	8004afc <_free_r+0x90>
 8004a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a78:	1f0c      	subs	r4, r1, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfb8      	it	lt
 8004a7e:	18e4      	addlt	r4, r4, r3
 8004a80:	f000 fbab 	bl	80051da <__malloc_lock>
 8004a84:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <_free_r+0x94>)
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	4610      	mov	r0, r2
 8004a8a:	b933      	cbnz	r3, 8004a9a <_free_r+0x2e>
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	6014      	str	r4, [r2, #0]
 8004a90:	4628      	mov	r0, r5
 8004a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a96:	f000 bba1 	b.w	80051dc <__malloc_unlock>
 8004a9a:	42a3      	cmp	r3, r4
 8004a9c:	d90b      	bls.n	8004ab6 <_free_r+0x4a>
 8004a9e:	6821      	ldr	r1, [r4, #0]
 8004aa0:	1862      	adds	r2, r4, r1
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bf01      	itttt	eq
 8004aa6:	681a      	ldreq	r2, [r3, #0]
 8004aa8:	685b      	ldreq	r3, [r3, #4]
 8004aaa:	1852      	addeq	r2, r2, r1
 8004aac:	6022      	streq	r2, [r4, #0]
 8004aae:	6063      	str	r3, [r4, #4]
 8004ab0:	6004      	str	r4, [r0, #0]
 8004ab2:	e7ed      	b.n	8004a90 <_free_r+0x24>
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	b10a      	cbz	r2, 8004abe <_free_r+0x52>
 8004aba:	42a2      	cmp	r2, r4
 8004abc:	d9fa      	bls.n	8004ab4 <_free_r+0x48>
 8004abe:	6819      	ldr	r1, [r3, #0]
 8004ac0:	1858      	adds	r0, r3, r1
 8004ac2:	42a0      	cmp	r0, r4
 8004ac4:	d10b      	bne.n	8004ade <_free_r+0x72>
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	4401      	add	r1, r0
 8004aca:	1858      	adds	r0, r3, r1
 8004acc:	4282      	cmp	r2, r0
 8004ace:	6019      	str	r1, [r3, #0]
 8004ad0:	d1de      	bne.n	8004a90 <_free_r+0x24>
 8004ad2:	6810      	ldr	r0, [r2, #0]
 8004ad4:	6852      	ldr	r2, [r2, #4]
 8004ad6:	4401      	add	r1, r0
 8004ad8:	6019      	str	r1, [r3, #0]
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	e7d8      	b.n	8004a90 <_free_r+0x24>
 8004ade:	d902      	bls.n	8004ae6 <_free_r+0x7a>
 8004ae0:	230c      	movs	r3, #12
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	e7d4      	b.n	8004a90 <_free_r+0x24>
 8004ae6:	6820      	ldr	r0, [r4, #0]
 8004ae8:	1821      	adds	r1, r4, r0
 8004aea:	428a      	cmp	r2, r1
 8004aec:	bf01      	itttt	eq
 8004aee:	6811      	ldreq	r1, [r2, #0]
 8004af0:	6852      	ldreq	r2, [r2, #4]
 8004af2:	1809      	addeq	r1, r1, r0
 8004af4:	6021      	streq	r1, [r4, #0]
 8004af6:	6062      	str	r2, [r4, #4]
 8004af8:	605c      	str	r4, [r3, #4]
 8004afa:	e7c9      	b.n	8004a90 <_free_r+0x24>
 8004afc:	bd38      	pop	{r3, r4, r5, pc}
 8004afe:	bf00      	nop
 8004b00:	20000090 	.word	0x20000090

08004b04 <_malloc_r>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	1ccd      	adds	r5, r1, #3
 8004b08:	f025 0503 	bic.w	r5, r5, #3
 8004b0c:	3508      	adds	r5, #8
 8004b0e:	2d0c      	cmp	r5, #12
 8004b10:	bf38      	it	cc
 8004b12:	250c      	movcc	r5, #12
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	4606      	mov	r6, r0
 8004b18:	db01      	blt.n	8004b1e <_malloc_r+0x1a>
 8004b1a:	42a9      	cmp	r1, r5
 8004b1c:	d903      	bls.n	8004b26 <_malloc_r+0x22>
 8004b1e:	230c      	movs	r3, #12
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	2000      	movs	r0, #0
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
 8004b26:	f000 fb58 	bl	80051da <__malloc_lock>
 8004b2a:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <_malloc_r+0xac>)
 8004b2c:	6814      	ldr	r4, [r2, #0]
 8004b2e:	4621      	mov	r1, r4
 8004b30:	b991      	cbnz	r1, 8004b58 <_malloc_r+0x54>
 8004b32:	4c20      	ldr	r4, [pc, #128]	; (8004bb4 <_malloc_r+0xb0>)
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	b91b      	cbnz	r3, 8004b40 <_malloc_r+0x3c>
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f000 fb17 	bl	800516c <_sbrk_r>
 8004b3e:	6020      	str	r0, [r4, #0]
 8004b40:	4629      	mov	r1, r5
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 fb12 	bl	800516c <_sbrk_r>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d124      	bne.n	8004b96 <_malloc_r+0x92>
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	4630      	mov	r0, r6
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	f000 fb43 	bl	80051dc <__malloc_unlock>
 8004b56:	e7e4      	b.n	8004b22 <_malloc_r+0x1e>
 8004b58:	680b      	ldr	r3, [r1, #0]
 8004b5a:	1b5b      	subs	r3, r3, r5
 8004b5c:	d418      	bmi.n	8004b90 <_malloc_r+0x8c>
 8004b5e:	2b0b      	cmp	r3, #11
 8004b60:	d90f      	bls.n	8004b82 <_malloc_r+0x7e>
 8004b62:	600b      	str	r3, [r1, #0]
 8004b64:	18cc      	adds	r4, r1, r3
 8004b66:	50cd      	str	r5, [r1, r3]
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 fb37 	bl	80051dc <__malloc_unlock>
 8004b6e:	f104 000b 	add.w	r0, r4, #11
 8004b72:	1d23      	adds	r3, r4, #4
 8004b74:	f020 0007 	bic.w	r0, r0, #7
 8004b78:	1ac3      	subs	r3, r0, r3
 8004b7a:	d0d3      	beq.n	8004b24 <_malloc_r+0x20>
 8004b7c:	425a      	negs	r2, r3
 8004b7e:	50e2      	str	r2, [r4, r3]
 8004b80:	e7d0      	b.n	8004b24 <_malloc_r+0x20>
 8004b82:	684b      	ldr	r3, [r1, #4]
 8004b84:	428c      	cmp	r4, r1
 8004b86:	bf16      	itet	ne
 8004b88:	6063      	strne	r3, [r4, #4]
 8004b8a:	6013      	streq	r3, [r2, #0]
 8004b8c:	460c      	movne	r4, r1
 8004b8e:	e7eb      	b.n	8004b68 <_malloc_r+0x64>
 8004b90:	460c      	mov	r4, r1
 8004b92:	6849      	ldr	r1, [r1, #4]
 8004b94:	e7cc      	b.n	8004b30 <_malloc_r+0x2c>
 8004b96:	1cc4      	adds	r4, r0, #3
 8004b98:	f024 0403 	bic.w	r4, r4, #3
 8004b9c:	42a0      	cmp	r0, r4
 8004b9e:	d005      	beq.n	8004bac <_malloc_r+0xa8>
 8004ba0:	1a21      	subs	r1, r4, r0
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f000 fae2 	bl	800516c <_sbrk_r>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d0cf      	beq.n	8004b4c <_malloc_r+0x48>
 8004bac:	6025      	str	r5, [r4, #0]
 8004bae:	e7db      	b.n	8004b68 <_malloc_r+0x64>
 8004bb0:	20000090 	.word	0x20000090
 8004bb4:	20000094 	.word	0x20000094

08004bb8 <__ssputs_r>:
 8004bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	688e      	ldr	r6, [r1, #8]
 8004bbe:	4682      	mov	sl, r0
 8004bc0:	429e      	cmp	r6, r3
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	4690      	mov	r8, r2
 8004bc6:	4699      	mov	r9, r3
 8004bc8:	d837      	bhi.n	8004c3a <__ssputs_r+0x82>
 8004bca:	898a      	ldrh	r2, [r1, #12]
 8004bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bd0:	d031      	beq.n	8004c36 <__ssputs_r+0x7e>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	6825      	ldr	r5, [r4, #0]
 8004bd6:	6909      	ldr	r1, [r1, #16]
 8004bd8:	1a6f      	subs	r7, r5, r1
 8004bda:	6965      	ldr	r5, [r4, #20]
 8004bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004be0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004be4:	f109 0301 	add.w	r3, r9, #1
 8004be8:	443b      	add	r3, r7
 8004bea:	429d      	cmp	r5, r3
 8004bec:	bf38      	it	cc
 8004bee:	461d      	movcc	r5, r3
 8004bf0:	0553      	lsls	r3, r2, #21
 8004bf2:	d530      	bpl.n	8004c56 <__ssputs_r+0x9e>
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f7ff ff85 	bl	8004b04 <_malloc_r>
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	b950      	cbnz	r0, 8004c14 <__ssputs_r+0x5c>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	f8ca 3000 	str.w	r3, [sl]
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c14:	463a      	mov	r2, r7
 8004c16:	6921      	ldr	r1, [r4, #16]
 8004c18:	f7ff fe64 	bl	80048e4 <memcpy>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	6126      	str	r6, [r4, #16]
 8004c2a:	443e      	add	r6, r7
 8004c2c:	6026      	str	r6, [r4, #0]
 8004c2e:	464e      	mov	r6, r9
 8004c30:	6165      	str	r5, [r4, #20]
 8004c32:	1bed      	subs	r5, r5, r7
 8004c34:	60a5      	str	r5, [r4, #8]
 8004c36:	454e      	cmp	r6, r9
 8004c38:	d900      	bls.n	8004c3c <__ssputs_r+0x84>
 8004c3a:	464e      	mov	r6, r9
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	4641      	mov	r1, r8
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	f000 fab1 	bl	80051a8 <memmove>
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	2000      	movs	r0, #0
 8004c4a:	1b9b      	subs	r3, r3, r6
 8004c4c:	60a3      	str	r3, [r4, #8]
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	441e      	add	r6, r3
 8004c52:	6026      	str	r6, [r4, #0]
 8004c54:	e7dc      	b.n	8004c10 <__ssputs_r+0x58>
 8004c56:	462a      	mov	r2, r5
 8004c58:	f000 fac1 	bl	80051de <_realloc_r>
 8004c5c:	4606      	mov	r6, r0
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d1e2      	bne.n	8004c28 <__ssputs_r+0x70>
 8004c62:	6921      	ldr	r1, [r4, #16]
 8004c64:	4650      	mov	r0, sl
 8004c66:	f7ff ff01 	bl	8004a6c <_free_r>
 8004c6a:	e7c8      	b.n	8004bfe <__ssputs_r+0x46>

08004c6c <_svfiprintf_r>:
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	461d      	mov	r5, r3
 8004c72:	898b      	ldrh	r3, [r1, #12]
 8004c74:	b09d      	sub	sp, #116	; 0x74
 8004c76:	061f      	lsls	r7, r3, #24
 8004c78:	4680      	mov	r8, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	d50f      	bpl.n	8004ca0 <_svfiprintf_r+0x34>
 8004c80:	690b      	ldr	r3, [r1, #16]
 8004c82:	b96b      	cbnz	r3, 8004ca0 <_svfiprintf_r+0x34>
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	f7ff ff3d 	bl	8004b04 <_malloc_r>
 8004c8a:	6020      	str	r0, [r4, #0]
 8004c8c:	6120      	str	r0, [r4, #16]
 8004c8e:	b928      	cbnz	r0, 8004c9c <_svfiprintf_r+0x30>
 8004c90:	230c      	movs	r3, #12
 8004c92:	f8c8 3000 	str.w	r3, [r8]
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9a:	e0c8      	b.n	8004e2e <_svfiprintf_r+0x1c2>
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	6163      	str	r3, [r4, #20]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004caa:	2330      	movs	r3, #48	; 0x30
 8004cac:	f04f 0b01 	mov.w	fp, #1
 8004cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cb4:	9503      	str	r5, [sp, #12]
 8004cb6:	4637      	mov	r7, r6
 8004cb8:	463d      	mov	r5, r7
 8004cba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004cbe:	b10b      	cbz	r3, 8004cc4 <_svfiprintf_r+0x58>
 8004cc0:	2b25      	cmp	r3, #37	; 0x25
 8004cc2:	d13e      	bne.n	8004d42 <_svfiprintf_r+0xd6>
 8004cc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004cc8:	d00b      	beq.n	8004ce2 <_svfiprintf_r+0x76>
 8004cca:	4653      	mov	r3, sl
 8004ccc:	4632      	mov	r2, r6
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	f7ff ff71 	bl	8004bb8 <__ssputs_r>
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	f000 80a4 	beq.w	8004e24 <_svfiprintf_r+0x1b8>
 8004cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cde:	4453      	add	r3, sl
 8004ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce2:	783b      	ldrb	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 809d 	beq.w	8004e24 <_svfiprintf_r+0x1b8>
 8004cea:	2300      	movs	r3, #0
 8004cec:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cf4:	9304      	str	r3, [sp, #16]
 8004cf6:	9307      	str	r3, [sp, #28]
 8004cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8004cfe:	462f      	mov	r7, r5
 8004d00:	2205      	movs	r2, #5
 8004d02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004d06:	4850      	ldr	r0, [pc, #320]	; (8004e48 <_svfiprintf_r+0x1dc>)
 8004d08:	f000 fa40 	bl	800518c <memchr>
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	b9d0      	cbnz	r0, 8004d46 <_svfiprintf_r+0xda>
 8004d10:	06d9      	lsls	r1, r3, #27
 8004d12:	bf44      	itt	mi
 8004d14:	2220      	movmi	r2, #32
 8004d16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d1a:	071a      	lsls	r2, r3, #28
 8004d1c:	bf44      	itt	mi
 8004d1e:	222b      	movmi	r2, #43	; 0x2b
 8004d20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d24:	782a      	ldrb	r2, [r5, #0]
 8004d26:	2a2a      	cmp	r2, #42	; 0x2a
 8004d28:	d015      	beq.n	8004d56 <_svfiprintf_r+0xea>
 8004d2a:	462f      	mov	r7, r5
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	250a      	movs	r5, #10
 8004d30:	9a07      	ldr	r2, [sp, #28]
 8004d32:	4639      	mov	r1, r7
 8004d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d38:	3b30      	subs	r3, #48	; 0x30
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d94d      	bls.n	8004dda <_svfiprintf_r+0x16e>
 8004d3e:	b1b8      	cbz	r0, 8004d70 <_svfiprintf_r+0x104>
 8004d40:	e00f      	b.n	8004d62 <_svfiprintf_r+0xf6>
 8004d42:	462f      	mov	r7, r5
 8004d44:	e7b8      	b.n	8004cb8 <_svfiprintf_r+0x4c>
 8004d46:	4a40      	ldr	r2, [pc, #256]	; (8004e48 <_svfiprintf_r+0x1dc>)
 8004d48:	463d      	mov	r5, r7
 8004d4a:	1a80      	subs	r0, r0, r2
 8004d4c:	fa0b f000 	lsl.w	r0, fp, r0
 8004d50:	4318      	orrs	r0, r3
 8004d52:	9004      	str	r0, [sp, #16]
 8004d54:	e7d3      	b.n	8004cfe <_svfiprintf_r+0x92>
 8004d56:	9a03      	ldr	r2, [sp, #12]
 8004d58:	1d11      	adds	r1, r2, #4
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	9103      	str	r1, [sp, #12]
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	db01      	blt.n	8004d66 <_svfiprintf_r+0xfa>
 8004d62:	9207      	str	r2, [sp, #28]
 8004d64:	e004      	b.n	8004d70 <_svfiprintf_r+0x104>
 8004d66:	4252      	negs	r2, r2
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	9207      	str	r2, [sp, #28]
 8004d6e:	9304      	str	r3, [sp, #16]
 8004d70:	783b      	ldrb	r3, [r7, #0]
 8004d72:	2b2e      	cmp	r3, #46	; 0x2e
 8004d74:	d10c      	bne.n	8004d90 <_svfiprintf_r+0x124>
 8004d76:	787b      	ldrb	r3, [r7, #1]
 8004d78:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7a:	d133      	bne.n	8004de4 <_svfiprintf_r+0x178>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	3702      	adds	r7, #2
 8004d80:	1d1a      	adds	r2, r3, #4
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	9203      	str	r2, [sp, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bfb8      	it	lt
 8004d8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d8e:	9305      	str	r3, [sp, #20]
 8004d90:	4d2e      	ldr	r5, [pc, #184]	; (8004e4c <_svfiprintf_r+0x1e0>)
 8004d92:	2203      	movs	r2, #3
 8004d94:	7839      	ldrb	r1, [r7, #0]
 8004d96:	4628      	mov	r0, r5
 8004d98:	f000 f9f8 	bl	800518c <memchr>
 8004d9c:	b138      	cbz	r0, 8004dae <_svfiprintf_r+0x142>
 8004d9e:	2340      	movs	r3, #64	; 0x40
 8004da0:	1b40      	subs	r0, r0, r5
 8004da2:	fa03 f000 	lsl.w	r0, r3, r0
 8004da6:	9b04      	ldr	r3, [sp, #16]
 8004da8:	3701      	adds	r7, #1
 8004daa:	4303      	orrs	r3, r0
 8004dac:	9304      	str	r3, [sp, #16]
 8004dae:	7839      	ldrb	r1, [r7, #0]
 8004db0:	2206      	movs	r2, #6
 8004db2:	4827      	ldr	r0, [pc, #156]	; (8004e50 <_svfiprintf_r+0x1e4>)
 8004db4:	1c7e      	adds	r6, r7, #1
 8004db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dba:	f000 f9e7 	bl	800518c <memchr>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d038      	beq.n	8004e34 <_svfiprintf_r+0x1c8>
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <_svfiprintf_r+0x1e8>)
 8004dc4:	bb13      	cbnz	r3, 8004e0c <_svfiprintf_r+0x1a0>
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	3307      	adds	r3, #7
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	3308      	adds	r3, #8
 8004dd0:	9303      	str	r3, [sp, #12]
 8004dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd4:	444b      	add	r3, r9
 8004dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd8:	e76d      	b.n	8004cb6 <_svfiprintf_r+0x4a>
 8004dda:	fb05 3202 	mla	r2, r5, r2, r3
 8004dde:	2001      	movs	r0, #1
 8004de0:	460f      	mov	r7, r1
 8004de2:	e7a6      	b.n	8004d32 <_svfiprintf_r+0xc6>
 8004de4:	2300      	movs	r3, #0
 8004de6:	250a      	movs	r5, #10
 8004de8:	4619      	mov	r1, r3
 8004dea:	3701      	adds	r7, #1
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	4638      	mov	r0, r7
 8004df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df4:	3a30      	subs	r2, #48	; 0x30
 8004df6:	2a09      	cmp	r2, #9
 8004df8:	d903      	bls.n	8004e02 <_svfiprintf_r+0x196>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0c8      	beq.n	8004d90 <_svfiprintf_r+0x124>
 8004dfe:	9105      	str	r1, [sp, #20]
 8004e00:	e7c6      	b.n	8004d90 <_svfiprintf_r+0x124>
 8004e02:	fb05 2101 	mla	r1, r5, r1, r2
 8004e06:	2301      	movs	r3, #1
 8004e08:	4607      	mov	r7, r0
 8004e0a:	e7f0      	b.n	8004dee <_svfiprintf_r+0x182>
 8004e0c:	ab03      	add	r3, sp, #12
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4622      	mov	r2, r4
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <_svfiprintf_r+0x1ec>)
 8004e14:	a904      	add	r1, sp, #16
 8004e16:	4640      	mov	r0, r8
 8004e18:	f3af 8000 	nop.w
 8004e1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e20:	4681      	mov	r9, r0
 8004e22:	d1d6      	bne.n	8004dd2 <_svfiprintf_r+0x166>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	065b      	lsls	r3, r3, #25
 8004e28:	f53f af35 	bmi.w	8004c96 <_svfiprintf_r+0x2a>
 8004e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e2e:	b01d      	add	sp, #116	; 0x74
 8004e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e34:	ab03      	add	r3, sp, #12
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <_svfiprintf_r+0x1ec>)
 8004e3c:	a904      	add	r1, sp, #16
 8004e3e:	4640      	mov	r0, r8
 8004e40:	f000 f882 	bl	8004f48 <_printf_i>
 8004e44:	e7ea      	b.n	8004e1c <_svfiprintf_r+0x1b0>
 8004e46:	bf00      	nop
 8004e48:	08005448 	.word	0x08005448
 8004e4c:	0800544e 	.word	0x0800544e
 8004e50:	08005452 	.word	0x08005452
 8004e54:	00000000 	.word	0x00000000
 8004e58:	08004bb9 	.word	0x08004bb9

08004e5c <_printf_common>:
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	4691      	mov	r9, r2
 8004e62:	461f      	mov	r7, r3
 8004e64:	688a      	ldr	r2, [r1, #8]
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	4606      	mov	r6, r0
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bfb8      	it	lt
 8004e6e:	4613      	movlt	r3, r2
 8004e70:	f8c9 3000 	str.w	r3, [r9]
 8004e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e78:	460c      	mov	r4, r1
 8004e7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e7e:	b112      	cbz	r2, 8004e86 <_printf_common+0x2a>
 8004e80:	3301      	adds	r3, #1
 8004e82:	f8c9 3000 	str.w	r3, [r9]
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	0699      	lsls	r1, r3, #26
 8004e8a:	bf42      	ittt	mi
 8004e8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e90:	3302      	addmi	r3, #2
 8004e92:	f8c9 3000 	strmi.w	r3, [r9]
 8004e96:	6825      	ldr	r5, [r4, #0]
 8004e98:	f015 0506 	ands.w	r5, r5, #6
 8004e9c:	d107      	bne.n	8004eae <_printf_common+0x52>
 8004e9e:	f104 0a19 	add.w	sl, r4, #25
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	42ab      	cmp	r3, r5
 8004eac:	dc29      	bgt.n	8004f02 <_printf_common+0xa6>
 8004eae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	3300      	adds	r3, #0
 8004eb6:	bf18      	it	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	0692      	lsls	r2, r2, #26
 8004ebc:	d42e      	bmi.n	8004f1c <_printf_common+0xc0>
 8004ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	47c0      	blx	r8
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d021      	beq.n	8004f10 <_printf_common+0xb4>
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	68e5      	ldr	r5, [r4, #12]
 8004ed0:	f003 0306 	and.w	r3, r3, #6
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	bf18      	it	ne
 8004ed8:	2500      	movne	r5, #0
 8004eda:	f8d9 2000 	ldr.w	r2, [r9]
 8004ede:	f04f 0900 	mov.w	r9, #0
 8004ee2:	bf08      	it	eq
 8004ee4:	1aad      	subeq	r5, r5, r2
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	6922      	ldr	r2, [r4, #16]
 8004eea:	bf08      	it	eq
 8004eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bfc4      	itt	gt
 8004ef4:	1a9b      	subgt	r3, r3, r2
 8004ef6:	18ed      	addgt	r5, r5, r3
 8004ef8:	341a      	adds	r4, #26
 8004efa:	454d      	cmp	r5, r9
 8004efc:	d11a      	bne.n	8004f34 <_printf_common+0xd8>
 8004efe:	2000      	movs	r0, #0
 8004f00:	e008      	b.n	8004f14 <_printf_common+0xb8>
 8004f02:	2301      	movs	r3, #1
 8004f04:	4652      	mov	r2, sl
 8004f06:	4639      	mov	r1, r7
 8004f08:	4630      	mov	r0, r6
 8004f0a:	47c0      	blx	r8
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d103      	bne.n	8004f18 <_printf_common+0xbc>
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	3501      	adds	r5, #1
 8004f1a:	e7c2      	b.n	8004ea2 <_printf_common+0x46>
 8004f1c:	2030      	movs	r0, #48	; 0x30
 8004f1e:	18e1      	adds	r1, r4, r3
 8004f20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f2a:	4422      	add	r2, r4
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f32:	e7c4      	b.n	8004ebe <_printf_common+0x62>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4622      	mov	r2, r4
 8004f38:	4639      	mov	r1, r7
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	47c0      	blx	r8
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d0e6      	beq.n	8004f10 <_printf_common+0xb4>
 8004f42:	f109 0901 	add.w	r9, r9, #1
 8004f46:	e7d8      	b.n	8004efa <_printf_common+0x9e>

08004f48 <_printf_i>:
 8004f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f50:	460c      	mov	r4, r1
 8004f52:	7e09      	ldrb	r1, [r1, #24]
 8004f54:	b085      	sub	sp, #20
 8004f56:	296e      	cmp	r1, #110	; 0x6e
 8004f58:	4617      	mov	r7, r2
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	4698      	mov	r8, r3
 8004f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f60:	f000 80b3 	beq.w	80050ca <_printf_i+0x182>
 8004f64:	d822      	bhi.n	8004fac <_printf_i+0x64>
 8004f66:	2963      	cmp	r1, #99	; 0x63
 8004f68:	d036      	beq.n	8004fd8 <_printf_i+0x90>
 8004f6a:	d80a      	bhi.n	8004f82 <_printf_i+0x3a>
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	f000 80b9 	beq.w	80050e4 <_printf_i+0x19c>
 8004f72:	2958      	cmp	r1, #88	; 0x58
 8004f74:	f000 8083 	beq.w	800507e <_printf_i+0x136>
 8004f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f80:	e032      	b.n	8004fe8 <_printf_i+0xa0>
 8004f82:	2964      	cmp	r1, #100	; 0x64
 8004f84:	d001      	beq.n	8004f8a <_printf_i+0x42>
 8004f86:	2969      	cmp	r1, #105	; 0x69
 8004f88:	d1f6      	bne.n	8004f78 <_printf_i+0x30>
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	6813      	ldr	r3, [r2, #0]
 8004f8e:	0605      	lsls	r5, r0, #24
 8004f90:	f103 0104 	add.w	r1, r3, #4
 8004f94:	d52a      	bpl.n	8004fec <_printf_i+0xa4>
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da03      	bge.n	8004fa6 <_printf_i+0x5e>
 8004f9e:	222d      	movs	r2, #45	; 0x2d
 8004fa0:	425b      	negs	r3, r3
 8004fa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fa6:	486f      	ldr	r0, [pc, #444]	; (8005164 <_printf_i+0x21c>)
 8004fa8:	220a      	movs	r2, #10
 8004faa:	e039      	b.n	8005020 <_printf_i+0xd8>
 8004fac:	2973      	cmp	r1, #115	; 0x73
 8004fae:	f000 809d 	beq.w	80050ec <_printf_i+0x1a4>
 8004fb2:	d808      	bhi.n	8004fc6 <_printf_i+0x7e>
 8004fb4:	296f      	cmp	r1, #111	; 0x6f
 8004fb6:	d020      	beq.n	8004ffa <_printf_i+0xb2>
 8004fb8:	2970      	cmp	r1, #112	; 0x70
 8004fba:	d1dd      	bne.n	8004f78 <_printf_i+0x30>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	f043 0320 	orr.w	r3, r3, #32
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	e003      	b.n	8004fce <_printf_i+0x86>
 8004fc6:	2975      	cmp	r1, #117	; 0x75
 8004fc8:	d017      	beq.n	8004ffa <_printf_i+0xb2>
 8004fca:	2978      	cmp	r1, #120	; 0x78
 8004fcc:	d1d4      	bne.n	8004f78 <_printf_i+0x30>
 8004fce:	2378      	movs	r3, #120	; 0x78
 8004fd0:	4865      	ldr	r0, [pc, #404]	; (8005168 <_printf_i+0x220>)
 8004fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fd6:	e055      	b.n	8005084 <_printf_i+0x13c>
 8004fd8:	6813      	ldr	r3, [r2, #0]
 8004fda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fde:	1d19      	adds	r1, r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6011      	str	r1, [r2, #0]
 8004fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e08c      	b.n	8005106 <_printf_i+0x1be>
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ff2:	6011      	str	r1, [r2, #0]
 8004ff4:	bf18      	it	ne
 8004ff6:	b21b      	sxthne	r3, r3
 8004ff8:	e7cf      	b.n	8004f9a <_printf_i+0x52>
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	6825      	ldr	r5, [r4, #0]
 8004ffe:	1d18      	adds	r0, r3, #4
 8005000:	6010      	str	r0, [r2, #0]
 8005002:	0628      	lsls	r0, r5, #24
 8005004:	d501      	bpl.n	800500a <_printf_i+0xc2>
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	e002      	b.n	8005010 <_printf_i+0xc8>
 800500a:	0668      	lsls	r0, r5, #25
 800500c:	d5fb      	bpl.n	8005006 <_printf_i+0xbe>
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	296f      	cmp	r1, #111	; 0x6f
 8005012:	bf14      	ite	ne
 8005014:	220a      	movne	r2, #10
 8005016:	2208      	moveq	r2, #8
 8005018:	4852      	ldr	r0, [pc, #328]	; (8005164 <_printf_i+0x21c>)
 800501a:	2100      	movs	r1, #0
 800501c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005020:	6865      	ldr	r5, [r4, #4]
 8005022:	2d00      	cmp	r5, #0
 8005024:	60a5      	str	r5, [r4, #8]
 8005026:	f2c0 8095 	blt.w	8005154 <_printf_i+0x20c>
 800502a:	6821      	ldr	r1, [r4, #0]
 800502c:	f021 0104 	bic.w	r1, r1, #4
 8005030:	6021      	str	r1, [r4, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d13d      	bne.n	80050b2 <_printf_i+0x16a>
 8005036:	2d00      	cmp	r5, #0
 8005038:	f040 808e 	bne.w	8005158 <_printf_i+0x210>
 800503c:	4665      	mov	r5, ip
 800503e:	2a08      	cmp	r2, #8
 8005040:	d10b      	bne.n	800505a <_printf_i+0x112>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	07db      	lsls	r3, r3, #31
 8005046:	d508      	bpl.n	800505a <_printf_i+0x112>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	6862      	ldr	r2, [r4, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	bfde      	ittt	le
 8005050:	2330      	movle	r3, #48	; 0x30
 8005052:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005056:	f105 35ff 	addle.w	r5, r5, #4294967295
 800505a:	ebac 0305 	sub.w	r3, ip, r5
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	f8cd 8000 	str.w	r8, [sp]
 8005064:	463b      	mov	r3, r7
 8005066:	aa03      	add	r2, sp, #12
 8005068:	4621      	mov	r1, r4
 800506a:	4630      	mov	r0, r6
 800506c:	f7ff fef6 	bl	8004e5c <_printf_common>
 8005070:	3001      	adds	r0, #1
 8005072:	d14d      	bne.n	8005110 <_printf_i+0x1c8>
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	b005      	add	sp, #20
 800507a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800507e:	4839      	ldr	r0, [pc, #228]	; (8005164 <_printf_i+0x21c>)
 8005080:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	6821      	ldr	r1, [r4, #0]
 8005088:	1d1d      	adds	r5, r3, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6015      	str	r5, [r2, #0]
 800508e:	060a      	lsls	r2, r1, #24
 8005090:	d50b      	bpl.n	80050aa <_printf_i+0x162>
 8005092:	07ca      	lsls	r2, r1, #31
 8005094:	bf44      	itt	mi
 8005096:	f041 0120 	orrmi.w	r1, r1, #32
 800509a:	6021      	strmi	r1, [r4, #0]
 800509c:	b91b      	cbnz	r3, 80050a6 <_printf_i+0x15e>
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	f022 0220 	bic.w	r2, r2, #32
 80050a4:	6022      	str	r2, [r4, #0]
 80050a6:	2210      	movs	r2, #16
 80050a8:	e7b7      	b.n	800501a <_printf_i+0xd2>
 80050aa:	064d      	lsls	r5, r1, #25
 80050ac:	bf48      	it	mi
 80050ae:	b29b      	uxthmi	r3, r3
 80050b0:	e7ef      	b.n	8005092 <_printf_i+0x14a>
 80050b2:	4665      	mov	r5, ip
 80050b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80050b8:	fb02 3311 	mls	r3, r2, r1, r3
 80050bc:	5cc3      	ldrb	r3, [r0, r3]
 80050be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050c2:	460b      	mov	r3, r1
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d1f5      	bne.n	80050b4 <_printf_i+0x16c>
 80050c8:	e7b9      	b.n	800503e <_printf_i+0xf6>
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	6825      	ldr	r5, [r4, #0]
 80050ce:	1d18      	adds	r0, r3, #4
 80050d0:	6961      	ldr	r1, [r4, #20]
 80050d2:	6010      	str	r0, [r2, #0]
 80050d4:	0628      	lsls	r0, r5, #24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	d501      	bpl.n	80050de <_printf_i+0x196>
 80050da:	6019      	str	r1, [r3, #0]
 80050dc:	e002      	b.n	80050e4 <_printf_i+0x19c>
 80050de:	066a      	lsls	r2, r5, #25
 80050e0:	d5fb      	bpl.n	80050da <_printf_i+0x192>
 80050e2:	8019      	strh	r1, [r3, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	4665      	mov	r5, ip
 80050e8:	6123      	str	r3, [r4, #16]
 80050ea:	e7b9      	b.n	8005060 <_printf_i+0x118>
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	1d19      	adds	r1, r3, #4
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	681d      	ldr	r5, [r3, #0]
 80050f4:	6862      	ldr	r2, [r4, #4]
 80050f6:	2100      	movs	r1, #0
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 f847 	bl	800518c <memchr>
 80050fe:	b108      	cbz	r0, 8005104 <_printf_i+0x1bc>
 8005100:	1b40      	subs	r0, r0, r5
 8005102:	6060      	str	r0, [r4, #4]
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	2300      	movs	r3, #0
 800510a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510e:	e7a7      	b.n	8005060 <_printf_i+0x118>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	462a      	mov	r2, r5
 8005114:	4639      	mov	r1, r7
 8005116:	4630      	mov	r0, r6
 8005118:	47c0      	blx	r8
 800511a:	3001      	adds	r0, #1
 800511c:	d0aa      	beq.n	8005074 <_printf_i+0x12c>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	079b      	lsls	r3, r3, #30
 8005122:	d413      	bmi.n	800514c <_printf_i+0x204>
 8005124:	68e0      	ldr	r0, [r4, #12]
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	4298      	cmp	r0, r3
 800512a:	bfb8      	it	lt
 800512c:	4618      	movlt	r0, r3
 800512e:	e7a3      	b.n	8005078 <_printf_i+0x130>
 8005130:	2301      	movs	r3, #1
 8005132:	464a      	mov	r2, r9
 8005134:	4639      	mov	r1, r7
 8005136:	4630      	mov	r0, r6
 8005138:	47c0      	blx	r8
 800513a:	3001      	adds	r0, #1
 800513c:	d09a      	beq.n	8005074 <_printf_i+0x12c>
 800513e:	3501      	adds	r5, #1
 8005140:	68e3      	ldr	r3, [r4, #12]
 8005142:	9a03      	ldr	r2, [sp, #12]
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	42ab      	cmp	r3, r5
 8005148:	dcf2      	bgt.n	8005130 <_printf_i+0x1e8>
 800514a:	e7eb      	b.n	8005124 <_printf_i+0x1dc>
 800514c:	2500      	movs	r5, #0
 800514e:	f104 0919 	add.w	r9, r4, #25
 8005152:	e7f5      	b.n	8005140 <_printf_i+0x1f8>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1ac      	bne.n	80050b2 <_printf_i+0x16a>
 8005158:	7803      	ldrb	r3, [r0, #0]
 800515a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800515e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005162:	e76c      	b.n	800503e <_printf_i+0xf6>
 8005164:	08005459 	.word	0x08005459
 8005168:	0800546a 	.word	0x0800546a

0800516c <_sbrk_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	2300      	movs	r3, #0
 8005170:	4c05      	ldr	r4, [pc, #20]	; (8005188 <_sbrk_r+0x1c>)
 8005172:	4605      	mov	r5, r0
 8005174:	4608      	mov	r0, r1
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	f7fc fd2e 	bl	8001bd8 <_sbrk>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d102      	bne.n	8005186 <_sbrk_r+0x1a>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	b103      	cbz	r3, 8005186 <_sbrk_r+0x1a>
 8005184:	602b      	str	r3, [r5, #0]
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	2000030c 	.word	0x2000030c

0800518c <memchr>:
 800518c:	b510      	push	{r4, lr}
 800518e:	b2c9      	uxtb	r1, r1
 8005190:	4402      	add	r2, r0
 8005192:	4290      	cmp	r0, r2
 8005194:	4603      	mov	r3, r0
 8005196:	d101      	bne.n	800519c <memchr+0x10>
 8005198:	2300      	movs	r3, #0
 800519a:	e003      	b.n	80051a4 <memchr+0x18>
 800519c:	781c      	ldrb	r4, [r3, #0]
 800519e:	3001      	adds	r0, #1
 80051a0:	428c      	cmp	r4, r1
 80051a2:	d1f6      	bne.n	8005192 <memchr+0x6>
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <memmove>:
 80051a8:	4288      	cmp	r0, r1
 80051aa:	b510      	push	{r4, lr}
 80051ac:	eb01 0302 	add.w	r3, r1, r2
 80051b0:	d807      	bhi.n	80051c2 <memmove+0x1a>
 80051b2:	1e42      	subs	r2, r0, #1
 80051b4:	4299      	cmp	r1, r3
 80051b6:	d00a      	beq.n	80051ce <memmove+0x26>
 80051b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051c0:	e7f8      	b.n	80051b4 <memmove+0xc>
 80051c2:	4283      	cmp	r3, r0
 80051c4:	d9f5      	bls.n	80051b2 <memmove+0xa>
 80051c6:	1881      	adds	r1, r0, r2
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	42d3      	cmn	r3, r2
 80051cc:	d100      	bne.n	80051d0 <memmove+0x28>
 80051ce:	bd10      	pop	{r4, pc}
 80051d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80051d8:	e7f7      	b.n	80051ca <memmove+0x22>

080051da <__malloc_lock>:
 80051da:	4770      	bx	lr

080051dc <__malloc_unlock>:
 80051dc:	4770      	bx	lr

080051de <_realloc_r>:
 80051de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e0:	4607      	mov	r7, r0
 80051e2:	4614      	mov	r4, r2
 80051e4:	460e      	mov	r6, r1
 80051e6:	b921      	cbnz	r1, 80051f2 <_realloc_r+0x14>
 80051e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051ec:	4611      	mov	r1, r2
 80051ee:	f7ff bc89 	b.w	8004b04 <_malloc_r>
 80051f2:	b922      	cbnz	r2, 80051fe <_realloc_r+0x20>
 80051f4:	f7ff fc3a 	bl	8004a6c <_free_r>
 80051f8:	4625      	mov	r5, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051fe:	f000 f814 	bl	800522a <_malloc_usable_size_r>
 8005202:	42a0      	cmp	r0, r4
 8005204:	d20f      	bcs.n	8005226 <_realloc_r+0x48>
 8005206:	4621      	mov	r1, r4
 8005208:	4638      	mov	r0, r7
 800520a:	f7ff fc7b 	bl	8004b04 <_malloc_r>
 800520e:	4605      	mov	r5, r0
 8005210:	2800      	cmp	r0, #0
 8005212:	d0f2      	beq.n	80051fa <_realloc_r+0x1c>
 8005214:	4631      	mov	r1, r6
 8005216:	4622      	mov	r2, r4
 8005218:	f7ff fb64 	bl	80048e4 <memcpy>
 800521c:	4631      	mov	r1, r6
 800521e:	4638      	mov	r0, r7
 8005220:	f7ff fc24 	bl	8004a6c <_free_r>
 8005224:	e7e9      	b.n	80051fa <_realloc_r+0x1c>
 8005226:	4635      	mov	r5, r6
 8005228:	e7e7      	b.n	80051fa <_realloc_r+0x1c>

0800522a <_malloc_usable_size_r>:
 800522a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522e:	1f18      	subs	r0, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	bfbc      	itt	lt
 8005234:	580b      	ldrlt	r3, [r1, r0]
 8005236:	18c0      	addlt	r0, r0, r3
 8005238:	4770      	bx	lr
	...

0800523c <_gettimeofday>:
 800523c:	2258      	movs	r2, #88	; 0x58
 800523e:	4b02      	ldr	r3, [pc, #8]	; (8005248 <_gettimeofday+0xc>)
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	4770      	bx	lr
 8005248:	2000030c 	.word	0x2000030c

0800524c <_init>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr

08005258 <_fini>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	bf00      	nop
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr
