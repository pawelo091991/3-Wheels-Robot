
03_Robot_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000408c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004270  08004270  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004270  08004270  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004270  08004270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  080042e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080042e8  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d023  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d06  00000000  00000000  0002d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188d4  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab35  00000000  00000000  00048f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fa20  00000000  00000000  00053aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e34c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d8  00000000  00000000  000e3544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004180 	.word	0x08004180

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004180 	.word	0x08004180

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <robotDefaultValuesInit>:
 *      Author: pawel
 */
#include "STM32_Robot.h"

void robotDefaultValuesInit(Robot* rob, TIM_HandleTypeDef* timEngLeft, TIM_HandleTypeDef* timEngRight, UART_HandleTypeDef* uartUSB, UART_HandleTypeDef* uartBlth, UART_HandleTypeDef* uartSelected, ADC_HandleTypeDef* adc)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	rob->engLeft.tim = timEngLeft;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	68ba      	ldr	r2, [r7, #8]
 800016e:	601a      	str	r2, [r3, #0]
	rob->engLeft.timChl = TIM_CHANNEL_1;//3
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	2200      	movs	r2, #0
 8000174:	605a      	str	r2, [r3, #4]
	rob->engLeft.dirPinPort = GPIOB;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	4a5e      	ldr	r2, [pc, #376]	; (80002f4 <robotDefaultValuesInit+0x198>)
 800017a:	609a      	str	r2, [r3, #8]
	rob->engLeft.dirPin = GPIO_PIN_5;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2220      	movs	r2, #32
 8000180:	60da      	str	r2, [r3, #12]
	rob->engLeft.pwmVal = 0;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	741a      	strb	r2, [r3, #16]

	rob->engRight.tim = timEngRight;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	615a      	str	r2, [r3, #20]
	rob->engRight.timChl = TIM_CHANNEL_3;//1
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2208      	movs	r2, #8
 8000192:	619a      	str	r2, [r3, #24]
	rob->engRight.dirPinPort = GPIOC;
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	4a58      	ldr	r2, [pc, #352]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000198:	61da      	str	r2, [r3, #28]
	rob->engRight.dirPin = GPIO_PIN_7;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	2280      	movs	r2, #128	; 0x80
 800019e:	621a      	str	r2, [r3, #32]
	rob->engRight.pwmVal = 0;
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	2200      	movs	r2, #0
 80001a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	rob->uartUSB = uartUSB;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	683a      	ldr	r2, [r7, #0]
 80001ac:	629a      	str	r2, [r3, #40]	; 0x28
	rob->uartBlth = uartBlth;
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	69ba      	ldr	r2, [r7, #24]
 80001b2:	62da      	str	r2, [r3, #44]	; 0x2c
	rob->blthPinPort = GPIOA;		//to trzeba przerzucic na i2c
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	4a51      	ldr	r2, [pc, #324]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 80001b8:	635a      	str	r2, [r3, #52]	; 0x34
	rob->blthPin = GPIO_PIN_15;		//to trzeba przerzucic na i2c
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80001c0:	639a      	str	r2, [r3, #56]	; 0x38
	rob->uartSelected = uartSelected;
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	69fa      	ldr	r2, [r7, #28]
 80001c6:	631a      	str	r2, [r3, #48]	; 0x30

	strcpy(rob->snr[0].snrName, "RgtCnct");
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	3340      	adds	r3, #64	; 0x40
 80001cc:	494c      	ldr	r1, [pc, #304]	; (8000300 <robotDefaultValuesInit+0x1a4>)
 80001ce:	461a      	mov	r2, r3
 80001d0:	460b      	mov	r3, r1
 80001d2:	cb03      	ldmia	r3!, {r0, r1}
 80001d4:	6010      	str	r0, [r2, #0]
 80001d6:	6051      	str	r1, [r2, #4]
	rob->snr[0].snrPinPort = DIGIAL_SNR;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	2200      	movs	r2, #0
 80001dc:	64da      	str	r2, [r3, #76]	; 0x4c
	rob->snr[0].snrPinPort = GPIOA;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	4a46      	ldr	r2, [pc, #280]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 80001e2:	64da      	str	r2, [r3, #76]	; 0x4c
	rob->snr[0].snrPin = GPIO_PIN_0;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	2201      	movs	r2, #1
 80001e8:	651a      	str	r2, [r3, #80]	; 0x50
	rob->snr[0].snrVal = 0;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	2200      	movs	r2, #0
 80001ee:	655a      	str	r2, [r3, #84]	; 0x54

	strcpy(rob->snr[1].snrName, "LftCnct");
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	3368      	adds	r3, #104	; 0x68
 80001f4:	4943      	ldr	r1, [pc, #268]	; (8000304 <robotDefaultValuesInit+0x1a8>)
 80001f6:	461a      	mov	r2, r3
 80001f8:	460b      	mov	r3, r1
 80001fa:	cb03      	ldmia	r3!, {r0, r1}
 80001fc:	6010      	str	r0, [r2, #0]
 80001fe:	6051      	str	r1, [r2, #4]
	rob->snr[1].snrType = DIGIAL_SNR;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rob->snr[1].snrPinPort = GPIOA;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	4a3c      	ldr	r2, [pc, #240]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 800020c:	675a      	str	r2, [r3, #116]	; 0x74
	rob->snr[1].snrPin = GPIO_PIN_1;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2202      	movs	r2, #2
 8000212:	679a      	str	r2, [r3, #120]	; 0x78
	rob->snr[1].snrVal = 0;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2200      	movs	r2, #0
 8000218:	67da      	str	r2, [r3, #124]	; 0x7c

	strcpy(rob->snr[2].snrName, "RgtLight");
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	3390      	adds	r3, #144	; 0x90
 800021e:	493a      	ldr	r1, [pc, #232]	; (8000308 <robotDefaultValuesInit+0x1ac>)
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	cb03      	ldmia	r3!, {r0, r1}
 8000226:	6010      	str	r0, [r2, #0]
 8000228:	6051      	str	r1, [r2, #4]
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	7213      	strb	r3, [r2, #8]
	rob->snr[2].snrType = ANALOG_SNR;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	2201      	movs	r2, #1
 8000232:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rob->snr[2].snrPinPort = GPIOC;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 800023a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	rob->snr[2].snrPin = GPIO_PIN_5;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2220      	movs	r2, #32
 8000242:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	rob->snr[2].snrVal = 0;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	2200      	movs	r2, #0
 800024a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	rob->snr[2].snrAdc = adc;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	6a3a      	ldr	r2, [r7, #32]
 8000252:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	rob->snr[2].snrAdcChannel.Channel = ADC_CHANNEL_15;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	220f      	movs	r2, #15
 800025a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	rob->snr[2].snrAdcChannel.Rank = ADC_REGULAR_RANK_1;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2201      	movs	r2, #1
 8000262:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	rob->snr[2].snrAdcChannel.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2202      	movs	r2, #2
 800026a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000274:	4820      	ldr	r0, [pc, #128]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000276:	f001 fdfc 	bl	8001e72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2140      	movs	r1, #64	; 0x40
 800027e:	481e      	ldr	r0, [pc, #120]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000280:	f001 fdf7 	bl	8001e72 <HAL_GPIO_WritePin>

	strcpy(rob->snr[3].snrName, "LftLight");
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	33b8      	adds	r3, #184	; 0xb8
 8000288:	4920      	ldr	r1, [pc, #128]	; (800030c <robotDefaultValuesInit+0x1b0>)
 800028a:	461a      	mov	r2, r3
 800028c:	460b      	mov	r3, r1
 800028e:	cb03      	ldmia	r3!, {r0, r1}
 8000290:	6010      	str	r0, [r2, #0]
 8000292:	6051      	str	r1, [r2, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	7213      	strb	r3, [r2, #8]
	rob->snr[3].snrType = ANALOG_SNR;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2201      	movs	r2, #1
 800029c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rob->snr[3].snrPinPort = GPIOC;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 80002a4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	rob->snr[3].snrPin = GPIO_PIN_0;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	2201      	movs	r2, #1
 80002ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	rob->snr[3].snrVal = 0;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2200      	movs	r2, #0
 80002b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	rob->snr[3].snrAdc = adc;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	6a3a      	ldr	r2, [r7, #32]
 80002bc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	rob->snr[3].snrAdcChannel.Channel = ADC_CHANNEL_10;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	220a      	movs	r2, #10
 80002c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	rob->snr[3].snrAdcChannel.Rank = ADC_REGULAR_RANK_1;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2201      	movs	r2, #1
 80002cc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	rob->snr[3].snrAdcChannel.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	2202      	movs	r2, #2
 80002d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	2101      	movs	r1, #1
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <robotDefaultValuesInit+0x198>)
 80002de:	f001 fdc8 	bl	8001e72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	4804      	ldr	r0, [pc, #16]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 80002e8:	f001 fdc3 	bl	8001e72 <HAL_GPIO_WritePin>


}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	40011000 	.word	0x40011000
 80002fc:	40010800 	.word	0x40010800
 8000300:	08004198 	.word	0x08004198
 8000304:	080041a0 	.word	0x080041a0
 8000308:	080041a8 	.word	0x080041a8
 800030c:	080041b4 	.word	0x080041b4

08000310 <robotSetEnginePwm>:

void robotSetEnginePwm(Robot* rob, int8_t pwmValLeft, int8_t pwmValRight)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
 800031c:	4613      	mov	r3, r2
 800031e:	70bb      	strb	r3, [r7, #2]
	if(pwmValLeft >= -100 && pwmValLeft <= 100 && pwmValRight >= -100 && pwmValRight <= 100)
 8000320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000324:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000328:	f2c0 80c1 	blt.w	80004ae <robotSetEnginePwm+0x19e>
 800032c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000330:	2b64      	cmp	r3, #100	; 0x64
 8000332:	f300 80bc 	bgt.w	80004ae <robotSetEnginePwm+0x19e>
 8000336:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800033a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800033e:	f2c0 80b6 	blt.w	80004ae <robotSetEnginePwm+0x19e>
 8000342:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000346:	2b64      	cmp	r3, #100	; 0x64
 8000348:	f300 80b1 	bgt.w	80004ae <robotSetEnginePwm+0x19e>
	{
		rob->engLeft.pwmVal = pwmValLeft;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	78fa      	ldrb	r2, [r7, #3]
 8000350:	741a      	strb	r2, [r3, #16]
		rob->engRight.pwmVal = pwmValRight;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	78ba      	ldrb	r2, [r7, #2]
 8000356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if(rob->engLeft.pwmVal >= 0)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000360:	2b00      	cmp	r3, #0
 8000362:	db09      	blt.n	8000378 <robotSetEnginePwm+0x68>
			HAL_GPIO_WritePin(rob->engLeft.dirPinPort, rob->engLeft.dirPin, FOWARD);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6898      	ldr	r0, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b29b      	uxth	r3, r3
 800036e:	2200      	movs	r2, #0
 8000370:	4619      	mov	r1, r3
 8000372:	f001 fd7e 	bl	8001e72 <HAL_GPIO_WritePin>
 8000376:	e008      	b.n	800038a <robotSetEnginePwm+0x7a>
		else
			HAL_GPIO_WritePin(rob->engLeft.dirPinPort, rob->engLeft.dirPin, BACKWARD);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6898      	ldr	r0, [r3, #8]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	b29b      	uxth	r3, r3
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	f001 fd74 	bl	8001e72 <HAL_GPIO_WritePin>

		if(rob->engRight.pwmVal >= 0)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8000390:	2b00      	cmp	r3, #0
 8000392:	db09      	blt.n	80003a8 <robotSetEnginePwm+0x98>
			HAL_GPIO_WritePin(rob->engRight.dirPinPort, rob->engRight.dirPin, FOWARD);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	69d8      	ldr	r0, [r3, #28]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	b29b      	uxth	r3, r3
 800039e:	2200      	movs	r2, #0
 80003a0:	4619      	mov	r1, r3
 80003a2:	f001 fd66 	bl	8001e72 <HAL_GPIO_WritePin>
 80003a6:	e008      	b.n	80003ba <robotSetEnginePwm+0xaa>
		else
			HAL_GPIO_WritePin(rob->engRight.dirPinPort, rob->engRight.dirPin, BACKWARD);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	69d8      	ldr	r0, [r3, #28]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	2201      	movs	r2, #1
 80003b4:	4619      	mov	r1, r3
 80003b6:	f001 fd5c 	bl	8001e72 <HAL_GPIO_WritePin>

		uint32_t pwmVal = abs((rob->engLeft.pwmVal * PWM_MAX) / 100);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80003c0:	461a      	mov	r2, r3
 80003c2:	f649 1399 	movw	r3, #39321	; 0x9999
 80003c6:	fb03 f302 	mul.w	r3, r3, r2
 80003ca:	4a3b      	ldr	r2, [pc, #236]	; (80004b8 <robotSetEnginePwm+0x1a8>)
 80003cc:	fb82 1203 	smull	r1, r2, r2, r3
 80003d0:	1152      	asrs	r2, r2, #5
 80003d2:	17db      	asrs	r3, r3, #31
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	bfb8      	it	lt
 80003da:	425b      	neglt	r3, r3
 80003dc:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(rob->engLeft.tim, rob->engLeft.timChl, pwmVal);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d105      	bne.n	80003f2 <robotSetEnginePwm+0xe2>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	635a      	str	r2, [r3, #52]	; 0x34
 80003f0:	e018      	b.n	8000424 <robotSetEnginePwm+0x114>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d105      	bne.n	8000406 <robotSetEnginePwm+0xf6>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	639a      	str	r2, [r3, #56]	; 0x38
 8000404:	e00e      	b.n	8000424 <robotSetEnginePwm+0x114>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	2b08      	cmp	r3, #8
 800040c:	d105      	bne.n	800041a <robotSetEnginePwm+0x10a>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	63da      	str	r2, [r3, #60]	; 0x3c
 8000418:	e004      	b.n	8000424 <robotSetEnginePwm+0x114>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	641a      	str	r2, [r3, #64]	; 0x40

		pwmVal = abs((rob->engRight.pwmVal * PWM_MAX) / 100)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800042a:	461a      	mov	r2, r3
 800042c:	f649 1399 	movw	r3, #39321	; 0x9999
 8000430:	fb03 f302 	mul.w	r3, r3, r2
 8000434:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <robotSetEnginePwm+0x1a8>)
 8000436:	fb82 1203 	smull	r1, r2, r2, r3
 800043a:	1152      	asrs	r2, r2, #5
 800043c:	17db      	asrs	r3, r3, #31
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	bfb8      	it	lt
 8000444:	425b      	neglt	r3, r3
 8000446:	60fb      	str	r3, [r7, #12]
				;
		__HAL_TIM_SET_COMPARE(rob->engRight.tim, rob->engRight.timChl, pwmVal);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d105      	bne.n	800045c <robotSetEnginePwm+0x14c>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
 800045a:	e018      	b.n	800048e <robotSetEnginePwm+0x17e>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	2b04      	cmp	r3, #4
 8000462:	d105      	bne.n	8000470 <robotSetEnginePwm+0x160>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	639a      	str	r2, [r3, #56]	; 0x38
 800046e:	e00e      	b.n	800048e <robotSetEnginePwm+0x17e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	2b08      	cmp	r3, #8
 8000476:	d105      	bne.n	8000484 <robotSetEnginePwm+0x174>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	63da      	str	r2, [r3, #60]	; 0x3c
 8000482:	e004      	b.n	800048e <robotSetEnginePwm+0x17e>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(rob->engRight.tim, rob->engRight.timChl);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4619      	mov	r1, r3
 8000498:	4610      	mov	r0, r2
 800049a:	f002 fb5b 	bl	8002b54 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(rob->engLeft.tim, rob->engLeft.timChl);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	4619      	mov	r1, r3
 80004a8:	4610      	mov	r0, r2
 80004aa:	f002 fb53 	bl	8002b54 <HAL_TIM_PWM_Start>
	}
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	51eb851f 	.word	0x51eb851f

080004bc <robotTelemetry>:

void robotTelemetry(Robot *rob)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b0b7      	sub	sp, #220	; 0xdc
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
	char data[200];
	//sprintf(data, "Left Enigne PWM Duty Cycle: %i%%\r\nRight Enigne PWM Duty Cycle: %i%%\r\n\r\n",
			//rob->engLeft.pwmVal, rob->engRight.pwmVal);
	//int32_t diff = rob->snr[2].snrVal - rob->snr[3].snrVa
	sprintf(data, "Right Sensor: %lu\r\nLeft Sensor: %lu\r\nDifference = %li\r\n\r\n", rob->snr[2].snrVal, rob->snr[3].snrVal, (int32_t)(rob->snr[2].snrVal-rob->snr[3].snrVal));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f8d3 40cc 	ldr.w	r4, [r3, #204]	; 0xcc
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	f107 0008 	add.w	r0, r7, #8
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4623      	mov	r3, r4
 80004e6:	460a      	mov	r2, r1
 80004e8:	491a      	ldr	r1, [pc, #104]	; (8000554 <robotTelemetry+0x98>)
 80004ea:	f003 fa37 	bl	800395c <siprintf>

	if(rob->uartSelected == rob->uartUSB)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d109      	bne.n	800050e <robotTelemetry+0x52>
		HAL_GPIO_WritePin(rob->blthPinPort, rob->blthPin, GPIO_PIN_RESET);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000502:	b29b      	uxth	r3, r3
 8000504:	2200      	movs	r2, #0
 8000506:	4619      	mov	r1, r3
 8000508:	f001 fcb3 	bl	8001e72 <HAL_GPIO_WritePin>
 800050c:	e00e      	b.n	800052c <robotTelemetry+0x70>

	else if(rob->uartSelected == rob->uartBlth)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000516:	429a      	cmp	r2, r3
 8000518:	d108      	bne.n	800052c <robotTelemetry+0x70>
		HAL_GPIO_WritePin(rob->blthPinPort, rob->blthPin, GPIO_PIN_SET);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000522:	b29b      	uxth	r3, r3
 8000524:	2201      	movs	r2, #1
 8000526:	4619      	mov	r1, r3
 8000528:	f001 fca3 	bl	8001e72 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(rob->uartSelected, (uint8_t*)data, strlen(data), 1000);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe09 	bl	800014c <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	b29a      	uxth	r2, r3
 800053e:	f107 0108 	add.w	r1, r7, #8
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	4620      	mov	r0, r4
 8000548:	f003 f86b 	bl	8003622 <HAL_UART_Transmit>

}
 800054c:	bf00      	nop
 800054e:	37d4      	adds	r7, #212	; 0xd4
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	080041c0 	.word	0x080041c0

08000558 <robotReadSensors>:
		robotSetEnginePwm(rob, 0, 0);
	}
}

void robotReadSensors(Robot* rob)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NUMBER_SNR; i++){
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e07f      	b.n	8000666 <robotReadSensors+0x10e>
		if(rob->snr[i].snrType == DIGIAL_SNR)
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	440b      	add	r3, r1
 8000574:	334a      	adds	r3, #74	; 0x4a
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d121      	bne.n	80005c0 <robotReadSensors+0x68>
			rob->snr[i].snrVal = HAL_GPIO_ReadPin(rob->snr[i].snrPinPort, rob->snr[i].snrPin);
 800057c:	7bfa      	ldrb	r2, [r7, #15]
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	440b      	add	r3, r1
 800058a:	334c      	adds	r3, #76	; 0x4c
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	7bfa      	ldrb	r2, [r7, #15]
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	4613      	mov	r3, r2
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	4413      	add	r3, r2
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	440b      	add	r3, r1
 800059c:	3350      	adds	r3, #80	; 0x50
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4619      	mov	r1, r3
 80005a4:	f001 fc4e 	bl	8001e44 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	7bfa      	ldrb	r2, [r7, #15]
 80005ac:	4618      	mov	r0, r3
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	440b      	add	r3, r1
 80005ba:	3354      	adds	r3, #84	; 0x54
 80005bc:	6018      	str	r0, [r3, #0]
 80005be:	e04f      	b.n	8000660 <robotReadSensors+0x108>

		else if(rob->snr[i].snrType == ANALOG_SNR){
 80005c0:	7bfa      	ldrb	r2, [r7, #15]
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	440b      	add	r3, r1
 80005ce:	334a      	adds	r3, #74	; 0x4a
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d144      	bne.n	8000660 <robotReadSensors+0x108>
			HAL_ADC_ConfigChannel(rob->snr[i].snrAdc, &rob->snr[i].snrAdcChannel);
 80005d6:	7bfa      	ldrb	r2, [r7, #15]
 80005d8:	6879      	ldr	r1, [r7, #4]
 80005da:	4613      	mov	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	440b      	add	r3, r1
 80005e4:	3358      	adds	r3, #88	; 0x58
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	7bfa      	ldrb	r2, [r7, #15]
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	3358      	adds	r3, #88	; 0x58
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	3304      	adds	r3, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	f001 f836 	bl	800166c <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(rob->snr[i].snrAdc);
 8000600:	7bfa      	ldrb	r2, [r7, #15]
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	440b      	add	r3, r1
 800060e:	3358      	adds	r3, #88	; 0x58
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fe76 	bl	8001304 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(rob->snr[i].snrAdc, 1000);
 8000618:	7bfa      	ldrb	r2, [r7, #15]
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	440b      	add	r3, r1
 8000626:	3358      	adds	r3, #88	; 0x58
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800062e:	4618      	mov	r0, r3
 8000630:	f000 ff16 	bl	8001460 <HAL_ADC_PollForConversion>
			rob->snr[i].snrVal = HAL_ADC_GetValue(rob->snr[i].snrAdc);
 8000634:	7bfa      	ldrb	r2, [r7, #15]
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	440b      	add	r3, r1
 8000642:	3358      	adds	r3, #88	; 0x58
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	7bfc      	ldrb	r4, [r7, #15]
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f803 	bl	8001654 <HAL_ADC_GetValue>
 800064e:	4601      	mov	r1, r0
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4623      	mov	r3, r4
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4423      	add	r3, r4
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	4413      	add	r3, r2
 800065c:	3354      	adds	r3, #84	; 0x54
 800065e:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0; i < NUMBER_SNR; i++){
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	3301      	adds	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b03      	cmp	r3, #3
 800066a:	f67f af7c 	bls.w	8000566 <robotReadSensors+0xe>
		}
	}
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bd90      	pop	{r4, r7, pc}
	...

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fd07 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f867 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 fa39 	bl	8000afc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800068a:	f000 fa0d 	bl	8000aa8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800068e:	f000 f8f5 	bl	800087c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000692:	f000 f969 	bl	8000968 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000696:	f000 f9dd 	bl	8000a54 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800069a:	f000 f8b1 	bl	8000800 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  	  robotDefaultValuesInit(&rob, &htim3, &htim2, &huart2, &huart1, &huart2, &hadc1);
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <main+0xc4>)
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <main+0xc8>)
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <main+0xcc>)
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <main+0xc8>)
 80006ac:	4a26      	ldr	r2, [pc, #152]	; (8000748 <main+0xd0>)
 80006ae:	4927      	ldr	r1, [pc, #156]	; (800074c <main+0xd4>)
 80006b0:	4827      	ldr	r0, [pc, #156]	; (8000750 <main+0xd8>)
 80006b2:	f7ff fd53 	bl	800015c <robotDefaultValuesInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  robotReadSensors(&rob);
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <main+0xd8>)
 80006b8:	f7ff ff4e 	bl	8000558 <robotReadSensors>
	  robotTelemetry(&rob);
 80006bc:	4824      	ldr	r0, [pc, #144]	; (8000750 <main+0xd8>)
 80006be:	f7ff fefd 	bl	80004bc <robotTelemetry>
	  //HAL_Delay(2000);
	  if(rob.snr[2].snrVal > 3600 && rob.snr[3].snrVal > 3600)
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <main+0xd8>)
 80006c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80006c8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80006cc:	d90b      	bls.n	80006e6 <main+0x6e>
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <main+0xd8>)
 80006d0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80006d4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80006d8:	d905      	bls.n	80006e6 <main+0x6e>
		  robotSetEnginePwm(&rob, MXSPD, MXSPD);
 80006da:	2228      	movs	r2, #40	; 0x28
 80006dc:	2128      	movs	r1, #40	; 0x28
 80006de:	481c      	ldr	r0, [pc, #112]	; (8000750 <main+0xd8>)
 80006e0:	f7ff fe16 	bl	8000310 <robotSetEnginePwm>
 80006e4:	e028      	b.n	8000738 <main+0xc0>
	  else if(rob.snr[2].snrVal < 3600 && rob.snr[3].snrVal > 3600)
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <main+0xd8>)
 80006e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80006ec:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80006f0:	d20b      	bcs.n	800070a <main+0x92>
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <main+0xd8>)
 80006f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80006f8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80006fc:	d905      	bls.n	800070a <main+0x92>
		  robotSetEnginePwm(&rob, 5, MXSPD);
 80006fe:	2228      	movs	r2, #40	; 0x28
 8000700:	2105      	movs	r1, #5
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <main+0xd8>)
 8000704:	f7ff fe04 	bl	8000310 <robotSetEnginePwm>
 8000708:	e016      	b.n	8000738 <main+0xc0>
	  else if(rob.snr[2].snrVal > 3600 && rob.snr[3].snrVal < 3600)
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <main+0xd8>)
 800070c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000710:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000714:	d90b      	bls.n	800072e <main+0xb6>
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <main+0xd8>)
 8000718:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800071c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000720:	d205      	bcs.n	800072e <main+0xb6>
		  robotSetEnginePwm(&rob, MXSPD, 5);
 8000722:	2205      	movs	r2, #5
 8000724:	2128      	movs	r1, #40	; 0x28
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <main+0xd8>)
 8000728:	f7ff fdf2 	bl	8000310 <robotSetEnginePwm>
 800072c:	e004      	b.n	8000738 <main+0xc0>
	  else
		  robotSetEnginePwm(&rob, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <main+0xd8>)
 8000734:	f7ff fdec 	bl	8000310 <robotSetEnginePwm>
	  robotReadSensors(&rob);
 8000738:	e7bd      	b.n	80006b6 <main+0x3e>
 800073a:	bf00      	nop
 800073c:	200000e0 	.word	0x200000e0
 8000740:	2000027c 	.word	0x2000027c
 8000744:	20000110 	.word	0x20000110
 8000748:	20000234 	.word	0x20000234
 800074c:	20000098 	.word	0x20000098
 8000750:	20000150 	.word	0x20000150

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 f8f2 	bl	800394c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000794:	2300      	movs	r3, #0
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000798:	2300      	movs	r3, #0
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fba1 	bl	8001ee8 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007ac:	f000 fa4c 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fe0b 	bl	80023e8 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007d8:	f000 fa36 	bl	8000c48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007dc:	2302      	movs	r3, #2
 80007de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 ff9a 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007f2:	f000 fa29 	bl	8000c48 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_ADC1_Init+0x74>)
 8000812:	4a19      	ldr	r2, [pc, #100]	; (8000878 <MX_ADC1_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_ADC1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_ADC1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_ADC1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_ADC1_Init+0x74>)
 800082a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800082e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_ADC1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_ADC1_Init+0x74>)
 8000838:	2201      	movs	r2, #1
 800083a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_ADC1_Init+0x74>)
 800083e:	f000 fc89 	bl	8001154 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 f9fe 	bl	8000c48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800084c:	230f      	movs	r3, #15
 800084e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000850:	2301      	movs	r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_ADC1_Init+0x74>)
 800085e:	f000 ff05 	bl	800166c <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000868:	f000 f9ee 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000e0 	.word	0x200000e0
 8000878:	40012400 	.word	0x40012400

0800087c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	; 0x38
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	615a      	str	r2, [r3, #20]
 80008aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <MX_TIM2_Init+0xe8>)
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <MX_TIM2_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_TIM2_Init+0xe8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_TIM2_Init+0xe8>)
 80008c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_TIM2_Init+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_TIM2_Init+0xe8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d4:	4823      	ldr	r0, [pc, #140]	; (8000964 <MX_TIM2_Init+0xe8>)
 80008d6:	f002 f895 	bl	8002a04 <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008e0:	f000 f9b2 	bl	8000c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ee:	4619      	mov	r1, r3
 80008f0:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_TIM2_Init+0xe8>)
 80008f2:	f002 fa8f 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008fc:	f000 f9a4 	bl	8000c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000900:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_TIM2_Init+0xe8>)
 8000902:	f002 f8ce 	bl	8002aa2 <HAL_TIM_PWM_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800090c:	f000 f99c 	bl	8000c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4619      	mov	r1, r3
 800091e:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_TIM2_Init+0xe8>)
 8000920:	f002 fdd4 	bl	80034cc <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800092a:	f000 f98d 	bl	8000c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092e:	2360      	movs	r3, #96	; 0x60
 8000930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2208      	movs	r2, #8
 8000942:	4619      	mov	r1, r3
 8000944:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_TIM2_Init+0xe8>)
 8000946:	f002 f9a7 	bl	8002c98 <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000950:	f000 f97a 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <MX_TIM2_Init+0xe8>)
 8000956:	f000 fa19 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 800095a:	bf00      	nop
 800095c:	3738      	adds	r7, #56	; 0x38
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000234 	.word	0x20000234

08000968 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	; 0x38
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	615a      	str	r2, [r3, #20]
 8000996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <MX_TIM3_Init+0xe4>)
 800099a:	4a2d      	ldr	r2, [pc, #180]	; (8000a50 <MX_TIM3_Init+0xe8>)
 800099c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <MX_TIM3_Init+0xe4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_TIM3_Init+0xe4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <MX_TIM3_Init+0xe4>)
 80009ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_TIM3_Init+0xe4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_TIM3_Init+0xe4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009be:	4823      	ldr	r0, [pc, #140]	; (8000a4c <MX_TIM3_Init+0xe4>)
 80009c0:	f002 f820 	bl	8002a04 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009ca:	f000 f93d 	bl	8000c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d8:	4619      	mov	r1, r3
 80009da:	481c      	ldr	r0, [pc, #112]	; (8000a4c <MX_TIM3_Init+0xe4>)
 80009dc:	f002 fa1a 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009e6:	f000 f92f 	bl	8000c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <MX_TIM3_Init+0xe4>)
 80009ec:	f002 f859 	bl	8002aa2 <HAL_TIM_PWM_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009f6:	f000 f927 	bl	8000c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <MX_TIM3_Init+0xe4>)
 8000a0a:	f002 fd5f 	bl	80034cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a14:	f000 f918 	bl	8000c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a18:	2360      	movs	r3, #96	; 0x60
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM3_Init+0xe4>)
 8000a30:	f002 f932 	bl	8002c98 <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a3a:	f000 f905 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM3_Init+0xe4>)
 8000a40:	f000 f9a4 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 8000a44:	bf00      	nop
 8000a46:	3738      	adds	r7, #56	; 0x38
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000098 	.word	0x20000098
 8000a50:	40000400 	.word	0x40000400

08000a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_USART1_UART_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	f002 fd7c 	bl	8003588 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a96:	f000 f8d7 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	40013800 	.word	0x40013800

08000aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_USART2_UART_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	f002 fd52 	bl	8003588 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aea:	f000 f8ad 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000027c 	.word	0x2000027c
 8000af8:	40004400 	.word	0x40004400

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b10:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a47      	ldr	r2, [pc, #284]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b45      	ldr	r3, [pc, #276]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b28:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a41      	ldr	r2, [pc, #260]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b2e:	f043 0320 	orr.w	r3, r3, #32
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0320 	and.w	r3, r3, #32
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a3b      	ldr	r2, [pc, #236]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a35      	ldr	r2, [pc, #212]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b5e:	f043 0308 	orr.w	r3, r3, #8
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <MX_GPIO_Init+0x138>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0308 	and.w	r3, r3, #8
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_GND_Light_Sensor_Pin|Right_GND_Light_Sensor_Pin|Right_Engine_Directiob_Pin|Right_5V_Light_Sensor_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000b76:	4830      	ldr	r0, [pc, #192]	; (8000c38 <MX_GPIO_Init+0x13c>)
 8000b78:	f001 f97b 	bl	8001e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Bluetooth_Power_Supply_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f248 0120 	movw	r1, #32800	; 0x8020
 8000b82:	482e      	ldr	r0, [pc, #184]	; (8000c3c <MX_GPIO_Init+0x140>)
 8000b84:	f001 f975 	bl	8001e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Left_5V_Light_Sensor_Pin|Left_Engine_Direction_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2161      	movs	r1, #97	; 0x61
 8000b8c:	482c      	ldr	r0, [pc, #176]	; (8000c40 <MX_GPIO_Init+0x144>)
 8000b8e:	f001 f970 	bl	8001e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <MX_GPIO_Init+0x148>)
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4824      	ldr	r0, [pc, #144]	; (8000c38 <MX_GPIO_Init+0x13c>)
 8000ba8:	f000 fff2 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_GND_Light_Sensor_Pin Right_GND_Light_Sensor_Pin Right_Engine_Directiob_Pin Right_5V_Light_Sensor_Pin */
  GPIO_InitStruct.Pin = Left_GND_Light_Sensor_Pin|Right_GND_Light_Sensor_Pin|Right_Engine_Directiob_Pin|Right_5V_Light_Sensor_Pin;
 8000bac:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481c      	ldr	r0, [pc, #112]	; (8000c38 <MX_GPIO_Init+0x13c>)
 8000bc6:	f000 ffe3 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Contact_Sensor_Pin Left_Contact_Sensor_Pin */
  GPIO_InitStruct.Pin = Right_Contact_Sensor_Pin|Left_Contact_Sensor_Pin;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <MX_GPIO_Init+0x140>)
 8000bde:	f000 ffd7 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Bluetooth_Power_Supply_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Bluetooth_Power_Supply_Pin;
 8000be2:	f248 0320 	movw	r3, #32800	; 0x8020
 8000be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <MX_GPIO_Init+0x140>)
 8000bfc:	f000 ffc8 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_5V_Light_Sensor_Pin Left_Engine_Direction_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = Left_5V_Light_Sensor_Pin|Left_Engine_Direction_Pin|Buzzer_Pin;
 8000c00:	2361      	movs	r3, #97	; 0x61
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	480a      	ldr	r0, [pc, #40]	; (8000c40 <MX_GPIO_Init+0x144>)
 8000c18:	f000 ffba 	bl	8001b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2028      	movs	r0, #40	; 0x28
 8000c22:	f000 ff7e 	bl	8001b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c26:	2028      	movs	r0, #40	; 0x28
 8000c28:	f000 ff97 	bl	8001b5a <HAL_NVIC_EnableIRQ>

}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40010800 	.word	0x40010800
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	10110000 	.word	0x10110000

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <Error_Handler+0x6>

08000c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_MspInit+0x5c>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <HAL_MspInit+0x5c>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_MspInit+0x5c>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_MspInit+0x5c>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_MspInit+0x5c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_MspInit+0x5c>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_MspInit+0x60>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_MspInit+0x60>)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <HAL_ADC_MspInit+0x6c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d121      	bne.n	8000d18 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_ADC_MspInit+0x70>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <HAL_ADC_MspInit+0x70>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_ADC_MspInit+0x70>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_ADC_MspInit+0x70>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <HAL_ADC_MspInit+0x70>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_ADC_MspInit+0x70>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Left_ADC_Light_Sensor_Pin|Right_ADC_Light_Sensor_Pin;
 8000d04:	2321      	movs	r3, #33	; 0x21
 8000d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_ADC_MspInit+0x74>)
 8000d14:	f000 ff3c 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40012400 	.word	0x40012400
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40011000 	.word	0x40011000

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d3c:	d10c      	bne.n	8000d58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_TIM_Base_MspInit+0x58>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_TIM_Base_MspInit+0x58>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_TIM_Base_MspInit+0x58>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d56:	e010      	b.n	8000d7a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_TIM_Base_MspInit+0x5c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10b      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_TIM_Base_MspInit+0x58>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_TIM_Base_MspInit+0x58>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_TIM_Base_MspInit+0x58>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40000400 	.word	0x40000400

08000d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000daa:	d12b      	bne.n	8000e04 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <HAL_TIM_MspPostInit+0xe0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a2e      	ldr	r2, [pc, #184]	; (8000e6c <HAL_TIM_MspPostInit+0xe0>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <HAL_TIM_MspPostInit+0xe0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4825      	ldr	r0, [pc, #148]	; (8000e70 <HAL_TIM_MspPostInit+0xe4>)
 8000dda:	f000 fed9 	bl	8001b90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <HAL_TIM_MspPostInit+0xe8>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	623b      	str	r3, [r7, #32]
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <HAL_TIM_MspPostInit+0xe8>)
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e02:	e02e      	b.n	8000e62 <HAL_TIM_MspPostInit+0xd6>
  else if(htim->Instance==TIM3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <HAL_TIM_MspPostInit+0xec>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d129      	bne.n	8000e62 <HAL_TIM_MspPostInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_TIM_MspPostInit+0xe0>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <HAL_TIM_MspPostInit+0xe0>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_TIM_MspPostInit+0xe0>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e26:	2310      	movs	r3, #16
 8000e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4619      	mov	r1, r3
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <HAL_TIM_MspPostInit+0xe4>)
 8000e3a:	f000 fea9 	bl	8001b90 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_TIM_MspPostInit+0xe8>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <HAL_TIM_MspPostInit+0xe8>)
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	6053      	str	r3, [r2, #4]
}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40000400 	.word	0x40000400

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a31      	ldr	r2, [pc, #196]	; (8000f5c <HAL_UART_MspInit+0xe0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d132      	bne.n	8000f02 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e9c:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Bluetooth_Pin;
 8000ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_Bluetooth_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0318 	add.w	r3, r7, #24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4820      	ldr	r0, [pc, #128]	; (8000f64 <HAL_UART_MspInit+0xe8>)
 8000ee2:	f000 fe55 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Bluetooth_Pin;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART1_RX_Bluetooth_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481a      	ldr	r0, [pc, #104]	; (8000f64 <HAL_UART_MspInit+0xe8>)
 8000efc:	f000 fe48 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f00:	e028      	b.n	8000f54 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0xec>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d123      	bne.n	8000f54 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f16:	61d3      	str	r3, [r2, #28]
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_UART_MspInit+0xe4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2302      	movs	r3, #2
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0xe8>)
 8000f50:	f000 fe1e 	bl	8001b90 <HAL_GPIO_Init>
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010800 	.word	0x40010800
 8000f68:	40004400 	.word	0x40004400

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f8b3 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fbe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fc2:	f000 ff6f 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	; (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f002 fc7c 	bl	80038f8 <__errno>
 8001000:	4602      	mov	r2, r0
 8001002:	230c      	movs	r3, #12
 8001004:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20005000 	.word	0x20005000
 800102c:	00000400 	.word	0x00000400
 8001030:	2000008c 	.word	0x2000008c
 8001034:	200002c8 	.word	0x200002c8

08001038 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001044:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001046:	e003      	b.n	8001050 <LoopCopyDataInit>

08001048 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800104a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800104c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800104e:	3104      	adds	r1, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001054:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001056:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001058:	d3f6      	bcc.n	8001048 <CopyDataInit>
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800105c:	e002      	b.n	8001064 <LoopFillZerobss>

0800105e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001060:	f842 3b04 	str.w	r3, [r2], #4

08001064 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001066:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001068:	d3f9      	bcc.n	800105e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800106a:	f7ff ffe5 	bl	8001038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f002 fc49 	bl	8003904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001072:	f7ff fb01 	bl	8000678 <main>
  bx lr
 8001076:	4770      	bx	lr
  ldr r3, =_sidata
 8001078:	08004278 	.word	0x08004278
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001080:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001084:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001088:	200002c4 	.word	0x200002c4

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x28>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x28>)
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 fd33 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fdd0 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fd4b 	bl	8001b76 <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 fd13 	bl	8001b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x1c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_IncTick+0x20>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	20000008 	.word	0x20000008
 800113c:	200002bc 	.word	0x200002bc

08001140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	200002bc 	.word	0x200002bc

08001154 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0be      	b.n	80012f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	2b00      	cmp	r3, #0
 8001182:	d109      	bne.n	8001198 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fd8e 	bl	8000cb4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 fbb1 	bl	8001900 <ADC_ConversionStop_Disable>
 800119e:	4603      	mov	r3, r0
 80011a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 8099 	bne.w	80012e2 <HAL_ADC_Init+0x18e>
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 8095 	bne.w	80012e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011c0:	f023 0302 	bic.w	r3, r3, #2
 80011c4:	f043 0202 	orr.w	r2, r3, #2
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7b1b      	ldrb	r3, [r3, #12]
 80011da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ec:	d003      	beq.n	80011f6 <HAL_ADC_Init+0xa2>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d102      	bne.n	80011fc <HAL_ADC_Init+0xa8>
 80011f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fa:	e000      	b.n	80011fe <HAL_ADC_Init+0xaa>
 80011fc:	2300      	movs	r3, #0
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7d1b      	ldrb	r3, [r3, #20]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d119      	bne.n	8001240 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7b1b      	ldrb	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	3b01      	subs	r3, #1
 800121a:	035a      	lsls	r2, r3, #13
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	e00b      	b.n	8001240 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f043 0220 	orr.w	r2, r3, #32
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	430a      	orrs	r2, r1
 8001252:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_ADC_Init+0x1a8>)
 800125c:	4013      	ands	r3, r2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	430b      	orrs	r3, r1
 8001266:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001270:	d003      	beq.n	800127a <HAL_ADC_Init+0x126>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d104      	bne.n	8001284 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	3b01      	subs	r3, #1
 8001280:	051b      	lsls	r3, r3, #20
 8001282:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	430a      	orrs	r2, r1
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_ADC_Init+0x1ac>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d10b      	bne.n	80012c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	f023 0303 	bic.w	r3, r3, #3
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012be:	e018      	b.n	80012f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	f023 0312 	bic.w	r3, r3, #18
 80012c8:	f043 0210 	orr.w	r2, r3, #16
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012e0:	e007      	b.n	80012f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	f043 0210 	orr.w	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001300:	ff1f0efe 	.word	0xff1f0efe

08001304 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ADC_Start+0x1a>
 800131a:	2302      	movs	r3, #2
 800131c:	e098      	b.n	8001450 <HAL_ADC_Start+0x14c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fa98 	bl	800185c <ADC_Enable>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 8087 	bne.w	8001446 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a41      	ldr	r2, [pc, #260]	; (8001458 <HAL_ADC_Start+0x154>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d105      	bne.n	8001362 <HAL_ADC_Start+0x5e>
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_ADC_Start+0x158>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d115      	bne.n	800138e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	2b00      	cmp	r3, #0
 800137a:	d026      	beq.n	80013ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001384:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800138c:	e01d      	b.n	80013ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a2f      	ldr	r2, [pc, #188]	; (800145c <HAL_ADC_Start+0x158>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d004      	beq.n	80013ae <HAL_ADC_Start+0xaa>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <HAL_ADC_Start+0x154>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10d      	bne.n	80013ca <HAL_ADC_Start+0xc6>
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_ADC_Start+0x158>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f023 0206 	bic.w	r2, r3, #6
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e2:	e002      	b.n	80013ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f06f 0202 	mvn.w	r2, #2
 80013fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001406:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800140a:	d113      	bne.n	8001434 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_ADC_Start+0x154>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d105      	bne.n	8001422 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_ADC_Start+0x158>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800141e:	2b00      	cmp	r3, #0
 8001420:	d108      	bne.n	8001434 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	e00c      	b.n	800144e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	e003      	b.n	800144e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40012800 	.word	0x40012800
 800145c:	40012400 	.word	0x40012400

08001460 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001476:	f7ff fe63 	bl	8001140 <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	f043 0220 	orr.w	r2, r3, #32
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0c8      	b.n	8001634 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d12a      	bne.n	8001506 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d123      	bne.n	8001506 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014be:	e01a      	b.n	80014f6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c6:	d016      	beq.n	80014f6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_ADC_PollForConversion+0x7e>
 80014ce:	f7ff fe37 	bl	8001140 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d20b      	bcs.n	80014f6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f043 0204 	orr.w	r2, r3, #4
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e09e      	b.n	8001634 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0dd      	beq.n	80014c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001504:	e06c      	b.n	80015e0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001506:	4b4d      	ldr	r3, [pc, #308]	; (800163c <HAL_ADC_PollForConversion+0x1dc>)
 8001508:	681c      	ldr	r4, [r3, #0]
 800150a:	2002      	movs	r0, #2
 800150c:	f001 f9be 	bl	800288c <HAL_RCCEx_GetPeriphCLKFreq>
 8001510:	4603      	mov	r3, r0
 8001512:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6919      	ldr	r1, [r3, #16]
 800151c:	4b48      	ldr	r3, [pc, #288]	; (8001640 <HAL_ADC_PollForConversion+0x1e0>)
 800151e:	400b      	ands	r3, r1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d118      	bne.n	8001556 <HAL_ADC_PollForConversion+0xf6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68d9      	ldr	r1, [r3, #12]
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_ADC_PollForConversion+0x1e4>)
 800152c:	400b      	ands	r3, r1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d111      	bne.n	8001556 <HAL_ADC_PollForConversion+0xf6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6919      	ldr	r1, [r3, #16]
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_ADC_PollForConversion+0x1e8>)
 800153a:	400b      	ands	r3, r1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d108      	bne.n	8001552 <HAL_ADC_PollForConversion+0xf2>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68d9      	ldr	r1, [r3, #12]
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <HAL_ADC_PollForConversion+0x1ec>)
 8001548:	400b      	ands	r3, r1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_PollForConversion+0xf2>
 800154e:	2314      	movs	r3, #20
 8001550:	e020      	b.n	8001594 <HAL_ADC_PollForConversion+0x134>
 8001552:	2329      	movs	r3, #41	; 0x29
 8001554:	e01e      	b.n	8001594 <HAL_ADC_PollForConversion+0x134>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_ADC_PollForConversion+0x1e8>)
 800155e:	400b      	ands	r3, r1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d106      	bne.n	8001572 <HAL_ADC_PollForConversion+0x112>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68d9      	ldr	r1, [r3, #12]
 800156a:	4b38      	ldr	r3, [pc, #224]	; (800164c <HAL_ADC_PollForConversion+0x1ec>)
 800156c:	400b      	ands	r3, r1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00d      	beq.n	800158e <HAL_ADC_PollForConversion+0x12e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6919      	ldr	r1, [r3, #16]
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_ADC_PollForConversion+0x1f0>)
 800157a:	400b      	ands	r3, r1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d108      	bne.n	8001592 <HAL_ADC_PollForConversion+0x132>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68d9      	ldr	r1, [r3, #12]
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_ADC_PollForConversion+0x1f0>)
 8001588:	400b      	ands	r3, r1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_ADC_PollForConversion+0x132>
 800158e:	2354      	movs	r3, #84	; 0x54
 8001590:	e000      	b.n	8001594 <HAL_ADC_PollForConversion+0x134>
 8001592:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800159a:	e01d      	b.n	80015d8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a2:	d016      	beq.n	80015d2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_PollForConversion+0x15a>
 80015aa:	f7ff fdc9 	bl	8001140 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d20b      	bcs.n	80015d2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	f043 0204 	orr.w	r2, r3, #4
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e030      	b.n	8001634 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3301      	adds	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8dd      	bhi.n	800159c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f06f 0212 	mvn.w	r2, #18
 80015e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001600:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001604:	d115      	bne.n	8001632 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800160a:	2b00      	cmp	r3, #0
 800160c:	d111      	bne.n	8001632 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d105      	bne.n	8001632 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	24924924 	.word	0x24924924
 8001644:	00924924 	.word	0x00924924
 8001648:	12492492 	.word	0x12492492
 800164c:	00492492 	.word	0x00492492
 8001650:	00249249 	.word	0x00249249

08001654 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_ADC_ConfigChannel+0x20>
 8001688:	2302      	movs	r3, #2
 800168a:	e0dc      	b.n	8001846 <HAL_ADC_ConfigChannel+0x1da>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b06      	cmp	r3, #6
 800169a:	d81c      	bhi.n	80016d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b05      	subs	r3, #5
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4019      	ands	r1, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b05      	subs	r3, #5
 80016c8:	fa00 f203 	lsl.w	r2, r0, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
 80016d4:	e03c      	b.n	8001750 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d81c      	bhi.n	8001718 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	3b23      	subs	r3, #35	; 0x23
 80016f0:	221f      	movs	r2, #31
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	4019      	ands	r1, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3b23      	subs	r3, #35	; 0x23
 800170a:	fa00 f203 	lsl.w	r2, r0, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
 8001716:	e01b      	b.n	8001750 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b41      	subs	r3, #65	; 0x41
 800172a:	221f      	movs	r2, #31
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	4019      	ands	r1, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	3b41      	subs	r3, #65	; 0x41
 8001744:	fa00 f203 	lsl.w	r2, r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b09      	cmp	r3, #9
 8001756:	d91c      	bls.n	8001792 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68d9      	ldr	r1, [r3, #12]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	3b1e      	subs	r3, #30
 800176a:	2207      	movs	r2, #7
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	4019      	ands	r1, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6898      	ldr	r0, [r3, #8]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	3b1e      	subs	r3, #30
 8001784:	fa00 f203 	lsl.w	r2, r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	e019      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6919      	ldr	r1, [r3, #16]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	2207      	movs	r2, #7
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4019      	ands	r1, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6898      	ldr	r0, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	fa00 f203 	lsl.w	r2, r0, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d003      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017d2:	2b11      	cmp	r3, #17
 80017d4:	d132      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_ADC_ConfigChannel+0x1e4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d125      	bne.n	800182c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d126      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017fc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b10      	cmp	r3, #16
 8001804:	d11a      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_ADC_ConfigChannel+0x1e8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <HAL_ADC_ConfigChannel+0x1ec>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	0c9a      	lsrs	r2, r3, #18
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800181c:	e002      	b.n	8001824 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3b01      	subs	r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f9      	bne.n	800181e <HAL_ADC_ConfigChannel+0x1b2>
 800182a:	e007      	b.n	800183c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f043 0220 	orr.w	r2, r3, #32
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40012400 	.word	0x40012400
 8001854:	20000000 	.word	0x20000000
 8001858:	431bde83 	.word	0x431bde83

0800185c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b01      	cmp	r3, #1
 8001878:	d039      	beq.n	80018ee <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <ADC_Enable+0x9c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <ADC_Enable+0xa0>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	0c9b      	lsrs	r3, r3, #18
 8001896:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001898:	e002      	b.n	80018a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3b01      	subs	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f9      	bne.n	800189a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018a6:	f7ff fc4b 	bl	8001140 <HAL_GetTick>
 80018aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018ac:	e018      	b.n	80018e0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018ae:	f7ff fc47 	bl	8001140 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d911      	bls.n	80018e0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f043 0210 	orr.w	r2, r3, #16
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e007      	b.n	80018f0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d1df      	bne.n	80018ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	431bde83 	.word	0x431bde83

08001900 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b01      	cmp	r3, #1
 8001918:	d127      	bne.n	800196a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800192a:	f7ff fc09 	bl	8001140 <HAL_GetTick>
 800192e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001930:	e014      	b.n	800195c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001932:	f7ff fc05 	bl	8001140 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d90d      	bls.n	800195c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e007      	b.n	800196c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d0e3      	beq.n	8001932 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <__NVIC_EnableIRQ+0x34>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f7ff ff90 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff2d 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff42 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff90 	bl	8001a64 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5f 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff35 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa2 	bl	8001ac8 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e127      	b.n	8001df4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f040 8116 	bne.w	8001dee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d034      	beq.n	8001c34 <HAL_GPIO_Init+0xa4>
 8001bca:	2b12      	cmp	r3, #18
 8001bcc:	d80d      	bhi.n	8001bea <HAL_GPIO_Init+0x5a>
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d02b      	beq.n	8001c2a <HAL_GPIO_Init+0x9a>
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d804      	bhi.n	8001be0 <HAL_GPIO_Init+0x50>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d031      	beq.n	8001c3e <HAL_GPIO_Init+0xae>
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d01c      	beq.n	8001c18 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bde:	e048      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d043      	beq.n	8001c6c <HAL_GPIO_Init+0xdc>
 8001be4:	2b11      	cmp	r3, #17
 8001be6:	d01b      	beq.n	8001c20 <HAL_GPIO_Init+0x90>
          break;
 8001be8:	e043      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bea:	4a89      	ldr	r2, [pc, #548]	; (8001e10 <HAL_GPIO_Init+0x280>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d026      	beq.n	8001c3e <HAL_GPIO_Init+0xae>
 8001bf0:	4a87      	ldr	r2, [pc, #540]	; (8001e10 <HAL_GPIO_Init+0x280>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d806      	bhi.n	8001c04 <HAL_GPIO_Init+0x74>
 8001bf6:	4a87      	ldr	r2, [pc, #540]	; (8001e14 <HAL_GPIO_Init+0x284>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d020      	beq.n	8001c3e <HAL_GPIO_Init+0xae>
 8001bfc:	4a86      	ldr	r2, [pc, #536]	; (8001e18 <HAL_GPIO_Init+0x288>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01d      	beq.n	8001c3e <HAL_GPIO_Init+0xae>
          break;
 8001c02:	e036      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c04:	4a85      	ldr	r2, [pc, #532]	; (8001e1c <HAL_GPIO_Init+0x28c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0xae>
 8001c0a:	4a85      	ldr	r2, [pc, #532]	; (8001e20 <HAL_GPIO_Init+0x290>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d016      	beq.n	8001c3e <HAL_GPIO_Init+0xae>
 8001c10:	4a84      	ldr	r2, [pc, #528]	; (8001e24 <HAL_GPIO_Init+0x294>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0xae>
          break;
 8001c16:	e02c      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	623b      	str	r3, [r7, #32]
          break;
 8001c1e:	e028      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	3304      	adds	r3, #4
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e023      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	3308      	adds	r3, #8
 8001c30:	623b      	str	r3, [r7, #32]
          break;
 8001c32:	e01e      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	623b      	str	r3, [r7, #32]
          break;
 8001c3c:	e019      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c46:	2304      	movs	r3, #4
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e012      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c54:	2308      	movs	r3, #8
 8001c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	611a      	str	r2, [r3, #16]
          break;
 8001c5e:	e008      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c60:	2308      	movs	r3, #8
 8001c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	615a      	str	r2, [r3, #20]
          break;
 8001c6a:	e002      	b.n	8001c72 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2bff      	cmp	r3, #255	; 0xff
 8001c76:	d801      	bhi.n	8001c7c <HAL_GPIO_Init+0xec>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	e001      	b.n	8001c80 <HAL_GPIO_Init+0xf0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2bff      	cmp	r3, #255	; 0xff
 8001c86:	d802      	bhi.n	8001c8e <HAL_GPIO_Init+0xfe>
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x104>
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	3b08      	subs	r3, #8
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	6a39      	ldr	r1, [r7, #32]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8096 	beq.w	8001dee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc2:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_GPIO_Init+0x298>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_GPIO_Init+0x298>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6193      	str	r3, [r2, #24]
 8001cce:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <HAL_GPIO_Init+0x298>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cda:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <HAL_GPIO_Init+0x29c>)
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_GPIO_Init+0x2a0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d013      	beq.n	8001d2e <HAL_GPIO_Init+0x19e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_GPIO_Init+0x2a4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00d      	beq.n	8001d2a <HAL_GPIO_Init+0x19a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a49      	ldr	r2, [pc, #292]	; (8001e38 <HAL_GPIO_Init+0x2a8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <HAL_GPIO_Init+0x196>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a48      	ldr	r2, [pc, #288]	; (8001e3c <HAL_GPIO_Init+0x2ac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_GPIO_Init+0x192>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x1a0>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x1a0>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x1a0>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x1a0>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d40:	493a      	ldr	r1, [pc, #232]	; (8001e2c <HAL_GPIO_Init+0x29c>)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4938      	ldr	r1, [pc, #224]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4933      	ldr	r1, [pc, #204]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	492e      	ldr	r1, [pc, #184]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
 8001d8e:	e006      	b.n	8001d9e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	4929      	ldr	r1, [pc, #164]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001daa:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	4924      	ldr	r1, [pc, #144]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
 8001db6:	e006      	b.n	8001dc6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	491f      	ldr	r1, [pc, #124]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	491a      	ldr	r1, [pc, #104]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60cb      	str	r3, [r1, #12]
 8001dde:	e006      	b.n	8001dee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4915      	ldr	r1, [pc, #84]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	3301      	adds	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f47f aed0 	bne.w	8001ba4 <HAL_GPIO_Init+0x14>
  }
}
 8001e04:	bf00      	nop
 8001e06:	372c      	adds	r7, #44	; 0x2c
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	10210000 	.word	0x10210000
 8001e14:	10110000 	.word	0x10110000
 8001e18:	10120000 	.word	0x10120000
 8001e1c:	10310000 	.word	0x10310000
 8001e20:	10320000 	.word	0x10320000
 8001e24:	10220000 	.word	0x10220000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40010800 	.word	0x40010800
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	40011400 	.word	0x40011400
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e82:	787b      	ldrb	r3, [r7, #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e8e:	e003      	b.n	8001e98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	611a      	str	r2, [r3, #16]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f806 	bl	8001ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e26c      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8087 	beq.w	8002016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f08:	4b92      	ldr	r3, [pc, #584]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d00c      	beq.n	8001f2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f14:	4b8f      	ldr	r3, [pc, #572]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d112      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5e>
 8001f20:	4b8c      	ldr	r3, [pc, #560]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2c:	d10b      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2e:	4b89      	ldr	r3, [pc, #548]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d06c      	beq.n	8002014 <HAL_RCC_OscConfig+0x12c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d168      	bne.n	8002014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e246      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x76>
 8001f50:	4b80      	ldr	r3, [pc, #512]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a7f      	ldr	r2, [pc, #508]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	e02e      	b.n	8001fbc <HAL_RCC_OscConfig+0xd4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x98>
 8001f66:	4b7b      	ldr	r3, [pc, #492]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7a      	ldr	r2, [pc, #488]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b78      	ldr	r3, [pc, #480]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a77      	ldr	r2, [pc, #476]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e01d      	b.n	8001fbc <HAL_RCC_OscConfig+0xd4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xbc>
 8001f8a:	4b72      	ldr	r3, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a71      	ldr	r2, [pc, #452]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b6f      	ldr	r3, [pc, #444]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6e      	ldr	r2, [pc, #440]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0xd4>
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6a      	ldr	r2, [pc, #424]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a67      	ldr	r2, [pc, #412]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8bc 	bl	8001140 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff f8b8 	bl	8001140 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1fa      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0xe4>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff f8a8 	bl	8001140 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff f8a4 	bl	8001140 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1e6      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x10c>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d063      	beq.n	80020ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002022:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800202e:	4b49      	ldr	r3, [pc, #292]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b08      	cmp	r3, #8
 8002038:	d11c      	bne.n	8002074 <HAL_RCC_OscConfig+0x18c>
 800203a:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d116      	bne.n	8002074 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x176>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e1ba      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4939      	ldr	r1, [pc, #228]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	e03a      	b.n	80020ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff f85d 	bl	8001140 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff f859 	bl	8001140 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e19b      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4927      	ldr	r1, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
 80020bc:	e015      	b.n	80020ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff f83c 	bl	8001140 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff f838 	bl	8001140 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e17a      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03a      	beq.n	800216c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d019      	beq.n	8002132 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_RCC_OscConfig+0x274>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7ff f81c 	bl	8001140 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff f818 	bl	8001140 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e15a      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800212a:	2001      	movs	r0, #1
 800212c:	f000 fada 	bl	80026e4 <RCC_Delay>
 8002130:	e01c      	b.n	800216c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_RCC_OscConfig+0x274>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002138:	f7ff f802 	bl	8001140 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213e:	e00f      	b.n	8002160 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002140:	f7fe fffe 	bl	8001140 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d908      	bls.n	8002160 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e140      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	42420000 	.word	0x42420000
 800215c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	4b9e      	ldr	r3, [pc, #632]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e9      	bne.n	8002140 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80a6 	beq.w	80022c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b97      	ldr	r3, [pc, #604]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b94      	ldr	r3, [pc, #592]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a93      	ldr	r2, [pc, #588]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b91      	ldr	r3, [pc, #580]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	4b8e      	ldr	r3, [pc, #568]	; (80023e0 <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b2:	4b8b      	ldr	r3, [pc, #556]	; (80023e0 <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a8a      	ldr	r2, [pc, #552]	; (80023e0 <HAL_RCC_OscConfig+0x4f8>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7fe ffbf 	bl	8001140 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7fe ffbb 	bl	8001140 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0fd      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b81      	ldr	r3, [pc, #516]	; (80023e0 <HAL_RCC_OscConfig+0x4f8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x312>
 80021ec:	4b7b      	ldr	r3, [pc, #492]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a7a      	ldr	r2, [pc, #488]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	e02d      	b.n	8002256 <HAL_RCC_OscConfig+0x36e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x334>
 8002202:	4b76      	ldr	r3, [pc, #472]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a75      	ldr	r2, [pc, #468]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a72      	ldr	r2, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	e01c      	b.n	8002256 <HAL_RCC_OscConfig+0x36e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d10c      	bne.n	800223e <HAL_RCC_OscConfig+0x356>
 8002224:	4b6d      	ldr	r3, [pc, #436]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a6c      	ldr	r2, [pc, #432]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a69      	ldr	r2, [pc, #420]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e00b      	b.n	8002256 <HAL_RCC_OscConfig+0x36e>
 800223e:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a66      	ldr	r2, [pc, #408]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	4b64      	ldr	r3, [pc, #400]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a63      	ldr	r2, [pc, #396]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d015      	beq.n	800228a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe ff6f 	bl	8001140 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe ff6b 	bl	8001140 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0ab      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	4b57      	ldr	r3, [pc, #348]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ee      	beq.n	8002266 <HAL_RCC_OscConfig+0x37e>
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7fe ff59 	bl	8001140 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe ff55 	bl	8001140 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e095      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a8:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ee      	bne.n	8002292 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b48      	ldr	r3, [pc, #288]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a47      	ldr	r2, [pc, #284]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8081 	beq.w	80023d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d0:	4b42      	ldr	r3, [pc, #264]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d061      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d146      	bne.n	8002372 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_RCC_OscConfig+0x4fc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe ff29 	bl	8001140 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe ff25 	bl	8001140 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e067      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	4b35      	ldr	r3, [pc, #212]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d108      	bne.n	800232c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	492d      	ldr	r1, [pc, #180]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a19      	ldr	r1, [r3, #32]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	430b      	orrs	r3, r1
 800233e:	4927      	ldr	r1, [pc, #156]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_OscConfig+0x4fc>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe fef9 	bl	8001140 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe fef5 	bl	8001140 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e037      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x46a>
 8002370:	e02f      	b.n	80023d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_RCC_OscConfig+0x4fc>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fee2 	bl	8001140 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe fede 	bl	8001140 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e020      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x498>
 800239e:	e018      	b.n	80023d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e013      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40007000 	.word	0x40007000
 80023e4:	42420060 	.word	0x42420060

080023e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0d0      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 0207 	bic.w	r2, r3, #7
 8002412:	4965      	ldr	r1, [pc, #404]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800244e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002466:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d040      	beq.n	8002508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e073      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06b      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b39      	ldr	r3, [pc, #228]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4936      	ldr	r1, [pc, #216]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fe32 	bl	8001140 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fe2e 	bl	8001140 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e053      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d210      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0207 	bic.w	r2, r3, #7
 800251e:	4922      	ldr	r1, [pc, #136]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4601      	mov	r1, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	fa21 f303 	lsr.w	r3, r1, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd90 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08004224 	.word	0x08004224
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b490      	push	{r4, r7}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025c4:	1d3c      	adds	r4, r7, #4
 80025c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025cc:	4b28      	ldr	r3, [pc, #160]	; (8002670 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x40>
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x46>
 80025fa:	e02d      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025fe:	623b      	str	r3, [r7, #32]
      break;
 8002600:	e02d      	b.n	800265e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800260e:	4413      	add	r3, r2
 8002610:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002614:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c5b      	lsrs	r3, r3, #17
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800262e:	4413      	add	r3, r2
 8002630:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002634:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800263a:	fb02 f203 	mul.w	r2, r2, r3
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e004      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_RCC_GetSysClockFreq+0xc0>)
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	623b      	str	r3, [r7, #32]
      break;
 8002656:	e002      	b.n	800265e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800265a:	623b      	str	r3, [r7, #32]
      break;
 800265c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265e:	6a3b      	ldr	r3, [r7, #32]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3728      	adds	r7, #40	; 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bc90      	pop	{r4, r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	080041fc 	.word	0x080041fc
 8002670:	0800420c 	.word	0x0800420c
 8002674:	40021000 	.word	0x40021000
 8002678:	007a1200 	.word	0x007a1200
 800267c:	003d0900 	.word	0x003d0900

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <HAL_RCC_GetHCLKFreq+0x10>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000000 	.word	0x20000000

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002698:	f7ff fff2 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 800269c:	4601      	mov	r1, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4a03      	ldr	r2, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08004234 	.word	0x08004234

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c0:	f7ff ffde 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c4:	4601      	mov	r1, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0adb      	lsrs	r3, r3, #11
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08004234 	.word	0x08004234

080026e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCC_Delay+0x34>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <RCC_Delay+0x38>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002700:	bf00      	nop
  }
  while (Delay --);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <RCC_Delay+0x1c>
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d07d      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002740:	4b4f      	ldr	r3, [pc, #316]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274c:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	4a4b      	ldr	r2, [pc, #300]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002756:	61d3      	str	r3, [r2, #28]
 8002758:	4b49      	ldr	r3, [pc, #292]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002764:	2301      	movs	r3, #1
 8002766:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d118      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002774:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a42      	ldr	r2, [pc, #264]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002780:	f7fe fcde 	bl	8001140 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002786:	e008      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fcda 	bl	8001140 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e06d      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027a6:	4b36      	ldr	r3, [pc, #216]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d02e      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d027      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ce:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027da:	4a29      	ldr	r2, [pc, #164]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d014      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7fe fca9 	bl	8001140 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fca5 	bl	8001140 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e036      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ee      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4917      	ldr	r1, [pc, #92]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	4313      	orrs	r3, r2
 8002824:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002836:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	490b      	ldr	r1, [pc, #44]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	42420440 	.word	0x42420440

0800288c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b08d      	sub	sp, #52	; 0x34
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002894:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002896:	f107 040c 	add.w	r4, r7, #12
 800289a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028a0:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	2300      	movs	r3, #0
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d07f      	beq.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80028c0:	2b10      	cmp	r3, #16
 80028c2:	d002      	beq.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d048      	beq.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028c8:	e08b      	b.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80028ca:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028d0:	4b48      	ldr	r3, [pc, #288]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d07f      	beq.n	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	0c9b      	lsrs	r3, r3, #18
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028e8:	4413      	add	r3, r2
 80028ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ee:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d018      	beq.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028fa:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0c5b      	lsrs	r3, r3, #17
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002908:	4413      	add	r3, r2
 800290a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800291a:	4a37      	ldr	r2, [pc, #220]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292a:	e004      	b.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	4a33      	ldr	r2, [pc, #204]	; (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002936:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002942:	d102      	bne.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002948:	e048      	b.n	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002958:	e040      	b.n	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d108      	bne.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
 800297c:	e01f      	b.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002988:	d109      	bne.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002996:	f649 4340 	movw	r3, #40000	; 0x9c40
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
 800299c:	e00f      	b.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a8:	d11a      	bne.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80029b6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029bc:	e010      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80029be:	e00f      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029c0:	f7ff fe7c 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0b9b      	lsrs	r3, r3, #14
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	3301      	adds	r3, #1
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80029dc:	bf00      	nop
 80029de:	e000      	b.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80029e0:	bf00      	nop
    }
  }
  return (frequency);
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3734      	adds	r7, #52	; 0x34
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}
 80029ec:	08004210 	.word	0x08004210
 80029f0:	08004220 	.word	0x08004220
 80029f4:	40021000 	.word	0x40021000
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	003d0900 	.word	0x003d0900
 8002a00:	aaaaaaab 	.word	0xaaaaaaab

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e041      	b.n	8002a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f97e 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 fa9e 	bl	8002f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e041      	b.n	8002b38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d106      	bne.n	8002ace <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f839 	bl	8002b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f000 fa4f 	bl	8002f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_TIM_PWM_Start+0x24>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e022      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d109      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x3e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e015      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d109      	bne.n	8002bac <HAL_TIM_PWM_Start+0x58>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e008      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e05e      	b.n	8002c84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x82>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd4:	e013      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x92>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be4:	e00b      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0xa2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	e003      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	6839      	ldr	r1, [r7, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fc3c 	bl	8003484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_TIM_PWM_Start+0x138>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_TIM_PWM_Start+0x138>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d009      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <HAL_TIM_PWM_Start+0x13c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <HAL_TIM_PWM_Start+0x140>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d010      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c70:	e007      	b.n	8002c82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0ac      	b.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	f200 809f 	bhi.w	8002e00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002cfd 	.word	0x08002cfd
 8002ccc:	08002e01 	.word	0x08002e01
 8002cd0:	08002e01 	.word	0x08002e01
 8002cd4:	08002e01 	.word	0x08002e01
 8002cd8:	08002d3d 	.word	0x08002d3d
 8002cdc:	08002e01 	.word	0x08002e01
 8002ce0:	08002e01 	.word	0x08002e01
 8002ce4:	08002e01 	.word	0x08002e01
 8002ce8:	08002d7f 	.word	0x08002d7f
 8002cec:	08002e01 	.word	0x08002e01
 8002cf0:	08002e01 	.word	0x08002e01
 8002cf4:	08002e01 	.word	0x08002e01
 8002cf8:	08002dbf 	.word	0x08002dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f9a0 	bl	8003048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	619a      	str	r2, [r3, #24]
      break;
 8002d3a:	e062      	b.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f9e6 	bl	8003114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	021a      	lsls	r2, r3, #8
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	619a      	str	r2, [r3, #24]
      break;
 8002d7c:	e041      	b.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fa2f 	bl	80031e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0208 	orr.w	r2, r2, #8
 8002d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0204 	bic.w	r2, r2, #4
 8002da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69d9      	ldr	r1, [r3, #28]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	61da      	str	r2, [r3, #28]
      break;
 8002dbc:	e021      	b.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fa79 	bl	80032bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	021a      	lsls	r2, r3, #8
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	61da      	str	r2, [r3, #28]
      break;
 8002dfe:	e000      	b.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_TIM_ConfigClockSource+0x18>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e0a6      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x166>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d067      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x120>
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d80b      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x6c>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d073      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x140>
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d802      	bhi.n	8002e76 <HAL_TIM_ConfigClockSource+0x62>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d06f      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e74:	e078      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d06c      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x140>
 8002e7a:	2b30      	cmp	r3, #48	; 0x30
 8002e7c:	d06a      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e7e:	e073      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e80:	2b70      	cmp	r3, #112	; 0x70
 8002e82:	d00d      	beq.n	8002ea0 <HAL_TIM_ConfigClockSource+0x8c>
 8002e84:	2b70      	cmp	r3, #112	; 0x70
 8002e86:	d804      	bhi.n	8002e92 <HAL_TIM_ConfigClockSource+0x7e>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d033      	beq.n	8002ef4 <HAL_TIM_ConfigClockSource+0xe0>
 8002e8c:	2b60      	cmp	r3, #96	; 0x60
 8002e8e:	d041      	beq.n	8002f14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e90:	e06a      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	d066      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x152>
 8002e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9c:	d017      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e9e:	e063      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6899      	ldr	r1, [r3, #8]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f000 fac9 	bl	8003446 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ec2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
      break;
 8002ecc:	e04c      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6899      	ldr	r1, [r3, #8]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f000 fab2 	bl	8003446 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ef0:	609a      	str	r2, [r3, #8]
      break;
 8002ef2:	e039      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f000 fa29 	bl	8003358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2150      	movs	r1, #80	; 0x50
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fa80 	bl	8003412 <TIM_ITRx_SetConfig>
      break;
 8002f12:	e029      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	461a      	mov	r2, r3
 8002f22:	f000 fa47 	bl	80033b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2160      	movs	r1, #96	; 0x60
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fa70 	bl	8003412 <TIM_ITRx_SetConfig>
      break;
 8002f32:	e019      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	461a      	mov	r2, r3
 8002f42:	f000 fa09 	bl	8003358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fa60 	bl	8003412 <TIM_ITRx_SetConfig>
      break;
 8002f52:	e009      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f000 fa57 	bl	8003412 <TIM_ITRx_SetConfig>
        break;
 8002f64:	e000      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <TIM_Base_SetConfig+0xb8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00b      	beq.n	8002fb4 <TIM_Base_SetConfig+0x30>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa2:	d007      	beq.n	8002fb4 <TIM_Base_SetConfig+0x30>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a26      	ldr	r2, [pc, #152]	; (8003040 <TIM_Base_SetConfig+0xbc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <TIM_Base_SetConfig+0x30>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a25      	ldr	r2, [pc, #148]	; (8003044 <TIM_Base_SetConfig+0xc0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d108      	bne.n	8002fc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <TIM_Base_SetConfig+0xb8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00b      	beq.n	8002fe6 <TIM_Base_SetConfig+0x62>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d007      	beq.n	8002fe6 <TIM_Base_SetConfig+0x62>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <TIM_Base_SetConfig+0xbc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_Base_SetConfig+0x62>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <TIM_Base_SetConfig+0xc0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d108      	bne.n	8002ff8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <TIM_Base_SetConfig+0xb8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	615a      	str	r2, [r3, #20]
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800

08003048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f023 0201 	bic.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 0302 	bic.w	r3, r3, #2
 8003090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <TIM_OC1_SetConfig+0xc8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10c      	bne.n	80030be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0308 	bic.w	r3, r3, #8
 80030aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <TIM_OC1_SetConfig+0xc8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d111      	bne.n	80030ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	621a      	str	r2, [r3, #32]
}
 8003104:	bf00      	nop
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40012c00 	.word	0x40012c00

08003114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0210 	bic.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0320 	bic.w	r3, r3, #32
 800315e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <TIM_OC2_SetConfig+0xd0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d10d      	bne.n	8003190 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800317a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <TIM_OC2_SetConfig+0xd0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d113      	bne.n	80031c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800319e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00

080031e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <TIM_OC3_SetConfig+0xd0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10d      	bne.n	8003262 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800324c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <TIM_OC3_SetConfig+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d113      	bne.n	8003292 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	621a      	str	r2, [r3, #32]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40012c00 	.word	0x40012c00

080032bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	031b      	lsls	r3, r3, #12
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <TIM_OC4_SetConfig+0x98>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d109      	bne.n	8003330 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	40012c00 	.word	0x40012c00

08003358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f023 0201 	bic.w	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f023 030a 	bic.w	r3, r3, #10
 8003394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f023 0210 	bic.w	r2, r3, #16
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	031b      	lsls	r3, r3, #12
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003428:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	f043 0307 	orr.w	r3, r3, #7
 8003434:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	609a      	str	r2, [r3, #8]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003446:	b480      	push	{r7}
 8003448:	b087      	sub	sp, #28
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003460:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	431a      	orrs	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4313      	orrs	r3, r2
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	609a      	str	r2, [r3, #8]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2201      	movs	r2, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1a      	ldr	r2, [r3, #32]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	401a      	ands	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1a      	ldr	r2, [r3, #32]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	621a      	str	r2, [r3, #32]
}
 80034c2:	bf00      	nop
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e046      	b.n	8003572 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a16      	ldr	r2, [pc, #88]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00e      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003530:	d009      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d004      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a10      	ldr	r2, [pc, #64]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10c      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800354c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	4313      	orrs	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800

08003588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e03f      	b.n	800361a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fc64 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f905 	bl	80037dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b08a      	sub	sp, #40	; 0x28
 8003626:	af02      	add	r7, sp, #8
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	d17c      	bne.n	800373c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_Transmit+0x2c>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e075      	b.n	800373e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_UART_Transmit+0x3e>
 800365c:	2302      	movs	r3, #2
 800365e:	e06e      	b.n	800373e <HAL_UART_Transmit+0x11c>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2221      	movs	r2, #33	; 0x21
 8003672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003676:	f7fd fd63 	bl	8001140 <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003690:	d108      	bne.n	80036a4 <HAL_UART_Transmit+0x82>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e003      	b.n	80036ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80036b4:	e02a      	b.n	800370c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f840 	bl	8003746 <UART_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e036      	b.n	800373e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3302      	adds	r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e007      	b.n	80036fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3301      	adds	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1cf      	bne.n	80036b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	2140      	movs	r1, #64	; 0x40
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f810 	bl	8003746 <UART_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e006      	b.n	800373e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003756:	e02c      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d028      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0x30>
 8003766:	f7fd fceb 	bl	8001140 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	429a      	cmp	r2, r3
 8003774:	d21d      	bcs.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003784:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e00f      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4013      	ands	r3, r2
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d0c3      	beq.n	8003758 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003816:	f023 030c 	bic.w	r3, r3, #12
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	430b      	orrs	r3, r1
 8003822:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <UART_SetConfig+0x114>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d103      	bne.n	800384c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7fe ff3a 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	e002      	b.n	8003852 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe ff22 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003850:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009a      	lsls	r2, r3, #2
 800385c:	441a      	add	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <UART_SetConfig+0x118>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	0119      	lsls	r1, r3, #4
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fbb2 f2f3 	udiv	r2, r2, r3
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <UART_SetConfig+0x118>)
 800388a:	fba3 0302 	umull	r0, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2064      	movs	r0, #100	; 0x64
 8003892:	fb00 f303 	mul.w	r3, r0, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <UART_SetConfig+0x118>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	4419      	add	r1, r3
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009a      	lsls	r2, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <UART_SetConfig+0x118>)
 80038c2:	fba3 0302 	umull	r0, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2064      	movs	r0, #100	; 0x64
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <UART_SetConfig+0x118>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	440a      	add	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40013800 	.word	0x40013800
 80038f4:	51eb851f 	.word	0x51eb851f

080038f8 <__errno>:
 80038f8:	4b01      	ldr	r3, [pc, #4]	; (8003900 <__errno+0x8>)
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	2000000c 	.word	0x2000000c

08003904 <__libc_init_array>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	2500      	movs	r5, #0
 8003908:	4e0c      	ldr	r6, [pc, #48]	; (800393c <__libc_init_array+0x38>)
 800390a:	4c0d      	ldr	r4, [pc, #52]	; (8003940 <__libc_init_array+0x3c>)
 800390c:	1ba4      	subs	r4, r4, r6
 800390e:	10a4      	asrs	r4, r4, #2
 8003910:	42a5      	cmp	r5, r4
 8003912:	d109      	bne.n	8003928 <__libc_init_array+0x24>
 8003914:	f000 fc34 	bl	8004180 <_init>
 8003918:	2500      	movs	r5, #0
 800391a:	4e0a      	ldr	r6, [pc, #40]	; (8003944 <__libc_init_array+0x40>)
 800391c:	4c0a      	ldr	r4, [pc, #40]	; (8003948 <__libc_init_array+0x44>)
 800391e:	1ba4      	subs	r4, r4, r6
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	42a5      	cmp	r5, r4
 8003924:	d105      	bne.n	8003932 <__libc_init_array+0x2e>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800392c:	4798      	blx	r3
 800392e:	3501      	adds	r5, #1
 8003930:	e7ee      	b.n	8003910 <__libc_init_array+0xc>
 8003932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003936:	4798      	blx	r3
 8003938:	3501      	adds	r5, #1
 800393a:	e7f2      	b.n	8003922 <__libc_init_array+0x1e>
 800393c:	08004270 	.word	0x08004270
 8003940:	08004270 	.word	0x08004270
 8003944:	08004270 	.word	0x08004270
 8003948:	08004274 	.word	0x08004274

0800394c <memset>:
 800394c:	4603      	mov	r3, r0
 800394e:	4402      	add	r2, r0
 8003950:	4293      	cmp	r3, r2
 8003952:	d100      	bne.n	8003956 <memset+0xa>
 8003954:	4770      	bx	lr
 8003956:	f803 1b01 	strb.w	r1, [r3], #1
 800395a:	e7f9      	b.n	8003950 <memset+0x4>

0800395c <siprintf>:
 800395c:	b40e      	push	{r1, r2, r3}
 800395e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003962:	b500      	push	{lr}
 8003964:	b09c      	sub	sp, #112	; 0x70
 8003966:	ab1d      	add	r3, sp, #116	; 0x74
 8003968:	9002      	str	r0, [sp, #8]
 800396a:	9006      	str	r0, [sp, #24]
 800396c:	9107      	str	r1, [sp, #28]
 800396e:	9104      	str	r1, [sp, #16]
 8003970:	4808      	ldr	r0, [pc, #32]	; (8003994 <siprintf+0x38>)
 8003972:	4909      	ldr	r1, [pc, #36]	; (8003998 <siprintf+0x3c>)
 8003974:	f853 2b04 	ldr.w	r2, [r3], #4
 8003978:	9105      	str	r1, [sp, #20]
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	a902      	add	r1, sp, #8
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	f000 f866 	bl	8003a50 <_svfiprintf_r>
 8003984:	2200      	movs	r2, #0
 8003986:	9b02      	ldr	r3, [sp, #8]
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	b01c      	add	sp, #112	; 0x70
 800398c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003990:	b003      	add	sp, #12
 8003992:	4770      	bx	lr
 8003994:	2000000c 	.word	0x2000000c
 8003998:	ffff0208 	.word	0xffff0208

0800399c <__ssputs_r>:
 800399c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a0:	688e      	ldr	r6, [r1, #8]
 80039a2:	4682      	mov	sl, r0
 80039a4:	429e      	cmp	r6, r3
 80039a6:	460c      	mov	r4, r1
 80039a8:	4690      	mov	r8, r2
 80039aa:	4699      	mov	r9, r3
 80039ac:	d837      	bhi.n	8003a1e <__ssputs_r+0x82>
 80039ae:	898a      	ldrh	r2, [r1, #12]
 80039b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039b4:	d031      	beq.n	8003a1a <__ssputs_r+0x7e>
 80039b6:	2302      	movs	r3, #2
 80039b8:	6825      	ldr	r5, [r4, #0]
 80039ba:	6909      	ldr	r1, [r1, #16]
 80039bc:	1a6f      	subs	r7, r5, r1
 80039be:	6965      	ldr	r5, [r4, #20]
 80039c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80039c8:	f109 0301 	add.w	r3, r9, #1
 80039cc:	443b      	add	r3, r7
 80039ce:	429d      	cmp	r5, r3
 80039d0:	bf38      	it	cc
 80039d2:	461d      	movcc	r5, r3
 80039d4:	0553      	lsls	r3, r2, #21
 80039d6:	d530      	bpl.n	8003a3a <__ssputs_r+0x9e>
 80039d8:	4629      	mov	r1, r5
 80039da:	f000 fb37 	bl	800404c <_malloc_r>
 80039de:	4606      	mov	r6, r0
 80039e0:	b950      	cbnz	r0, 80039f8 <__ssputs_r+0x5c>
 80039e2:	230c      	movs	r3, #12
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	f8ca 3000 	str.w	r3, [sl]
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f8:	463a      	mov	r2, r7
 80039fa:	6921      	ldr	r1, [r4, #16]
 80039fc:	f000 fab6 	bl	8003f6c <memcpy>
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0a:	81a3      	strh	r3, [r4, #12]
 8003a0c:	6126      	str	r6, [r4, #16]
 8003a0e:	443e      	add	r6, r7
 8003a10:	6026      	str	r6, [r4, #0]
 8003a12:	464e      	mov	r6, r9
 8003a14:	6165      	str	r5, [r4, #20]
 8003a16:	1bed      	subs	r5, r5, r7
 8003a18:	60a5      	str	r5, [r4, #8]
 8003a1a:	454e      	cmp	r6, r9
 8003a1c:	d900      	bls.n	8003a20 <__ssputs_r+0x84>
 8003a1e:	464e      	mov	r6, r9
 8003a20:	4632      	mov	r2, r6
 8003a22:	4641      	mov	r1, r8
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	f000 faac 	bl	8003f82 <memmove>
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	1b9b      	subs	r3, r3, r6
 8003a30:	60a3      	str	r3, [r4, #8]
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	441e      	add	r6, r3
 8003a36:	6026      	str	r6, [r4, #0]
 8003a38:	e7dc      	b.n	80039f4 <__ssputs_r+0x58>
 8003a3a:	462a      	mov	r2, r5
 8003a3c:	f000 fb60 	bl	8004100 <_realloc_r>
 8003a40:	4606      	mov	r6, r0
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d1e2      	bne.n	8003a0c <__ssputs_r+0x70>
 8003a46:	6921      	ldr	r1, [r4, #16]
 8003a48:	4650      	mov	r0, sl
 8003a4a:	f000 fab3 	bl	8003fb4 <_free_r>
 8003a4e:	e7c8      	b.n	80039e2 <__ssputs_r+0x46>

08003a50 <_svfiprintf_r>:
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	461d      	mov	r5, r3
 8003a56:	898b      	ldrh	r3, [r1, #12]
 8003a58:	b09d      	sub	sp, #116	; 0x74
 8003a5a:	061f      	lsls	r7, r3, #24
 8003a5c:	4680      	mov	r8, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	4616      	mov	r6, r2
 8003a62:	d50f      	bpl.n	8003a84 <_svfiprintf_r+0x34>
 8003a64:	690b      	ldr	r3, [r1, #16]
 8003a66:	b96b      	cbnz	r3, 8003a84 <_svfiprintf_r+0x34>
 8003a68:	2140      	movs	r1, #64	; 0x40
 8003a6a:	f000 faef 	bl	800404c <_malloc_r>
 8003a6e:	6020      	str	r0, [r4, #0]
 8003a70:	6120      	str	r0, [r4, #16]
 8003a72:	b928      	cbnz	r0, 8003a80 <_svfiprintf_r+0x30>
 8003a74:	230c      	movs	r3, #12
 8003a76:	f8c8 3000 	str.w	r3, [r8]
 8003a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7e:	e0c8      	b.n	8003c12 <_svfiprintf_r+0x1c2>
 8003a80:	2340      	movs	r3, #64	; 0x40
 8003a82:	6163      	str	r3, [r4, #20]
 8003a84:	2300      	movs	r3, #0
 8003a86:	9309      	str	r3, [sp, #36]	; 0x24
 8003a88:	2320      	movs	r3, #32
 8003a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a8e:	2330      	movs	r3, #48	; 0x30
 8003a90:	f04f 0b01 	mov.w	fp, #1
 8003a94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a98:	9503      	str	r5, [sp, #12]
 8003a9a:	4637      	mov	r7, r6
 8003a9c:	463d      	mov	r5, r7
 8003a9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003aa2:	b10b      	cbz	r3, 8003aa8 <_svfiprintf_r+0x58>
 8003aa4:	2b25      	cmp	r3, #37	; 0x25
 8003aa6:	d13e      	bne.n	8003b26 <_svfiprintf_r+0xd6>
 8003aa8:	ebb7 0a06 	subs.w	sl, r7, r6
 8003aac:	d00b      	beq.n	8003ac6 <_svfiprintf_r+0x76>
 8003aae:	4653      	mov	r3, sl
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	f7ff ff71 	bl	800399c <__ssputs_r>
 8003aba:	3001      	adds	r0, #1
 8003abc:	f000 80a4 	beq.w	8003c08 <_svfiprintf_r+0x1b8>
 8003ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac2:	4453      	add	r3, sl
 8003ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac6:	783b      	ldrb	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 809d 	beq.w	8003c08 <_svfiprintf_r+0x1b8>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ad8:	9304      	str	r3, [sp, #16]
 8003ada:	9307      	str	r3, [sp, #28]
 8003adc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ae0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ae2:	462f      	mov	r7, r5
 8003ae4:	2205      	movs	r2, #5
 8003ae6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003aea:	4850      	ldr	r0, [pc, #320]	; (8003c2c <_svfiprintf_r+0x1dc>)
 8003aec:	f000 fa30 	bl	8003f50 <memchr>
 8003af0:	9b04      	ldr	r3, [sp, #16]
 8003af2:	b9d0      	cbnz	r0, 8003b2a <_svfiprintf_r+0xda>
 8003af4:	06d9      	lsls	r1, r3, #27
 8003af6:	bf44      	itt	mi
 8003af8:	2220      	movmi	r2, #32
 8003afa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003afe:	071a      	lsls	r2, r3, #28
 8003b00:	bf44      	itt	mi
 8003b02:	222b      	movmi	r2, #43	; 0x2b
 8003b04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b08:	782a      	ldrb	r2, [r5, #0]
 8003b0a:	2a2a      	cmp	r2, #42	; 0x2a
 8003b0c:	d015      	beq.n	8003b3a <_svfiprintf_r+0xea>
 8003b0e:	462f      	mov	r7, r5
 8003b10:	2000      	movs	r0, #0
 8003b12:	250a      	movs	r5, #10
 8003b14:	9a07      	ldr	r2, [sp, #28]
 8003b16:	4639      	mov	r1, r7
 8003b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b1c:	3b30      	subs	r3, #48	; 0x30
 8003b1e:	2b09      	cmp	r3, #9
 8003b20:	d94d      	bls.n	8003bbe <_svfiprintf_r+0x16e>
 8003b22:	b1b8      	cbz	r0, 8003b54 <_svfiprintf_r+0x104>
 8003b24:	e00f      	b.n	8003b46 <_svfiprintf_r+0xf6>
 8003b26:	462f      	mov	r7, r5
 8003b28:	e7b8      	b.n	8003a9c <_svfiprintf_r+0x4c>
 8003b2a:	4a40      	ldr	r2, [pc, #256]	; (8003c2c <_svfiprintf_r+0x1dc>)
 8003b2c:	463d      	mov	r5, r7
 8003b2e:	1a80      	subs	r0, r0, r2
 8003b30:	fa0b f000 	lsl.w	r0, fp, r0
 8003b34:	4318      	orrs	r0, r3
 8003b36:	9004      	str	r0, [sp, #16]
 8003b38:	e7d3      	b.n	8003ae2 <_svfiprintf_r+0x92>
 8003b3a:	9a03      	ldr	r2, [sp, #12]
 8003b3c:	1d11      	adds	r1, r2, #4
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	9103      	str	r1, [sp, #12]
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	db01      	blt.n	8003b4a <_svfiprintf_r+0xfa>
 8003b46:	9207      	str	r2, [sp, #28]
 8003b48:	e004      	b.n	8003b54 <_svfiprintf_r+0x104>
 8003b4a:	4252      	negs	r2, r2
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	9207      	str	r2, [sp, #28]
 8003b52:	9304      	str	r3, [sp, #16]
 8003b54:	783b      	ldrb	r3, [r7, #0]
 8003b56:	2b2e      	cmp	r3, #46	; 0x2e
 8003b58:	d10c      	bne.n	8003b74 <_svfiprintf_r+0x124>
 8003b5a:	787b      	ldrb	r3, [r7, #1]
 8003b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b5e:	d133      	bne.n	8003bc8 <_svfiprintf_r+0x178>
 8003b60:	9b03      	ldr	r3, [sp, #12]
 8003b62:	3702      	adds	r7, #2
 8003b64:	1d1a      	adds	r2, r3, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	9203      	str	r2, [sp, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bfb8      	it	lt
 8003b6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b72:	9305      	str	r3, [sp, #20]
 8003b74:	4d2e      	ldr	r5, [pc, #184]	; (8003c30 <_svfiprintf_r+0x1e0>)
 8003b76:	2203      	movs	r2, #3
 8003b78:	7839      	ldrb	r1, [r7, #0]
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 f9e8 	bl	8003f50 <memchr>
 8003b80:	b138      	cbz	r0, 8003b92 <_svfiprintf_r+0x142>
 8003b82:	2340      	movs	r3, #64	; 0x40
 8003b84:	1b40      	subs	r0, r0, r5
 8003b86:	fa03 f000 	lsl.w	r0, r3, r0
 8003b8a:	9b04      	ldr	r3, [sp, #16]
 8003b8c:	3701      	adds	r7, #1
 8003b8e:	4303      	orrs	r3, r0
 8003b90:	9304      	str	r3, [sp, #16]
 8003b92:	7839      	ldrb	r1, [r7, #0]
 8003b94:	2206      	movs	r2, #6
 8003b96:	4827      	ldr	r0, [pc, #156]	; (8003c34 <_svfiprintf_r+0x1e4>)
 8003b98:	1c7e      	adds	r6, r7, #1
 8003b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b9e:	f000 f9d7 	bl	8003f50 <memchr>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d038      	beq.n	8003c18 <_svfiprintf_r+0x1c8>
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <_svfiprintf_r+0x1e8>)
 8003ba8:	bb13      	cbnz	r3, 8003bf0 <_svfiprintf_r+0x1a0>
 8003baa:	9b03      	ldr	r3, [sp, #12]
 8003bac:	3307      	adds	r3, #7
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	9303      	str	r3, [sp, #12]
 8003bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb8:	444b      	add	r3, r9
 8003bba:	9309      	str	r3, [sp, #36]	; 0x24
 8003bbc:	e76d      	b.n	8003a9a <_svfiprintf_r+0x4a>
 8003bbe:	fb05 3202 	mla	r2, r5, r2, r3
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	460f      	mov	r7, r1
 8003bc6:	e7a6      	b.n	8003b16 <_svfiprintf_r+0xc6>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	250a      	movs	r5, #10
 8003bcc:	4619      	mov	r1, r3
 8003bce:	3701      	adds	r7, #1
 8003bd0:	9305      	str	r3, [sp, #20]
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bd8:	3a30      	subs	r2, #48	; 0x30
 8003bda:	2a09      	cmp	r2, #9
 8003bdc:	d903      	bls.n	8003be6 <_svfiprintf_r+0x196>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0c8      	beq.n	8003b74 <_svfiprintf_r+0x124>
 8003be2:	9105      	str	r1, [sp, #20]
 8003be4:	e7c6      	b.n	8003b74 <_svfiprintf_r+0x124>
 8003be6:	fb05 2101 	mla	r1, r5, r1, r2
 8003bea:	2301      	movs	r3, #1
 8003bec:	4607      	mov	r7, r0
 8003bee:	e7f0      	b.n	8003bd2 <_svfiprintf_r+0x182>
 8003bf0:	ab03      	add	r3, sp, #12
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <_svfiprintf_r+0x1ec>)
 8003bf8:	a904      	add	r1, sp, #16
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	f3af 8000 	nop.w
 8003c00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c04:	4681      	mov	r9, r0
 8003c06:	d1d6      	bne.n	8003bb6 <_svfiprintf_r+0x166>
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	065b      	lsls	r3, r3, #25
 8003c0c:	f53f af35 	bmi.w	8003a7a <_svfiprintf_r+0x2a>
 8003c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c12:	b01d      	add	sp, #116	; 0x74
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c18:	ab03      	add	r3, sp, #12
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <_svfiprintf_r+0x1ec>)
 8003c20:	a904      	add	r1, sp, #16
 8003c22:	4640      	mov	r0, r8
 8003c24:	f000 f882 	bl	8003d2c <_printf_i>
 8003c28:	e7ea      	b.n	8003c00 <_svfiprintf_r+0x1b0>
 8003c2a:	bf00      	nop
 8003c2c:	0800423c 	.word	0x0800423c
 8003c30:	08004242 	.word	0x08004242
 8003c34:	08004246 	.word	0x08004246
 8003c38:	00000000 	.word	0x00000000
 8003c3c:	0800399d 	.word	0x0800399d

08003c40 <_printf_common>:
 8003c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	4691      	mov	r9, r2
 8003c46:	461f      	mov	r7, r3
 8003c48:	688a      	ldr	r2, [r1, #8]
 8003c4a:	690b      	ldr	r3, [r1, #16]
 8003c4c:	4606      	mov	r6, r0
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	bfb8      	it	lt
 8003c52:	4613      	movlt	r3, r2
 8003c54:	f8c9 3000 	str.w	r3, [r9]
 8003c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c62:	b112      	cbz	r2, 8003c6a <_printf_common+0x2a>
 8003c64:	3301      	adds	r3, #1
 8003c66:	f8c9 3000 	str.w	r3, [r9]
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	0699      	lsls	r1, r3, #26
 8003c6e:	bf42      	ittt	mi
 8003c70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c74:	3302      	addmi	r3, #2
 8003c76:	f8c9 3000 	strmi.w	r3, [r9]
 8003c7a:	6825      	ldr	r5, [r4, #0]
 8003c7c:	f015 0506 	ands.w	r5, r5, #6
 8003c80:	d107      	bne.n	8003c92 <_printf_common+0x52>
 8003c82:	f104 0a19 	add.w	sl, r4, #25
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	f8d9 2000 	ldr.w	r2, [r9]
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	42ab      	cmp	r3, r5
 8003c90:	dc29      	bgt.n	8003ce6 <_printf_common+0xa6>
 8003c92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	3300      	adds	r3, #0
 8003c9a:	bf18      	it	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	0692      	lsls	r2, r2, #26
 8003ca0:	d42e      	bmi.n	8003d00 <_printf_common+0xc0>
 8003ca2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca6:	4639      	mov	r1, r7
 8003ca8:	4630      	mov	r0, r6
 8003caa:	47c0      	blx	r8
 8003cac:	3001      	adds	r0, #1
 8003cae:	d021      	beq.n	8003cf4 <_printf_common+0xb4>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	68e5      	ldr	r5, [r4, #12]
 8003cb4:	f003 0306 	and.w	r3, r3, #6
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	bf18      	it	ne
 8003cbc:	2500      	movne	r5, #0
 8003cbe:	f8d9 2000 	ldr.w	r2, [r9]
 8003cc2:	f04f 0900 	mov.w	r9, #0
 8003cc6:	bf08      	it	eq
 8003cc8:	1aad      	subeq	r5, r5, r2
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	6922      	ldr	r2, [r4, #16]
 8003cce:	bf08      	it	eq
 8003cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	bfc4      	itt	gt
 8003cd8:	1a9b      	subgt	r3, r3, r2
 8003cda:	18ed      	addgt	r5, r5, r3
 8003cdc:	341a      	adds	r4, #26
 8003cde:	454d      	cmp	r5, r9
 8003ce0:	d11a      	bne.n	8003d18 <_printf_common+0xd8>
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	e008      	b.n	8003cf8 <_printf_common+0xb8>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4652      	mov	r2, sl
 8003cea:	4639      	mov	r1, r7
 8003cec:	4630      	mov	r0, r6
 8003cee:	47c0      	blx	r8
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d103      	bne.n	8003cfc <_printf_common+0xbc>
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfc:	3501      	adds	r5, #1
 8003cfe:	e7c2      	b.n	8003c86 <_printf_common+0x46>
 8003d00:	2030      	movs	r0, #48	; 0x30
 8003d02:	18e1      	adds	r1, r4, r3
 8003d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d0e:	4422      	add	r2, r4
 8003d10:	3302      	adds	r3, #2
 8003d12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d16:	e7c4      	b.n	8003ca2 <_printf_common+0x62>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	4630      	mov	r0, r6
 8003d20:	47c0      	blx	r8
 8003d22:	3001      	adds	r0, #1
 8003d24:	d0e6      	beq.n	8003cf4 <_printf_common+0xb4>
 8003d26:	f109 0901 	add.w	r9, r9, #1
 8003d2a:	e7d8      	b.n	8003cde <_printf_common+0x9e>

08003d2c <_printf_i>:
 8003d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d34:	460c      	mov	r4, r1
 8003d36:	7e09      	ldrb	r1, [r1, #24]
 8003d38:	b085      	sub	sp, #20
 8003d3a:	296e      	cmp	r1, #110	; 0x6e
 8003d3c:	4617      	mov	r7, r2
 8003d3e:	4606      	mov	r6, r0
 8003d40:	4698      	mov	r8, r3
 8003d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d44:	f000 80b3 	beq.w	8003eae <_printf_i+0x182>
 8003d48:	d822      	bhi.n	8003d90 <_printf_i+0x64>
 8003d4a:	2963      	cmp	r1, #99	; 0x63
 8003d4c:	d036      	beq.n	8003dbc <_printf_i+0x90>
 8003d4e:	d80a      	bhi.n	8003d66 <_printf_i+0x3a>
 8003d50:	2900      	cmp	r1, #0
 8003d52:	f000 80b9 	beq.w	8003ec8 <_printf_i+0x19c>
 8003d56:	2958      	cmp	r1, #88	; 0x58
 8003d58:	f000 8083 	beq.w	8003e62 <_printf_i+0x136>
 8003d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d64:	e032      	b.n	8003dcc <_printf_i+0xa0>
 8003d66:	2964      	cmp	r1, #100	; 0x64
 8003d68:	d001      	beq.n	8003d6e <_printf_i+0x42>
 8003d6a:	2969      	cmp	r1, #105	; 0x69
 8003d6c:	d1f6      	bne.n	8003d5c <_printf_i+0x30>
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	0605      	lsls	r5, r0, #24
 8003d74:	f103 0104 	add.w	r1, r3, #4
 8003d78:	d52a      	bpl.n	8003dd0 <_printf_i+0xa4>
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da03      	bge.n	8003d8a <_printf_i+0x5e>
 8003d82:	222d      	movs	r2, #45	; 0x2d
 8003d84:	425b      	negs	r3, r3
 8003d86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d8a:	486f      	ldr	r0, [pc, #444]	; (8003f48 <_printf_i+0x21c>)
 8003d8c:	220a      	movs	r2, #10
 8003d8e:	e039      	b.n	8003e04 <_printf_i+0xd8>
 8003d90:	2973      	cmp	r1, #115	; 0x73
 8003d92:	f000 809d 	beq.w	8003ed0 <_printf_i+0x1a4>
 8003d96:	d808      	bhi.n	8003daa <_printf_i+0x7e>
 8003d98:	296f      	cmp	r1, #111	; 0x6f
 8003d9a:	d020      	beq.n	8003dde <_printf_i+0xb2>
 8003d9c:	2970      	cmp	r1, #112	; 0x70
 8003d9e:	d1dd      	bne.n	8003d5c <_printf_i+0x30>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	f043 0320 	orr.w	r3, r3, #32
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	e003      	b.n	8003db2 <_printf_i+0x86>
 8003daa:	2975      	cmp	r1, #117	; 0x75
 8003dac:	d017      	beq.n	8003dde <_printf_i+0xb2>
 8003dae:	2978      	cmp	r1, #120	; 0x78
 8003db0:	d1d4      	bne.n	8003d5c <_printf_i+0x30>
 8003db2:	2378      	movs	r3, #120	; 0x78
 8003db4:	4865      	ldr	r0, [pc, #404]	; (8003f4c <_printf_i+0x220>)
 8003db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dba:	e055      	b.n	8003e68 <_printf_i+0x13c>
 8003dbc:	6813      	ldr	r3, [r2, #0]
 8003dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc2:	1d19      	adds	r1, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6011      	str	r1, [r2, #0]
 8003dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e08c      	b.n	8003eea <_printf_i+0x1be>
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dd6:	6011      	str	r1, [r2, #0]
 8003dd8:	bf18      	it	ne
 8003dda:	b21b      	sxthne	r3, r3
 8003ddc:	e7cf      	b.n	8003d7e <_printf_i+0x52>
 8003dde:	6813      	ldr	r3, [r2, #0]
 8003de0:	6825      	ldr	r5, [r4, #0]
 8003de2:	1d18      	adds	r0, r3, #4
 8003de4:	6010      	str	r0, [r2, #0]
 8003de6:	0628      	lsls	r0, r5, #24
 8003de8:	d501      	bpl.n	8003dee <_printf_i+0xc2>
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	e002      	b.n	8003df4 <_printf_i+0xc8>
 8003dee:	0668      	lsls	r0, r5, #25
 8003df0:	d5fb      	bpl.n	8003dea <_printf_i+0xbe>
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	296f      	cmp	r1, #111	; 0x6f
 8003df6:	bf14      	ite	ne
 8003df8:	220a      	movne	r2, #10
 8003dfa:	2208      	moveq	r2, #8
 8003dfc:	4852      	ldr	r0, [pc, #328]	; (8003f48 <_printf_i+0x21c>)
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e04:	6865      	ldr	r5, [r4, #4]
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	60a5      	str	r5, [r4, #8]
 8003e0a:	f2c0 8095 	blt.w	8003f38 <_printf_i+0x20c>
 8003e0e:	6821      	ldr	r1, [r4, #0]
 8003e10:	f021 0104 	bic.w	r1, r1, #4
 8003e14:	6021      	str	r1, [r4, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d13d      	bne.n	8003e96 <_printf_i+0x16a>
 8003e1a:	2d00      	cmp	r5, #0
 8003e1c:	f040 808e 	bne.w	8003f3c <_printf_i+0x210>
 8003e20:	4665      	mov	r5, ip
 8003e22:	2a08      	cmp	r2, #8
 8003e24:	d10b      	bne.n	8003e3e <_printf_i+0x112>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	07db      	lsls	r3, r3, #31
 8003e2a:	d508      	bpl.n	8003e3e <_printf_i+0x112>
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bfde      	ittt	le
 8003e34:	2330      	movle	r3, #48	; 0x30
 8003e36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e3e:	ebac 0305 	sub.w	r3, ip, r5
 8003e42:	6123      	str	r3, [r4, #16]
 8003e44:	f8cd 8000 	str.w	r8, [sp]
 8003e48:	463b      	mov	r3, r7
 8003e4a:	aa03      	add	r2, sp, #12
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4630      	mov	r0, r6
 8003e50:	f7ff fef6 	bl	8003c40 <_printf_common>
 8003e54:	3001      	adds	r0, #1
 8003e56:	d14d      	bne.n	8003ef4 <_printf_i+0x1c8>
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	b005      	add	sp, #20
 8003e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e62:	4839      	ldr	r0, [pc, #228]	; (8003f48 <_printf_i+0x21c>)
 8003e64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	6821      	ldr	r1, [r4, #0]
 8003e6c:	1d1d      	adds	r5, r3, #4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6015      	str	r5, [r2, #0]
 8003e72:	060a      	lsls	r2, r1, #24
 8003e74:	d50b      	bpl.n	8003e8e <_printf_i+0x162>
 8003e76:	07ca      	lsls	r2, r1, #31
 8003e78:	bf44      	itt	mi
 8003e7a:	f041 0120 	orrmi.w	r1, r1, #32
 8003e7e:	6021      	strmi	r1, [r4, #0]
 8003e80:	b91b      	cbnz	r3, 8003e8a <_printf_i+0x15e>
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	f022 0220 	bic.w	r2, r2, #32
 8003e88:	6022      	str	r2, [r4, #0]
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	e7b7      	b.n	8003dfe <_printf_i+0xd2>
 8003e8e:	064d      	lsls	r5, r1, #25
 8003e90:	bf48      	it	mi
 8003e92:	b29b      	uxthmi	r3, r3
 8003e94:	e7ef      	b.n	8003e76 <_printf_i+0x14a>
 8003e96:	4665      	mov	r5, ip
 8003e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e9c:	fb02 3311 	mls	r3, r2, r1, r3
 8003ea0:	5cc3      	ldrb	r3, [r0, r3]
 8003ea2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	d1f5      	bne.n	8003e98 <_printf_i+0x16c>
 8003eac:	e7b9      	b.n	8003e22 <_printf_i+0xf6>
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	1d18      	adds	r0, r3, #4
 8003eb4:	6961      	ldr	r1, [r4, #20]
 8003eb6:	6010      	str	r0, [r2, #0]
 8003eb8:	0628      	lsls	r0, r5, #24
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	d501      	bpl.n	8003ec2 <_printf_i+0x196>
 8003ebe:	6019      	str	r1, [r3, #0]
 8003ec0:	e002      	b.n	8003ec8 <_printf_i+0x19c>
 8003ec2:	066a      	lsls	r2, r5, #25
 8003ec4:	d5fb      	bpl.n	8003ebe <_printf_i+0x192>
 8003ec6:	8019      	strh	r1, [r3, #0]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	4665      	mov	r5, ip
 8003ecc:	6123      	str	r3, [r4, #16]
 8003ece:	e7b9      	b.n	8003e44 <_printf_i+0x118>
 8003ed0:	6813      	ldr	r3, [r2, #0]
 8003ed2:	1d19      	adds	r1, r3, #4
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	681d      	ldr	r5, [r3, #0]
 8003ed8:	6862      	ldr	r2, [r4, #4]
 8003eda:	2100      	movs	r1, #0
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f837 	bl	8003f50 <memchr>
 8003ee2:	b108      	cbz	r0, 8003ee8 <_printf_i+0x1bc>
 8003ee4:	1b40      	subs	r0, r0, r5
 8003ee6:	6060      	str	r0, [r4, #4]
 8003ee8:	6863      	ldr	r3, [r4, #4]
 8003eea:	6123      	str	r3, [r4, #16]
 8003eec:	2300      	movs	r3, #0
 8003eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef2:	e7a7      	b.n	8003e44 <_printf_i+0x118>
 8003ef4:	6923      	ldr	r3, [r4, #16]
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	4639      	mov	r1, r7
 8003efa:	4630      	mov	r0, r6
 8003efc:	47c0      	blx	r8
 8003efe:	3001      	adds	r0, #1
 8003f00:	d0aa      	beq.n	8003e58 <_printf_i+0x12c>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	079b      	lsls	r3, r3, #30
 8003f06:	d413      	bmi.n	8003f30 <_printf_i+0x204>
 8003f08:	68e0      	ldr	r0, [r4, #12]
 8003f0a:	9b03      	ldr	r3, [sp, #12]
 8003f0c:	4298      	cmp	r0, r3
 8003f0e:	bfb8      	it	lt
 8003f10:	4618      	movlt	r0, r3
 8003f12:	e7a3      	b.n	8003e5c <_printf_i+0x130>
 8003f14:	2301      	movs	r3, #1
 8003f16:	464a      	mov	r2, r9
 8003f18:	4639      	mov	r1, r7
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	47c0      	blx	r8
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d09a      	beq.n	8003e58 <_printf_i+0x12c>
 8003f22:	3501      	adds	r5, #1
 8003f24:	68e3      	ldr	r3, [r4, #12]
 8003f26:	9a03      	ldr	r2, [sp, #12]
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	42ab      	cmp	r3, r5
 8003f2c:	dcf2      	bgt.n	8003f14 <_printf_i+0x1e8>
 8003f2e:	e7eb      	b.n	8003f08 <_printf_i+0x1dc>
 8003f30:	2500      	movs	r5, #0
 8003f32:	f104 0919 	add.w	r9, r4, #25
 8003f36:	e7f5      	b.n	8003f24 <_printf_i+0x1f8>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ac      	bne.n	8003e96 <_printf_i+0x16a>
 8003f3c:	7803      	ldrb	r3, [r0, #0]
 8003f3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f46:	e76c      	b.n	8003e22 <_printf_i+0xf6>
 8003f48:	0800424d 	.word	0x0800424d
 8003f4c:	0800425e 	.word	0x0800425e

08003f50 <memchr>:
 8003f50:	b510      	push	{r4, lr}
 8003f52:	b2c9      	uxtb	r1, r1
 8003f54:	4402      	add	r2, r0
 8003f56:	4290      	cmp	r0, r2
 8003f58:	4603      	mov	r3, r0
 8003f5a:	d101      	bne.n	8003f60 <memchr+0x10>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e003      	b.n	8003f68 <memchr+0x18>
 8003f60:	781c      	ldrb	r4, [r3, #0]
 8003f62:	3001      	adds	r0, #1
 8003f64:	428c      	cmp	r4, r1
 8003f66:	d1f6      	bne.n	8003f56 <memchr+0x6>
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd10      	pop	{r4, pc}

08003f6c <memcpy>:
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	1e43      	subs	r3, r0, #1
 8003f70:	440a      	add	r2, r1
 8003f72:	4291      	cmp	r1, r2
 8003f74:	d100      	bne.n	8003f78 <memcpy+0xc>
 8003f76:	bd10      	pop	{r4, pc}
 8003f78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f80:	e7f7      	b.n	8003f72 <memcpy+0x6>

08003f82 <memmove>:
 8003f82:	4288      	cmp	r0, r1
 8003f84:	b510      	push	{r4, lr}
 8003f86:	eb01 0302 	add.w	r3, r1, r2
 8003f8a:	d807      	bhi.n	8003f9c <memmove+0x1a>
 8003f8c:	1e42      	subs	r2, r0, #1
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	d00a      	beq.n	8003fa8 <memmove+0x26>
 8003f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f96:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f9a:	e7f8      	b.n	8003f8e <memmove+0xc>
 8003f9c:	4283      	cmp	r3, r0
 8003f9e:	d9f5      	bls.n	8003f8c <memmove+0xa>
 8003fa0:	1881      	adds	r1, r0, r2
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	42d3      	cmn	r3, r2
 8003fa6:	d100      	bne.n	8003faa <memmove+0x28>
 8003fa8:	bd10      	pop	{r4, pc}
 8003faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003fb2:	e7f7      	b.n	8003fa4 <memmove+0x22>

08003fb4 <_free_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d043      	beq.n	8004044 <_free_r+0x90>
 8003fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc0:	1f0c      	subs	r4, r1, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	18e4      	addlt	r4, r4, r3
 8003fc8:	f000 f8d0 	bl	800416c <__malloc_lock>
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <_free_r+0x94>)
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	b933      	cbnz	r3, 8003fe2 <_free_r+0x2e>
 8003fd4:	6063      	str	r3, [r4, #4]
 8003fd6:	6014      	str	r4, [r2, #0]
 8003fd8:	4628      	mov	r0, r5
 8003fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fde:	f000 b8c6 	b.w	800416e <__malloc_unlock>
 8003fe2:	42a3      	cmp	r3, r4
 8003fe4:	d90b      	bls.n	8003ffe <_free_r+0x4a>
 8003fe6:	6821      	ldr	r1, [r4, #0]
 8003fe8:	1862      	adds	r2, r4, r1
 8003fea:	4293      	cmp	r3, r2
 8003fec:	bf01      	itttt	eq
 8003fee:	681a      	ldreq	r2, [r3, #0]
 8003ff0:	685b      	ldreq	r3, [r3, #4]
 8003ff2:	1852      	addeq	r2, r2, r1
 8003ff4:	6022      	streq	r2, [r4, #0]
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	6004      	str	r4, [r0, #0]
 8003ffa:	e7ed      	b.n	8003fd8 <_free_r+0x24>
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	b10a      	cbz	r2, 8004006 <_free_r+0x52>
 8004002:	42a2      	cmp	r2, r4
 8004004:	d9fa      	bls.n	8003ffc <_free_r+0x48>
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	1858      	adds	r0, r3, r1
 800400a:	42a0      	cmp	r0, r4
 800400c:	d10b      	bne.n	8004026 <_free_r+0x72>
 800400e:	6820      	ldr	r0, [r4, #0]
 8004010:	4401      	add	r1, r0
 8004012:	1858      	adds	r0, r3, r1
 8004014:	4282      	cmp	r2, r0
 8004016:	6019      	str	r1, [r3, #0]
 8004018:	d1de      	bne.n	8003fd8 <_free_r+0x24>
 800401a:	6810      	ldr	r0, [r2, #0]
 800401c:	6852      	ldr	r2, [r2, #4]
 800401e:	4401      	add	r1, r0
 8004020:	6019      	str	r1, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	e7d8      	b.n	8003fd8 <_free_r+0x24>
 8004026:	d902      	bls.n	800402e <_free_r+0x7a>
 8004028:	230c      	movs	r3, #12
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	e7d4      	b.n	8003fd8 <_free_r+0x24>
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	1821      	adds	r1, r4, r0
 8004032:	428a      	cmp	r2, r1
 8004034:	bf01      	itttt	eq
 8004036:	6811      	ldreq	r1, [r2, #0]
 8004038:	6852      	ldreq	r2, [r2, #4]
 800403a:	1809      	addeq	r1, r1, r0
 800403c:	6021      	streq	r1, [r4, #0]
 800403e:	6062      	str	r2, [r4, #4]
 8004040:	605c      	str	r4, [r3, #4]
 8004042:	e7c9      	b.n	8003fd8 <_free_r+0x24>
 8004044:	bd38      	pop	{r3, r4, r5, pc}
 8004046:	bf00      	nop
 8004048:	20000090 	.word	0x20000090

0800404c <_malloc_r>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	1ccd      	adds	r5, r1, #3
 8004050:	f025 0503 	bic.w	r5, r5, #3
 8004054:	3508      	adds	r5, #8
 8004056:	2d0c      	cmp	r5, #12
 8004058:	bf38      	it	cc
 800405a:	250c      	movcc	r5, #12
 800405c:	2d00      	cmp	r5, #0
 800405e:	4606      	mov	r6, r0
 8004060:	db01      	blt.n	8004066 <_malloc_r+0x1a>
 8004062:	42a9      	cmp	r1, r5
 8004064:	d903      	bls.n	800406e <_malloc_r+0x22>
 8004066:	230c      	movs	r3, #12
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	2000      	movs	r0, #0
 800406c:	bd70      	pop	{r4, r5, r6, pc}
 800406e:	f000 f87d 	bl	800416c <__malloc_lock>
 8004072:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <_malloc_r+0xac>)
 8004074:	6814      	ldr	r4, [r2, #0]
 8004076:	4621      	mov	r1, r4
 8004078:	b991      	cbnz	r1, 80040a0 <_malloc_r+0x54>
 800407a:	4c20      	ldr	r4, [pc, #128]	; (80040fc <_malloc_r+0xb0>)
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	b91b      	cbnz	r3, 8004088 <_malloc_r+0x3c>
 8004080:	4630      	mov	r0, r6
 8004082:	f000 f863 	bl	800414c <_sbrk_r>
 8004086:	6020      	str	r0, [r4, #0]
 8004088:	4629      	mov	r1, r5
 800408a:	4630      	mov	r0, r6
 800408c:	f000 f85e 	bl	800414c <_sbrk_r>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d124      	bne.n	80040de <_malloc_r+0x92>
 8004094:	230c      	movs	r3, #12
 8004096:	4630      	mov	r0, r6
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	f000 f868 	bl	800416e <__malloc_unlock>
 800409e:	e7e4      	b.n	800406a <_malloc_r+0x1e>
 80040a0:	680b      	ldr	r3, [r1, #0]
 80040a2:	1b5b      	subs	r3, r3, r5
 80040a4:	d418      	bmi.n	80040d8 <_malloc_r+0x8c>
 80040a6:	2b0b      	cmp	r3, #11
 80040a8:	d90f      	bls.n	80040ca <_malloc_r+0x7e>
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	18cc      	adds	r4, r1, r3
 80040ae:	50cd      	str	r5, [r1, r3]
 80040b0:	4630      	mov	r0, r6
 80040b2:	f000 f85c 	bl	800416e <__malloc_unlock>
 80040b6:	f104 000b 	add.w	r0, r4, #11
 80040ba:	1d23      	adds	r3, r4, #4
 80040bc:	f020 0007 	bic.w	r0, r0, #7
 80040c0:	1ac3      	subs	r3, r0, r3
 80040c2:	d0d3      	beq.n	800406c <_malloc_r+0x20>
 80040c4:	425a      	negs	r2, r3
 80040c6:	50e2      	str	r2, [r4, r3]
 80040c8:	e7d0      	b.n	800406c <_malloc_r+0x20>
 80040ca:	684b      	ldr	r3, [r1, #4]
 80040cc:	428c      	cmp	r4, r1
 80040ce:	bf16      	itet	ne
 80040d0:	6063      	strne	r3, [r4, #4]
 80040d2:	6013      	streq	r3, [r2, #0]
 80040d4:	460c      	movne	r4, r1
 80040d6:	e7eb      	b.n	80040b0 <_malloc_r+0x64>
 80040d8:	460c      	mov	r4, r1
 80040da:	6849      	ldr	r1, [r1, #4]
 80040dc:	e7cc      	b.n	8004078 <_malloc_r+0x2c>
 80040de:	1cc4      	adds	r4, r0, #3
 80040e0:	f024 0403 	bic.w	r4, r4, #3
 80040e4:	42a0      	cmp	r0, r4
 80040e6:	d005      	beq.n	80040f4 <_malloc_r+0xa8>
 80040e8:	1a21      	subs	r1, r4, r0
 80040ea:	4630      	mov	r0, r6
 80040ec:	f000 f82e 	bl	800414c <_sbrk_r>
 80040f0:	3001      	adds	r0, #1
 80040f2:	d0cf      	beq.n	8004094 <_malloc_r+0x48>
 80040f4:	6025      	str	r5, [r4, #0]
 80040f6:	e7db      	b.n	80040b0 <_malloc_r+0x64>
 80040f8:	20000090 	.word	0x20000090
 80040fc:	20000094 	.word	0x20000094

08004100 <_realloc_r>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	4607      	mov	r7, r0
 8004104:	4614      	mov	r4, r2
 8004106:	460e      	mov	r6, r1
 8004108:	b921      	cbnz	r1, 8004114 <_realloc_r+0x14>
 800410a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800410e:	4611      	mov	r1, r2
 8004110:	f7ff bf9c 	b.w	800404c <_malloc_r>
 8004114:	b922      	cbnz	r2, 8004120 <_realloc_r+0x20>
 8004116:	f7ff ff4d 	bl	8003fb4 <_free_r>
 800411a:	4625      	mov	r5, r4
 800411c:	4628      	mov	r0, r5
 800411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004120:	f000 f826 	bl	8004170 <_malloc_usable_size_r>
 8004124:	42a0      	cmp	r0, r4
 8004126:	d20f      	bcs.n	8004148 <_realloc_r+0x48>
 8004128:	4621      	mov	r1, r4
 800412a:	4638      	mov	r0, r7
 800412c:	f7ff ff8e 	bl	800404c <_malloc_r>
 8004130:	4605      	mov	r5, r0
 8004132:	2800      	cmp	r0, #0
 8004134:	d0f2      	beq.n	800411c <_realloc_r+0x1c>
 8004136:	4631      	mov	r1, r6
 8004138:	4622      	mov	r2, r4
 800413a:	f7ff ff17 	bl	8003f6c <memcpy>
 800413e:	4631      	mov	r1, r6
 8004140:	4638      	mov	r0, r7
 8004142:	f7ff ff37 	bl	8003fb4 <_free_r>
 8004146:	e7e9      	b.n	800411c <_realloc_r+0x1c>
 8004148:	4635      	mov	r5, r6
 800414a:	e7e7      	b.n	800411c <_realloc_r+0x1c>

0800414c <_sbrk_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	2300      	movs	r3, #0
 8004150:	4c05      	ldr	r4, [pc, #20]	; (8004168 <_sbrk_r+0x1c>)
 8004152:	4605      	mov	r5, r0
 8004154:	4608      	mov	r0, r1
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	f7fc ff38 	bl	8000fcc <_sbrk>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_sbrk_r+0x1a>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	b103      	cbz	r3, 8004166 <_sbrk_r+0x1a>
 8004164:	602b      	str	r3, [r5, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	200002c0 	.word	0x200002c0

0800416c <__malloc_lock>:
 800416c:	4770      	bx	lr

0800416e <__malloc_unlock>:
 800416e:	4770      	bx	lr

08004170 <_malloc_usable_size_r>:
 8004170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004174:	1f18      	subs	r0, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	bfbc      	itt	lt
 800417a:	580b      	ldrlt	r3, [r1, r0]
 800417c:	18c0      	addlt	r0, r0, r3
 800417e:	4770      	bx	lr

08004180 <_init>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	bf00      	nop
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr

0800418c <_fini>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	bf00      	nop
 8004190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004192:	bc08      	pop	{r3}
 8004194:	469e      	mov	lr, r3
 8004196:	4770      	bx	lr
