
03_Robot_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c30  08004c30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c30  08004c30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c30  08004c30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  08004ca8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08004ca8  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d82e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de8  00000000  00000000  0002d8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  0002f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  000303c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018993  00000000  00000000  00030fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000abf5  00000000  00000000  0004996b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fc08  00000000  00000000  00054560  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a64  00000000  00000000  000e41e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000e7c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000e7c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a00 	.word	0x08004a00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004a00 	.word	0x08004a00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <robotDefaultValuesInit>:
 *      Author: pawel
 */
#include "STM32_Robot.h"

void robotDefaultValuesInit(Robot* rob, TIM_HandleTypeDef* timEngLeft, TIM_HandleTypeDef* timEngRight, UART_HandleTypeDef* uartUSB, UART_HandleTypeDef* uartBlth, UART_HandleTypeDef* uartSelected, ADC_HandleTypeDef* adc)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	// assign timer, channel and GPIO pin for left engine PWM and direction
	rob->engLeft.tim = timEngLeft;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	68ba      	ldr	r2, [r7, #8]
 800016e:	601a      	str	r2, [r3, #0]
	rob->engLeft.timChl = TIM_CHANNEL_1;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	2200      	movs	r2, #0
 8000174:	605a      	str	r2, [r3, #4]
	rob->engLeft.dirPinPort = GPIOB;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	4a5e      	ldr	r2, [pc, #376]	; (80002f4 <robotDefaultValuesInit+0x198>)
 800017a:	609a      	str	r2, [r3, #8]
	rob->engLeft.dirPin = GPIO_PIN_5;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2220      	movs	r2, #32
 8000180:	60da      	str	r2, [r3, #12]
	rob->engLeft.pwmVal = 0;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	741a      	strb	r2, [r3, #16]

	// assign timer, channel and GPIO pin for left engine PWM and direction
	rob->engRight.tim = timEngRight;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	615a      	str	r2, [r3, #20]
	rob->engRight.timChl = TIM_CHANNEL_3;//1
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2208      	movs	r2, #8
 8000192:	619a      	str	r2, [r3, #24]
	rob->engRight.dirPinPort = GPIOC;
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	4a58      	ldr	r2, [pc, #352]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000198:	61da      	str	r2, [r3, #28]
	rob->engRight.dirPin = GPIO_PIN_7;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	2280      	movs	r2, #128	; 0x80
 800019e:	621a      	str	r2, [r3, #32]
	rob->engRight.pwmVal = 0;
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	2200      	movs	r2, #0
 80001a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// assign HAL UART structures for communication via USB and Bluetooth
	rob->uartUSB = uartUSB;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	683a      	ldr	r2, [r7, #0]
 80001ac:	629a      	str	r2, [r3, #40]	; 0x28
	rob->uartBlth = uartBlth;
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	69ba      	ldr	r2, [r7, #24]
 80001b2:	62da      	str	r2, [r3, #44]	; 0x2c
	rob->blthPinPort = GPIOA;
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	4a51      	ldr	r2, [pc, #324]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 80001b8:	635a      	str	r2, [r3, #52]	; 0x34
	rob->blthPin = GPIO_PIN_15;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80001c0:	639a      	str	r2, [r3, #56]	; 0x38
	rob->uartSelected = uartSelected;
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	69fa      	ldr	r2, [r7, #28]
 80001c6:	631a      	str	r2, [r3, #48]	; 0x30

	// assign name, type and pin for digital sensor
	strcpy(rob->snr[0].snrName, "RgtCnct");
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	3340      	adds	r3, #64	; 0x40
 80001cc:	494c      	ldr	r1, [pc, #304]	; (8000300 <robotDefaultValuesInit+0x1a4>)
 80001ce:	461a      	mov	r2, r3
 80001d0:	460b      	mov	r3, r1
 80001d2:	cb03      	ldmia	r3!, {r0, r1}
 80001d4:	6010      	str	r0, [r2, #0]
 80001d6:	6051      	str	r1, [r2, #4]
	rob->snr[0].snrPinPort = DIGIAL_SNR;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	2200      	movs	r2, #0
 80001dc:	64da      	str	r2, [r3, #76]	; 0x4c
	rob->snr[0].snrPinPort = GPIOA;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	4a46      	ldr	r2, [pc, #280]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 80001e2:	64da      	str	r2, [r3, #76]	; 0x4c
	rob->snr[0].snrPin = GPIO_PIN_0;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	2201      	movs	r2, #1
 80001e8:	651a      	str	r2, [r3, #80]	; 0x50
	rob->snr[0].snrVal = 0;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	2200      	movs	r2, #0
 80001ee:	655a      	str	r2, [r3, #84]	; 0x54

	strcpy(rob->snr[1].snrName, "LftCnct");
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	3368      	adds	r3, #104	; 0x68
 80001f4:	4943      	ldr	r1, [pc, #268]	; (8000304 <robotDefaultValuesInit+0x1a8>)
 80001f6:	461a      	mov	r2, r3
 80001f8:	460b      	mov	r3, r1
 80001fa:	cb03      	ldmia	r3!, {r0, r1}
 80001fc:	6010      	str	r0, [r2, #0]
 80001fe:	6051      	str	r1, [r2, #4]
	rob->snr[1].snrType = DIGIAL_SNR;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rob->snr[1].snrPinPort = GPIOA;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	4a3c      	ldr	r2, [pc, #240]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 800020c:	675a      	str	r2, [r3, #116]	; 0x74
	rob->snr[1].snrPin = GPIO_PIN_1;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2202      	movs	r2, #2
 8000212:	679a      	str	r2, [r3, #120]	; 0x78
	rob->snr[1].snrVal = 0;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2200      	movs	r2, #0
 8000218:	67da      	str	r2, [r3, #124]	; 0x7c

	// assign name, type and ADC data t0 analog sensors
	strcpy(rob->snr[2].snrName, "RgtLight");
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	3390      	adds	r3, #144	; 0x90
 800021e:	493a      	ldr	r1, [pc, #232]	; (8000308 <robotDefaultValuesInit+0x1ac>)
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	cb03      	ldmia	r3!, {r0, r1}
 8000226:	6010      	str	r0, [r2, #0]
 8000228:	6051      	str	r1, [r2, #4]
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	7213      	strb	r3, [r2, #8]
	rob->snr[2].snrType = ANALOG_SNR;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	2201      	movs	r2, #1
 8000232:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rob->snr[2].snrPinPort = GPIOC;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 800023a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	rob->snr[2].snrPin = GPIO_PIN_5;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2220      	movs	r2, #32
 8000242:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	rob->snr[2].snrVal = 0;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	2200      	movs	r2, #0
 800024a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	rob->snr[2].snrAdc = adc;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	6a3a      	ldr	r2, [r7, #32]
 8000252:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	rob->snr[2].snrAdcChannel.Channel = ADC_CHANNEL_15;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	220f      	movs	r2, #15
 800025a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	rob->snr[2].snrAdcChannel.Rank = ADC_REGULAR_RANK_1;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2201      	movs	r2, #1
 8000262:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	rob->snr[2].snrAdcChannel.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2202      	movs	r2, #2
 800026a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000274:	4820      	ldr	r0, [pc, #128]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000276:	f002 f816 	bl	80022a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2140      	movs	r1, #64	; 0x40
 800027e:	481e      	ldr	r0, [pc, #120]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000280:	f002 f811 	bl	80022a6 <HAL_GPIO_WritePin>

	strcpy(rob->snr[3].snrName, "LftLight");
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	33b8      	adds	r3, #184	; 0xb8
 8000288:	4920      	ldr	r1, [pc, #128]	; (800030c <robotDefaultValuesInit+0x1b0>)
 800028a:	461a      	mov	r2, r3
 800028c:	460b      	mov	r3, r1
 800028e:	cb03      	ldmia	r3!, {r0, r1}
 8000290:	6010      	str	r0, [r2, #0]
 8000292:	6051      	str	r1, [r2, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	7213      	strb	r3, [r2, #8]
	rob->snr[3].snrType = ANALOG_SNR;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2201      	movs	r2, #1
 800029c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rob->snr[3].snrPinPort = GPIOC;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 80002a4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	rob->snr[3].snrPin = GPIO_PIN_0;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	2201      	movs	r2, #1
 80002ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	rob->snr[3].snrVal = 0;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2200      	movs	r2, #0
 80002b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	rob->snr[3].snrAdc = adc;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	6a3a      	ldr	r2, [r7, #32]
 80002bc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	rob->snr[3].snrAdcChannel.Channel = ADC_CHANNEL_10;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	220a      	movs	r2, #10
 80002c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	rob->snr[3].snrAdcChannel.Rank = ADC_REGULAR_RANK_1;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2201      	movs	r2, #1
 80002cc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	rob->snr[3].snrAdcChannel.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	2202      	movs	r2, #2
 80002d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	2101      	movs	r1, #1
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <robotDefaultValuesInit+0x198>)
 80002de:	f001 ffe2 	bl	80022a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	4804      	ldr	r0, [pc, #16]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 80002e8:	f001 ffdd 	bl	80022a6 <HAL_GPIO_WritePin>


}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	40011000 	.word	0x40011000
 80002fc:	40010800 	.word	0x40010800
 8000300:	08004a18 	.word	0x08004a18
 8000304:	08004a20 	.word	0x08004a20
 8000308:	08004a28 	.word	0x08004a28
 800030c:	08004a34 	.word	0x08004a34

08000310 <robotSetEnginePwm>:

void robotSetEnginePwm(Robot* rob, int8_t pwmValLeft, int8_t pwmValRight)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
 800031c:	4613      	mov	r3, r2
 800031e:	70bb      	strb	r3, [r7, #2]
	// check if input is proper
	if(pwmValLeft >= -100 && pwmValLeft <= 100 && pwmValRight >= -100 && pwmValRight <= 100)
 8000320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000324:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000328:	f2c0 80c1 	blt.w	80004ae <robotSetEnginePwm+0x19e>
 800032c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000330:	2b64      	cmp	r3, #100	; 0x64
 8000332:	f300 80bc 	bgt.w	80004ae <robotSetEnginePwm+0x19e>
 8000336:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800033a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800033e:	f2c0 80b6 	blt.w	80004ae <robotSetEnginePwm+0x19e>
 8000342:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000346:	2b64      	cmp	r3, #100	; 0x64
 8000348:	f300 80b1 	bgt.w	80004ae <robotSetEnginePwm+0x19e>
	{
		// asign input values into robot structure
		rob->engLeft.pwmVal = pwmValLeft;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	78fa      	ldrb	r2, [r7, #3]
 8000350:	741a      	strb	r2, [r3, #16]
		rob->engRight.pwmVal = pwmValRight;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	78ba      	ldrb	r2, [r7, #2]
 8000356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		// if speed is set for more than 0, set direction pin to foward movement,
		// else set direction to backward movement
		if(rob->engLeft.pwmVal >= 0)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000360:	2b00      	cmp	r3, #0
 8000362:	db09      	blt.n	8000378 <robotSetEnginePwm+0x68>
			HAL_GPIO_WritePin(rob->engLeft.dirPinPort, rob->engLeft.dirPin, FOWARD);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6898      	ldr	r0, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b29b      	uxth	r3, r3
 800036e:	2200      	movs	r2, #0
 8000370:	4619      	mov	r1, r3
 8000372:	f001 ff98 	bl	80022a6 <HAL_GPIO_WritePin>
 8000376:	e008      	b.n	800038a <robotSetEnginePwm+0x7a>
		else
			HAL_GPIO_WritePin(rob->engLeft.dirPinPort, rob->engLeft.dirPin, BACKWARD);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6898      	ldr	r0, [r3, #8]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	b29b      	uxth	r3, r3
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	f001 ff8e 	bl	80022a6 <HAL_GPIO_WritePin>

		if(rob->engRight.pwmVal >= 0)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8000390:	2b00      	cmp	r3, #0
 8000392:	db09      	blt.n	80003a8 <robotSetEnginePwm+0x98>
			HAL_GPIO_WritePin(rob->engRight.dirPinPort, rob->engRight.dirPin, FOWARD);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	69d8      	ldr	r0, [r3, #28]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	b29b      	uxth	r3, r3
 800039e:	2200      	movs	r2, #0
 80003a0:	4619      	mov	r1, r3
 80003a2:	f001 ff80 	bl	80022a6 <HAL_GPIO_WritePin>
 80003a6:	e008      	b.n	80003ba <robotSetEnginePwm+0xaa>
		else
			HAL_GPIO_WritePin(rob->engRight.dirPinPort, rob->engRight.dirPin, BACKWARD);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	69d8      	ldr	r0, [r3, #28]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	2201      	movs	r2, #1
 80003b4:	4619      	mov	r1, r3
 80003b6:	f001 ff76 	bl	80022a6 <HAL_GPIO_WritePin>

		// based on proportion calculate PWM value for timers
		uint32_t pwmVal = abs((rob->engLeft.pwmVal * PWM_MAX) / 100);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80003c0:	461a      	mov	r2, r3
 80003c2:	f649 1399 	movw	r3, #39321	; 0x9999
 80003c6:	fb03 f302 	mul.w	r3, r3, r2
 80003ca:	4a3b      	ldr	r2, [pc, #236]	; (80004b8 <robotSetEnginePwm+0x1a8>)
 80003cc:	fb82 1203 	smull	r1, r2, r2, r3
 80003d0:	1152      	asrs	r2, r2, #5
 80003d2:	17db      	asrs	r3, r3, #31
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	bfb8      	it	lt
 80003da:	425b      	neglt	r3, r3
 80003dc:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(rob->engLeft.tim, rob->engLeft.timChl, pwmVal);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d105      	bne.n	80003f2 <robotSetEnginePwm+0xe2>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	635a      	str	r2, [r3, #52]	; 0x34
 80003f0:	e018      	b.n	8000424 <robotSetEnginePwm+0x114>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d105      	bne.n	8000406 <robotSetEnginePwm+0xf6>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	639a      	str	r2, [r3, #56]	; 0x38
 8000404:	e00e      	b.n	8000424 <robotSetEnginePwm+0x114>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	2b08      	cmp	r3, #8
 800040c:	d105      	bne.n	800041a <robotSetEnginePwm+0x10a>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	63da      	str	r2, [r3, #60]	; 0x3c
 8000418:	e004      	b.n	8000424 <robotSetEnginePwm+0x114>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	641a      	str	r2, [r3, #64]	; 0x40

		pwmVal = abs((rob->engRight.pwmVal * PWM_MAX) / 100);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800042a:	461a      	mov	r2, r3
 800042c:	f649 1399 	movw	r3, #39321	; 0x9999
 8000430:	fb03 f302 	mul.w	r3, r3, r2
 8000434:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <robotSetEnginePwm+0x1a8>)
 8000436:	fb82 1203 	smull	r1, r2, r2, r3
 800043a:	1152      	asrs	r2, r2, #5
 800043c:	17db      	asrs	r3, r3, #31
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	bfb8      	it	lt
 8000444:	425b      	neglt	r3, r3
 8000446:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(rob->engRight.tim, rob->engRight.timChl, pwmVal);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d105      	bne.n	800045c <robotSetEnginePwm+0x14c>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
 800045a:	e018      	b.n	800048e <robotSetEnginePwm+0x17e>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	2b04      	cmp	r3, #4
 8000462:	d105      	bne.n	8000470 <robotSetEnginePwm+0x160>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	639a      	str	r2, [r3, #56]	; 0x38
 800046e:	e00e      	b.n	800048e <robotSetEnginePwm+0x17e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	2b08      	cmp	r3, #8
 8000476:	d105      	bne.n	8000484 <robotSetEnginePwm+0x174>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	63da      	str	r2, [r3, #60]	; 0x3c
 8000482:	e004      	b.n	800048e <robotSetEnginePwm+0x17e>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	641a      	str	r2, [r3, #64]	; 0x40

		// start the engines
		HAL_TIM_PWM_Start(rob->engRight.tim, rob->engRight.timChl);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4619      	mov	r1, r3
 8000498:	4610      	mov	r0, r2
 800049a:	f002 fdc7 	bl	800302c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(rob->engLeft.tim, rob->engLeft.timChl);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	4619      	mov	r1, r3
 80004a8:	4610      	mov	r0, r2
 80004aa:	f002 fdbf 	bl	800302c <HAL_TIM_PWM_Start>
	}
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	51eb851f 	.word	0x51eb851f

080004bc <robotTelemetry>:

void robotTelemetry(Robot *rob)
{
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	f5ad 7d65 	sub.w	sp, sp, #916	; 0x394
 80004c2:	af12      	add	r7, sp, #72	; 0x48
 80004c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004c8:	6018      	str	r0, [r3, #0]
	// array with data to be send
	char data[400];

	// JSON serialisation structure for data from robot
	char json[] = "{\"blthState\":\"%i\",\"StartProcedureFinished\":\"%i\",\"StartProcedureCountNum\":\"%i\",\""
 80004ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004ce:	4a6f      	ldr	r2, [pc, #444]	; (800068c <robotTelemetry+0x1d0>)
 80004d0:	4618      	mov	r0, r3
 80004d2:	4611      	mov	r1, r2
 80004d4:	f44f 73be 	mov.w	r3, #380	; 0x17c
 80004d8:	461a      	mov	r2, r3
 80004da:	f003 fde1 	bl	80040a0 <memcpy>
			"snr[1]\":{\"snrName\":\"%s\",\"snrType\":\"%i\",\"snrVal\":\"%i\"},\""
			"snr[2]\":{\"snrName\":\"%s\",\"snrType\":\"%i\",\"snrVal\":\"%i\"},\""
			"snr[3]\":{\"snrName\":\"%s\",\"snrType\":\"%i\",\"snrVal\":\"%i\"}}";

	// JSON structure connection with robot variable into data array
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 80004de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80004e8:	469c      	mov	ip, r3
 80004ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80004f4:	469e      	mov	lr, r3
 80004f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000500:	633b      	str	r3, [r7, #48]	; 0x30
 8000502:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68da      	ldr	r2, [r3, #12]
 800050a:	62fa      	str	r2, [r7, #44]	; 0x2c
			rob->engLeft.dirPin, rob->engLeft.pwmVal,
 800050c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f993 3010 	ldrsb.w	r3, [r3, #16]
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
 8000518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6a19      	ldr	r1, [r3, #32]
 8000520:	6279      	str	r1, [r7, #36]	; 0x24
			rob->engRight.dirPin, rob->engRight.pwmVal,
 8000522:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 800052c:	623b      	str	r3, [r7, #32]
			rob->snr[0].snrName, rob->snr[0].snrType, rob->snr[0].snrVal,
 800052e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8000538:	61f8      	str	r0, [r7, #28]
 800053a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000544:	61bb      	str	r3, [r7, #24]
 8000546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800054e:	617d      	str	r5, [r7, #20]
			rob->snr[1].snrName, rob->snr[1].snrType, rob->snr[1].snrVal,
 8000550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800055a:	6138      	str	r0, [r7, #16]
 800055c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 8000570:	60bd      	str	r5, [r7, #8]
			rob->snr[2].snrName, rob->snr[2].snrType, rob->snr[2].snrVal,
 8000572:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f103 0690 	add.w	r6, r3, #144	; 0x90
 800057c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
			rob->snr[3].snrName, rob->snr[3].snrType, rob->snr[3].snrVal);
 8000592:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 800059c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
	sprintf(data, json, rob->blthState, rob->StartProcedureFinished, rob->StartProcedureCountNum,
 80005a6:	4619      	mov	r1, r3
 80005a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80005b2:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 80005b6:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 80005ba:	9310      	str	r3, [sp, #64]	; 0x40
 80005bc:	910f      	str	r1, [sp, #60]	; 0x3c
 80005be:	920e      	str	r2, [sp, #56]	; 0x38
 80005c0:	940d      	str	r4, [sp, #52]	; 0x34
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	920c      	str	r2, [sp, #48]	; 0x30
 80005c6:	960b      	str	r6, [sp, #44]	; 0x2c
 80005c8:	68be      	ldr	r6, [r7, #8]
 80005ca:	960a      	str	r6, [sp, #40]	; 0x28
 80005cc:	68fe      	ldr	r6, [r7, #12]
 80005ce:	9609      	str	r6, [sp, #36]	; 0x24
 80005d0:	693c      	ldr	r4, [r7, #16]
 80005d2:	9408      	str	r4, [sp, #32]
 80005d4:	697e      	ldr	r6, [r7, #20]
 80005d6:	9607      	str	r6, [sp, #28]
 80005d8:	69be      	ldr	r6, [r7, #24]
 80005da:	9606      	str	r6, [sp, #24]
 80005dc:	69fc      	ldr	r4, [r7, #28]
 80005de:	9405      	str	r4, [sp, #20]
 80005e0:	6a3c      	ldr	r4, [r7, #32]
 80005e2:	9404      	str	r4, [sp, #16]
 80005e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80005e6:	9103      	str	r1, [sp, #12]
 80005e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80005ea:	9102      	str	r1, [sp, #8]
 80005ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	4673      	mov	r3, lr
 80005f6:	4662      	mov	r2, ip
 80005f8:	4629      	mov	r1, r5
 80005fa:	f003 fdbd 	bl	8004178 <siprintf>


	// Check if UART through bluetooth is selected, if no then switch off bluetooth module
	if(rob->uartSelected == rob->uartUSB)
 80005fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800060e:	429a      	cmp	r2, r3
 8000610:	d10d      	bne.n	800062e <robotTelemetry+0x172>
		HAL_GPIO_WritePin(rob->blthPinPort, rob->blthPin, GPIO_PIN_RESET);
 8000612:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800061a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000622:	b29b      	uxth	r3, r3
 8000624:	2200      	movs	r2, #0
 8000626:	4619      	mov	r1, r3
 8000628:	f001 fe3d 	bl	80022a6 <HAL_GPIO_WritePin>
 800062c:	e016      	b.n	800065c <robotTelemetry+0x1a0>

	else if(rob->uartSelected == rob->uartBlth)
 800062e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063e:	429a      	cmp	r2, r3
 8000640:	d10c      	bne.n	800065c <robotTelemetry+0x1a0>
		HAL_GPIO_WritePin(rob->blthPinPort, rob->blthPin, GPIO_PIN_SET);
 8000642:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800064a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000652:	b29b      	uxth	r3, r3
 8000654:	2201      	movs	r2, #1
 8000656:	4619      	mov	r1, r3
 8000658:	f001 fe25 	bl	80022a6 <HAL_GPIO_WritePin>

	// Transmit the JSON data via UART
	HAL_UART_Transmit(rob->uartSelected, (uint8_t*)data, strlen(data), 1000);
 800065c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000664:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fd6f 	bl	800014c <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	4620      	mov	r0, r4
 800067c:	f003 fb7b 	bl	8003d76 <HAL_UART_Transmit>


}
 8000680:	bf00      	nop
 8000682:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 8000686:	46bd      	mov	sp, r7
 8000688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068a:	bf00      	nop
 800068c:	08004a40 	.word	0x08004a40

08000690 <robotReadSensors>:
		robotSetEnginePwm(rob, 0, 0);
	}
}

void robotReadSensors(Robot* rob)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	// iterate over all defined sensors
	for(uint8_t i = 0; i < NUMBER_SNR; i++){
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
 800069c:	e07f      	b.n	800079e <robotReadSensors+0x10e>

		// check if sensor is digital
		if(rob->snr[i].snrType == DIGIAL_SNR){
 800069e:	7bfa      	ldrb	r2, [r7, #15]
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	440b      	add	r3, r1
 80006ac:	334a      	adds	r3, #74	; 0x4a
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d121      	bne.n	80006f8 <robotReadSensors+0x68>

			// digital sensor - read 1 or 0
			rob->snr[i].snrVal = HAL_GPIO_ReadPin(rob->snr[i].snrPinPort, rob->snr[i].snrPin);
 80006b4:	7bfa      	ldrb	r2, [r7, #15]
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	4613      	mov	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	440b      	add	r3, r1
 80006c2:	334c      	adds	r3, #76	; 0x4c
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	7bfa      	ldrb	r2, [r7, #15]
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	440b      	add	r3, r1
 80006d4:	3350      	adds	r3, #80	; 0x50
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	f001 fdcc 	bl	8002278 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	4618      	mov	r0, r3
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	3354      	adds	r3, #84	; 0x54
 80006f4:	6018      	str	r0, [r3, #0]
 80006f6:	e04f      	b.n	8000798 <robotReadSensors+0x108>
		}

		// else check if sensor is analog
		else if(rob->snr[i].snrType == ANALOG_SNR){
 80006f8:	7bfa      	ldrb	r2, [r7, #15]
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	440b      	add	r3, r1
 8000706:	334a      	adds	r3, #74	; 0x4a
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d144      	bne.n	8000798 <robotReadSensors+0x108>

			// analog sensor - configure switch ADC for channel that sensor is using
			HAL_ADC_ConfigChannel(rob->snr[i].snrAdc, &rob->snr[i].snrAdcChannel);
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	440b      	add	r3, r1
 800071c:	3358      	adds	r3, #88	; 0x58
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	7bfa      	ldrb	r2, [r7, #15]
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	3358      	adds	r3, #88	; 0x58
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	3304      	adds	r3, #4
 8000732:	4619      	mov	r1, r3
 8000734:	f001 f9b4 	bl	8001aa0 <HAL_ADC_ConfigChannel>

			// start ADC
			HAL_ADC_Start(rob->snr[i].snrAdc);
 8000738:	7bfa      	ldrb	r2, [r7, #15]
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	4613      	mov	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	440b      	add	r3, r1
 8000746:	3358      	adds	r3, #88	; 0x58
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fff4 	bl	8001738 <HAL_ADC_Start>

			// wait until ADC complete conversion
			HAL_ADC_PollForConversion(rob->snr[i].snrAdc, 1000);
 8000750:	7bfa      	ldrb	r2, [r7, #15]
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	440b      	add	r3, r1
 800075e:	3358      	adds	r3, #88	; 0x58
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f894 	bl	8001894 <HAL_ADC_PollForConversion>

			//assign value to sensor structure
			rob->snr[i].snrVal = HAL_ADC_GetValue(rob->snr[i].snrAdc);
 800076c:	7bfa      	ldrb	r2, [r7, #15]
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	440b      	add	r3, r1
 800077a:	3358      	adds	r3, #88	; 0x58
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	7bfc      	ldrb	r4, [r7, #15]
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f981 	bl	8001a88 <HAL_ADC_GetValue>
 8000786:	4601      	mov	r1, r0
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4623      	mov	r3, r4
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4423      	add	r3, r4
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4413      	add	r3, r2
 8000794:	3354      	adds	r3, #84	; 0x54
 8000796:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0; i < NUMBER_SNR; i++){
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	3301      	adds	r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	f67f af7c 	bls.w	800069e <robotReadSensors+0xe>
		}
	}
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}

080007ae <robotStartProcedure>:

	robotSetEnginePwm(rob, -40, -40);
}

void robotStartProcedure(Robot* rob)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
	// loop until whole procedure is finished
	while(rob->StartProcedureFinished == 0){
 80007b6:	e053      	b.n	8000860 <robotStartProcedure+0xb2>

		// read data from sensors
		robotReadSensors(rob);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff69 	bl	8000690 <robotReadSensors>

		// loop until both sensors are switched on
		do{
			robotReadSensors(rob);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff66 	bl	8000690 <robotReadSensors>
		}
		while(rob->snr[0].snrVal == 1 || rob->snr[1].snrVal == 1);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d0f8      	beq.n	80007be <robotStartProcedure+0x10>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d0f4      	beq.n	80007be <robotStartProcedure+0x10>


		// switch on LED to inform that start procedure is on
		robotSwitchLED(rob, 1);
 80007d4:	2101      	movs	r1, #1
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f8e0 	bl	800099c <robotSwitchLED>

		// counter initialization
		rob->StartProcedureCountNum = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		// counter is set for around 4 seconds
		while(rob->StartProcedureCountNum < START_CNT_NUM){
 80007e4:	e011      	b.n	800080a <robotStartProcedure+0x5c>
			robotReadSensors(rob);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff52 	bl	8000690 <robotReadSensors>

			// if one of sensor is not switched on, stop the counting
			if(rob->snr[0].snrVal == 1 || rob->snr[1].snrVal == 1){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d011      	beq.n	8000818 <robotStartProcedure+0x6a>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d00d      	beq.n	8000818 <robotStartProcedure+0x6a>
				break;
			}
			rob->StartProcedureCountNum++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		while(rob->StartProcedureCountNum < START_CNT_NUM){
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000810:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000814:	4293      	cmp	r3, r2
 8000816:	d9e6      	bls.n	80007e6 <robotStartProcedure+0x38>
		}

		// check if counter finished properly
		if(rob->StartProcedureCountNum == START_CNT_NUM){
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800081e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000822:	4293      	cmp	r3, r2
 8000824:	d114      	bne.n	8000850 <robotStartProcedure+0xa2>

			// mark that start procedure finished
			rob->StartProcedureFinished = 1;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2201      	movs	r2, #1
 800082a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

			// switch on buzzer for 0.5 second to announce that start procedure finished
			robotSwitchBuzzer(rob, 1);
 800082e:	2101      	movs	r1, #1
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 f89b 	bl	800096c <robotSwitchBuzzer>
			HAL_Delay(1000);
 8000836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083a:	f000 fe83 	bl	8001544 <HAL_Delay>
			robotSwitchLED(rob, 0);
 800083e:	2100      	movs	r1, #0
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f8ab 	bl	800099c <robotSwitchLED>

			// switch off LED
			robotSwitchBuzzer(rob, 0);
 8000846:	2100      	movs	r1, #0
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 f88f 	bl	800096c <robotSwitchBuzzer>
 800084e:	e007      	b.n	8000860 <robotStartProcedure+0xb2>
		}

		//if counter does not finished properly, just switch off LED
		else{
			rob->StartProcedureCountNum = 0;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2200      	movs	r2, #0
 8000854:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			robotSwitchLED(rob,0);
 8000858:	2100      	movs	r1, #0
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f89e 	bl	800099c <robotSwitchLED>
	while(rob->StartProcedureFinished == 0){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0a6      	beq.n	80007b8 <robotStartProcedure+0xa>
		}
	}
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <robotWallBouncer>:

void robotWallBouncer(Robot* rob)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	// create seed
	srand(time(0));
 800087c:	2000      	movs	r0, #0
 800087e:	f003 fc9b 	bl	80041b8 <time>
 8000882:	4603      	mov	r3, r0
 8000884:	460c      	mov	r4, r1
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fc1e 	bl	80040c8 <srand>
	while(1){
		// read data from sensors
		robotReadSensors(rob);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff feff 	bl	8000690 <robotReadSensors>

		// go straight if nothing is in front
		robotSetEnginePwm(rob, 40, 40);
 8000892:	2228      	movs	r2, #40	; 0x28
 8000894:	2128      	movs	r1, #40	; 0x28
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fd3a 	bl	8000310 <robotSetEnginePwm>

		// check if robot touch the wall from left side
		if(rob->snr[0].snrVal == 0){
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d12e      	bne.n	8000902 <robotWallBouncer+0x8e>
			HAL_Delay(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f000 fe4d 	bl	8001544 <HAL_Delay>

			// go backward
			robotSetEnginePwm(rob, -40,-40);
 80008aa:	f06f 0227 	mvn.w	r2, #39	; 0x27
 80008ae:	f06f 0127 	mvn.w	r1, #39	; 0x27
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fd2c 	bl	8000310 <robotSetEnginePwm>
			HAL_Delay(500);
 80008b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008bc:	f000 fe42 	bl	8001544 <HAL_Delay>

			// turn right for random period of time
			robotSetEnginePwm(rob, 40, -40);
 80008c0:	f06f 0227 	mvn.w	r2, #39	; 0x27
 80008c4:	2128      	movs	r1, #40	; 0x28
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fd22 	bl	8000310 <robotSetEnginePwm>
			HAL_Delay(rand()%1000 + 200);
 80008cc:	f003 fc20 	bl	8004110 <rand>
 80008d0:	4602      	mov	r2, r0
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <robotWallBouncer+0xf4>)
 80008d4:	fb83 1302 	smull	r1, r3, r3, r2
 80008d8:	1199      	asrs	r1, r3, #6
 80008da:	17d3      	asrs	r3, r2, #31
 80008dc:	1acb      	subs	r3, r1, r3
 80008de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	33c8      	adds	r3, #200	; 0xc8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fe2a 	bl	8001544 <HAL_Delay>

			// quick stop for better robot stability
			robotSetEnginePwm(rob, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fd0b 	bl	8000310 <robotSetEnginePwm>
			HAL_Delay(200);
 80008fa:	20c8      	movs	r0, #200	; 0xc8
 80008fc:	f000 fe22 	bl	8001544 <HAL_Delay>
 8000900:	e7c4      	b.n	800088c <robotWallBouncer+0x18>
		}

		// check if robot touch the wall from right side
		else if(rob->snr[1].snrVal == 0){
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1c0      	bne.n	800088c <robotWallBouncer+0x18>
			HAL_Delay(100);
 800090a:	2064      	movs	r0, #100	; 0x64
 800090c:	f000 fe1a 	bl	8001544 <HAL_Delay>

			// go backward
			robotSetEnginePwm(rob, -40,-40);
 8000910:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8000914:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff fcf9 	bl	8000310 <robotSetEnginePwm>
			HAL_Delay(500);
 800091e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000922:	f000 fe0f 	bl	8001544 <HAL_Delay>

			// turn left for random period of time
			robotSetEnginePwm(rob, -40, 40);
 8000926:	2228      	movs	r2, #40	; 0x28
 8000928:	f06f 0127 	mvn.w	r1, #39	; 0x27
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fcef 	bl	8000310 <robotSetEnginePwm>
			HAL_Delay(rand()%1000 + 200);
 8000932:	f003 fbed 	bl	8004110 <rand>
 8000936:	4602      	mov	r2, r0
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <robotWallBouncer+0xf4>)
 800093a:	fb83 1302 	smull	r1, r3, r3, r2
 800093e:	1199      	asrs	r1, r3, #6
 8000940:	17d3      	asrs	r3, r2, #31
 8000942:	1acb      	subs	r3, r1, r3
 8000944:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000948:	fb01 f303 	mul.w	r3, r1, r3
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	33c8      	adds	r3, #200	; 0xc8
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fdf7 	bl	8001544 <HAL_Delay>

			// quick stop for better robot stability
			robotSetEnginePwm(rob, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fcd8 	bl	8000310 <robotSetEnginePwm>
			HAL_Delay(200);
 8000960:	20c8      	movs	r0, #200	; 0xc8
 8000962:	f000 fdef 	bl	8001544 <HAL_Delay>
		robotReadSensors(rob);
 8000966:	e791      	b.n	800088c <robotWallBouncer+0x18>
 8000968:	10624dd3 	.word	0x10624dd3

0800096c <robotSwitchBuzzer>:
	  robotSetEnginePwm(rob, 40-diff, 40);
	}
}

void robotSwitchBuzzer(Robot* rob, uint8_t state)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
	// check if input is correct and change state of buzzer
	if(state == 0 || state == 1)
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <robotSwitchBuzzer+0x18>
 800097e:	78fb      	ldrb	r3, [r7, #3]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d105      	bne.n	8000990 <robotSwitchBuzzer+0x24>
		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, state);
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	461a      	mov	r2, r3
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <robotSwitchBuzzer+0x2c>)
 800098c:	f001 fc8b 	bl	80022a6 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40010c00 	.word	0x40010c00

0800099c <robotSwitchLED>:

void robotSwitchLED(Robot* rob, uint8_t state)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	// check if input is correct and change state of buzzer
	if(state == 0 || state == 1)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <robotSwitchLED+0x18>
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d105      	bne.n	80009c0 <robotSwitchLED+0x24>
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, state);
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	461a      	mov	r2, r3
 80009b8:	2120      	movs	r1, #32
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <robotSwitchLED+0x2c>)
 80009bc:	f001 fc73 	bl	80022a6 <HAL_GPIO_WritePin>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40010800 	.word	0x40010800

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fd55 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f833 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f000 fa53 	bl	8000e84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009de:	f000 fa27 	bl	8000e30 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80009e2:	f000 f8c1 	bl	8000b68 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e6:	f000 f935 	bl	8000c54 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80009ea:	f000 f9f7 	bl	8000ddc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80009ee:	f000 f87d 	bl	8000aec <MX_ADC1_Init>
  MX_TIM4_Init();
 80009f2:	f000 f9a5 	bl	8000d40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  	  // initialize robot with default values
  	  robotDefaultValuesInit(&rob, &htim3, &htim2, &huart2, &huart1, &huart2, &hadc1);
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <main+0x58>)
 80009f8:	9302      	str	r3, [sp, #8]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <main+0x5c>)
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <main+0x60>)
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <main+0x5c>)
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <main+0x64>)
 8000a06:	490b      	ldr	r1, [pc, #44]	; (8000a34 <main+0x68>)
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <main+0x6c>)
 8000a0a:	f7ff fba7 	bl	800015c <robotDefaultValuesInit>

  	  // start interrupts for timer to send robot telemetry to computer
  	  HAL_TIM_Base_Start_IT(&htim4);
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <main+0x70>)
 8000a10:	f002 fa62 	bl	8002ed8 <HAL_TIM_Base_Start_IT>

  	  // perform start procedure
  	  robotStartProcedure(&rob);
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <main+0x6c>)
 8000a16:	f7ff feca 	bl	80007ae <robotStartProcedure>

  	  // start main program
  	  robotWallBouncer(&rob);
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <main+0x6c>)
 8000a1c:	f7ff ff2a 	bl	8000874 <robotWallBouncer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // this loop should not be executed
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0x54>
 8000a22:	bf00      	nop
 8000a24:	20000128 	.word	0x20000128
 8000a28:	200002c8 	.word	0x200002c8
 8000a2c:	20000158 	.word	0x20000158
 8000a30:	20000280 	.word	0x20000280
 8000a34:	200000e0 	.word	0x200000e0
 8000a38:	20000198 	.word	0x20000198
 8000a3c:	20000098 	.word	0x20000098

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4a:	2228      	movs	r2, #40	; 0x28
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fb31 	bl	80040b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a74:	2301      	movs	r3, #1
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000a84:	2300      	movs	r3, #0
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fc45 	bl	800231c <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a98:	f000 faa8 	bl	8000fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 feaf 	bl	800281c <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ac4:	f000 fa92 	bl	8000fec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f83e 	bl	8002b54 <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ade:	f000 fa85 	bl	8000fec <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	; 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <MX_ADC1_Init+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b16:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b2a:	f000 fd2d 	bl	8001588 <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 fa5a 	bl	8000fec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b4a:	f000 ffa9 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b54:	f000 fa4a 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000128 	.word	0x20000128
 8000b64:	40012400 	.word	0x40012400

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc0:	4823      	ldr	r0, [pc, #140]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000bc2:	f002 f939 	bl	8002e38 <HAL_TIM_Base_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bcc:	f000 fa0e 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481c      	ldr	r0, [pc, #112]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000bde:	f002 fc8d 	bl	80034fc <HAL_TIM_ConfigClockSource>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000be8:	f000 fa00 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bec:	4818      	ldr	r0, [pc, #96]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000bee:	f002 f9c5 	bl	8002f7c <HAL_TIM_PWM_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bf8:	f000 f9f8 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000c0c:	f002 fff6 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c16:	f000 f9e9 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1a:	2360      	movs	r3, #96	; 0x60
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000c32:	f002 fba5 	bl	8003380 <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c3c:	f000 f9d6 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <MX_TIM2_Init+0xe8>)
 8000c42:	f000 fa91 	bl	8001168 <HAL_TIM_MspPostInit>

}
 8000c46:	bf00      	nop
 8000c48:	3738      	adds	r7, #56	; 0x38
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000280 	.word	0x20000280

08000c54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000c86:	4a2d      	ldr	r2, [pc, #180]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000caa:	4823      	ldr	r0, [pc, #140]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000cac:	f002 f8c4 	bl	8002e38 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cb6:	f000 f999 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	481c      	ldr	r0, [pc, #112]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000cc8:	f002 fc18 	bl	80034fc <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cd2:	f000 f98b 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cd6:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000cd8:	f002 f950 	bl	8002f7c <HAL_TIM_PWM_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ce2:	f000 f983 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000cf6:	f002 ff81 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d00:	f000 f974 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d04:	2360      	movs	r3, #96	; 0x60
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4807      	ldr	r0, [pc, #28]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000d1c:	f002 fb30 	bl	8003380 <HAL_TIM_PWM_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d26:	f000 f961 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d2a:	4803      	ldr	r0, [pc, #12]	; (8000d38 <MX_TIM3_Init+0xe4>)
 8000d2c:	f000 fa1c 	bl	8001168 <HAL_TIM_MspPostInit>

}
 8000d30:	bf00      	nop
 8000d32:	3738      	adds	r7, #56	; 0x38
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000e0 	.word	0x200000e0
 8000d3c:	40000400 	.word	0x40000400

08000d40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <MX_TIM4_Init+0x98>)
 8000d60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000d64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000d68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000d86:	f002 f857 	bl	8002e38 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d90:	f000 f92c 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000da2:	f002 fbab 	bl	80034fc <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000dac:	f000 f91e 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_TIM4_Init+0x94>)
 8000dbe:	f002 ff1d 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f000 f910 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000098 	.word	0x20000098
 8000dd8:	40000800 	.word	0x40000800

08000ddc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART1_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000de8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e14:	f002 ff62 	bl	8003cdc <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f8e5 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000158 	.word	0x20000158
 8000e2c:	40013800 	.word	0x40013800

08000e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <MX_USART2_UART_Init+0x50>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e68:	f002 ff38 	bl	8003cdc <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e72:	f000 f8bb 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200002c8 	.word	0x200002c8
 8000e80:	40004400 	.word	0x40004400

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a47      	ldr	r2, [pc, #284]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b45      	ldr	r3, [pc, #276]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb0:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a41      	ldr	r2, [pc, #260]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000eb6:	f043 0320 	orr.w	r3, r3, #32
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0320 	and.w	r3, r3, #32
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a3b      	ldr	r2, [pc, #236]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a35      	ldr	r2, [pc, #212]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_GND_Light_Sensor_Pin|Right_GND_Light_Sensor_Pin|Right_Engine_Directiob_Pin|Right_5V_Light_Sensor_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000efe:	4830      	ldr	r0, [pc, #192]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f00:	f001 f9d1 	bl	80022a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Bluetooth_Power_Supply_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f248 0120 	movw	r1, #32800	; 0x8020
 8000f0a:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <MX_GPIO_Init+0x140>)
 8000f0c:	f001 f9cb 	bl	80022a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Left_5V_Light_Sensor_Pin|Left_Engine_Direction_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2161      	movs	r1, #97	; 0x61
 8000f14:	482c      	ldr	r0, [pc, #176]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000f16:	f001 f9c6 	bl	80022a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <MX_GPIO_Init+0x148>)
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f30:	f001 f848 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_GND_Light_Sensor_Pin Right_GND_Light_Sensor_Pin Right_Engine_Directiob_Pin Right_5V_Light_Sensor_Pin */
  GPIO_InitStruct.Pin = Left_GND_Light_Sensor_Pin|Right_GND_Light_Sensor_Pin|Right_Engine_Directiob_Pin|Right_5V_Light_Sensor_Pin;
 8000f34:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f4e:	f001 f839 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Contact_Sensor_Pin Left_Contact_Sensor_Pin */
  GPIO_InitStruct.Pin = Right_Contact_Sensor_Pin|Left_Contact_Sensor_Pin;
 8000f52:	2303      	movs	r3, #3
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <MX_GPIO_Init+0x140>)
 8000f66:	f001 f82d 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Bluetooth_Power_Supply_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Bluetooth_Power_Supply_Pin;
 8000f6a:	f248 0320 	movw	r3, #32800	; 0x8020
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <MX_GPIO_Init+0x140>)
 8000f84:	f001 f81e 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_5V_Light_Sensor_Pin Left_Engine_Direction_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = Left_5V_Light_Sensor_Pin|Left_Engine_Direction_Pin|Buzzer_Pin;
 8000f88:	2361      	movs	r3, #97	; 0x61
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000fa0:	f001 f810 	bl	8001fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f000 ffd4 	bl	8001f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fae:	2028      	movs	r0, #40	; 0x28
 8000fb0:	f000 ffed 	bl	8001f8e <HAL_NVIC_EnableIRQ>

}
 8000fb4:	bf00      	nop
 8000fb6:	3720      	adds	r7, #32
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	10110000 	.word	0x10110000

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	 // every 1 second send data to computer
	 robotTelemetry(&rob);
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000fda:	f7ff fa6f 	bl	80004bc <robotTelemetry>
 }
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000198 	.word	0x20000198

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <Error_Handler+0x6>

08000ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_MspInit+0x5c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_MspInit+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_MspInit+0x5c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x5c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_MspInit+0x60>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_MspInit+0x60>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000

08001058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_ADC_MspInit+0x6c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d121      	bne.n	80010bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Left_ADC_Light_Sensor_Pin|Right_ADC_Light_Sensor_Pin;
 80010a8:	2321      	movs	r3, #33	; 0x21
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ac:	2303      	movs	r3, #3
 80010ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_ADC_MspInit+0x74>)
 80010b8:	f000 ff84 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40012400 	.word	0x40012400
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40011000 	.word	0x40011000

080010d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e0:	d10c      	bne.n	80010fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010fa:	e02a      	b.n	8001152 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_TIM_Base_MspInit+0x90>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10c      	bne.n	8001120 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
}
 800111e:	e018      	b.n	8001152 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_TIM_Base_MspInit+0x94>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d113      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_TIM_Base_MspInit+0x8c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201e      	movs	r0, #30
 8001148:	f000 ff05 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800114c:	201e      	movs	r0, #30
 800114e:	f000 ff1e 	bl	8001f8e <HAL_NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000
 8001160:	40000400 	.word	0x40000400
 8001164:	40000800 	.word	0x40000800

08001168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001186:	d12b      	bne.n	80011e0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <HAL_TIM_MspPostInit+0xe0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a2e      	ldr	r2, [pc, #184]	; (8001248 <HAL_TIM_MspPostInit+0xe0>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_TIM_MspPostInit+0xe0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	4825      	ldr	r0, [pc, #148]	; (800124c <HAL_TIM_MspPostInit+0xe4>)
 80011b6:	f000 ff05 	bl	8001fc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HAL_TIM_MspPostInit+0xe8>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_TIM_MspPostInit+0xe8>)
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011de:	e02e      	b.n	800123e <HAL_TIM_MspPostInit+0xd6>
  else if(htim->Instance==TIM3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d129      	bne.n	800123e <HAL_TIM_MspPostInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_TIM_MspPostInit+0xe0>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <HAL_TIM_MspPostInit+0xe0>)
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_TIM_MspPostInit+0xe0>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001202:	2310      	movs	r3, #16
 8001204:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <HAL_TIM_MspPostInit+0xe4>)
 8001216:	f000 fed5 	bl	8001fc4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_TIM_MspPostInit+0xe8>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
 8001238:	4a05      	ldr	r2, [pc, #20]	; (8001250 <HAL_TIM_MspPostInit+0xe8>)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	6053      	str	r3, [r2, #4]
}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	40010c00 	.word	0x40010c00
 8001250:	40010000 	.word	0x40010000
 8001254:	40000400 	.word	0x40000400

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a31      	ldr	r2, [pc, #196]	; (8001338 <HAL_UART_MspInit+0xe0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d132      	bne.n	80012de <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_UART_MspInit+0xe4>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a2f      	ldr	r2, [pc, #188]	; (800133c <HAL_UART_MspInit+0xe4>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_UART_MspInit+0xe4>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_UART_MspInit+0xe4>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a29      	ldr	r2, [pc, #164]	; (800133c <HAL_UART_MspInit+0xe4>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_UART_MspInit+0xe4>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Bluetooth_Pin;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_Bluetooth_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4820      	ldr	r0, [pc, #128]	; (8001340 <HAL_UART_MspInit+0xe8>)
 80012be:	f000 fe81 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Bluetooth_Pin;
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART1_RX_Bluetooth_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0318 	add.w	r3, r7, #24
 80012d4:	4619      	mov	r1, r3
 80012d6:	481a      	ldr	r0, [pc, #104]	; (8001340 <HAL_UART_MspInit+0xe8>)
 80012d8:	f000 fe74 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012dc:	e028      	b.n	8001330 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <HAL_UART_MspInit+0xec>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d123      	bne.n	8001330 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_UART_MspInit+0xe4>)
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <HAL_UART_MspInit+0xe4>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f2:	61d3      	str	r3, [r2, #28]
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_UART_MspInit+0xe4>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_UART_MspInit+0xe4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <HAL_UART_MspInit+0xe4>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_UART_MspInit+0xe4>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001318:	230c      	movs	r3, #12
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2302      	movs	r3, #2
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_UART_MspInit+0xe8>)
 800132c:	f000 fe4a 	bl	8001fc4 <HAL_GPIO_Init>
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40013800 	.word	0x40013800
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40004400 	.word	0x40004400

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f000 f8bd 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM4_IRQHandler+0x10>)
 800139e:	f001 fee7 	bl	8003170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000098 	.word	0x20000098

080013ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013b4:	f000 ff90 	bl	80022d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f002 fe2e 	bl	800404c <__errno>
 80013f0:	4602      	mov	r2, r0
 80013f2:	230c      	movs	r3, #12
 80013f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20005000 	.word	0x20005000
 800141c:	00000400 	.word	0x00000400
 8001420:	2000008c 	.word	0x2000008c
 8001424:	20000310 	.word	0x20000310

08001428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001434:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001436:	e003      	b.n	8001440 <LoopCopyDataInit>

08001438 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800143a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800143c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800143e:	3104      	adds	r1, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001444:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001446:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001448:	d3f6      	bcc.n	8001438 <CopyDataInit>
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800144c:	e002      	b.n	8001454 <LoopFillZerobss>

0800144e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001450:	f842 3b04 	str.w	r3, [r2], #4

08001454 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001456:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001458:	d3f9      	bcc.n	800144e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800145a:	f7ff ffe5 	bl	8001428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f002 fdfb 	bl	8004058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001462:	f7ff fab3 	bl	80009cc <main>
  bx lr
 8001466:	4770      	bx	lr
  ldr r3, =_sidata
 8001468:	08004c38 	.word	0x08004c38
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001470:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001474:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001478:	20000310 	.word	0x20000310

0800147c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_2_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 fd55 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fdaa 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fd6d 	bl	8001faa <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 fd35 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_IncTick+0x20>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	20000008 	.word	0x20000008
 800152c:	20000308 	.word	0x20000308

08001530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000308 	.word	0x20000308

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fff0 	bl	8001530 <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_Delay+0x40>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffe0 	bl	8001530 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0be      	b.n	8001728 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fd46 	bl	8001058 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fbb1 	bl	8001d34 <ADC_ConversionStop_Disable>
 80015d2:	4603      	mov	r3, r0
 80015d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f040 8099 	bne.w	8001716 <HAL_ADC_Init+0x18e>
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 8095 	bne.w	8001716 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015f4:	f023 0302 	bic.w	r3, r3, #2
 80015f8:	f043 0202 	orr.w	r2, r3, #2
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001608:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7b1b      	ldrb	r3, [r3, #12]
 800160e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001610:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	4313      	orrs	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001620:	d003      	beq.n	800162a <HAL_ADC_Init+0xa2>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d102      	bne.n	8001630 <HAL_ADC_Init+0xa8>
 800162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162e:	e000      	b.n	8001632 <HAL_ADC_Init+0xaa>
 8001630:	2300      	movs	r3, #0
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7d1b      	ldrb	r3, [r3, #20]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d119      	bne.n	8001674 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7b1b      	ldrb	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d109      	bne.n	800165c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	3b01      	subs	r3, #1
 800164e:	035a      	lsls	r2, r3, #13
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	e00b      	b.n	8001674 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f043 0220 	orr.w	r2, r3, #32
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_ADC_Init+0x1a8>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	68b9      	ldr	r1, [r7, #8]
 8001698:	430b      	orrs	r3, r1
 800169a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a4:	d003      	beq.n	80016ae <HAL_ADC_Init+0x126>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d104      	bne.n	80016b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	051b      	lsls	r3, r3, #20
 80016b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_ADC_Init+0x1ac>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d10b      	bne.n	80016f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	f023 0303 	bic.w	r3, r3, #3
 80016ea:	f043 0201 	orr.w	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f2:	e018      	b.n	8001726 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f023 0312 	bic.w	r3, r3, #18
 80016fc:	f043 0210 	orr.w	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001714:	e007      	b.n	8001726 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	f043 0210 	orr.w	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001726:	7dfb      	ldrb	r3, [r7, #23]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	ffe1f7fd 	.word	0xffe1f7fd
 8001734:	ff1f0efe 	.word	0xff1f0efe

08001738 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Start+0x1a>
 800174e:	2302      	movs	r3, #2
 8001750:	e098      	b.n	8001884 <HAL_ADC_Start+0x14c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fa98 	bl	8001c90 <ADC_Enable>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 8087 	bne.w	800187a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a41      	ldr	r2, [pc, #260]	; (800188c <HAL_ADC_Start+0x154>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d105      	bne.n	8001796 <HAL_ADC_Start+0x5e>
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_ADC_Start+0x158>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d115      	bne.n	80017c2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d026      	beq.n	80017fe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017c0:	e01d      	b.n	80017fe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <HAL_ADC_Start+0x158>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d004      	beq.n	80017e2 <HAL_ADC_Start+0xaa>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2b      	ldr	r2, [pc, #172]	; (800188c <HAL_ADC_Start+0x154>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10d      	bne.n	80017fe <HAL_ADC_Start+0xc6>
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <HAL_ADC_Start+0x158>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f023 0206 	bic.w	r2, r3, #6
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
 8001816:	e002      	b.n	800181e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f06f 0202 	mvn.w	r2, #2
 800182e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800183a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800183e:	d113      	bne.n	8001868 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_ADC_Start+0x154>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d105      	bne.n	8001856 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_ADC_Start+0x158>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	d108      	bne.n	8001868 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	e00c      	b.n	8001882 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	e003      	b.n	8001882 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40012800 	.word	0x40012800
 8001890:	40012400 	.word	0x40012400

08001894 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80018aa:	f7ff fe41 	bl	8001530 <HAL_GetTick>
 80018ae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	f043 0220 	orr.w	r2, r3, #32
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0c8      	b.n	8001a68 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d12a      	bne.n	800193a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d123      	bne.n	800193a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018f2:	e01a      	b.n	800192a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fa:	d016      	beq.n	800192a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <HAL_ADC_PollForConversion+0x7e>
 8001902:	f7ff fe15 	bl	8001530 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d20b      	bcs.n	800192a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	f043 0204 	orr.w	r2, r3, #4
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e09e      	b.n	8001a68 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0dd      	beq.n	80018f4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001938:	e06c      	b.n	8001a14 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_ADC_PollForConversion+0x1dc>)
 800193c:	681c      	ldr	r4, [r3, #0]
 800193e:	2002      	movs	r0, #2
 8001940:	f001 f9be 	bl	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001944:	4603      	mov	r3, r0
 8001946:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6919      	ldr	r1, [r3, #16]
 8001950:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <HAL_ADC_PollForConversion+0x1e0>)
 8001952:	400b      	ands	r3, r1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d118      	bne.n	800198a <HAL_ADC_PollForConversion+0xf6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68d9      	ldr	r1, [r3, #12]
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_ADC_PollForConversion+0x1e4>)
 8001960:	400b      	ands	r3, r1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d111      	bne.n	800198a <HAL_ADC_PollForConversion+0xf6>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6919      	ldr	r1, [r3, #16]
 800196c:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_ADC_PollForConversion+0x1e8>)
 800196e:	400b      	ands	r3, r1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d108      	bne.n	8001986 <HAL_ADC_PollForConversion+0xf2>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68d9      	ldr	r1, [r3, #12]
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <HAL_ADC_PollForConversion+0x1ec>)
 800197c:	400b      	ands	r3, r1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_PollForConversion+0xf2>
 8001982:	2314      	movs	r3, #20
 8001984:	e020      	b.n	80019c8 <HAL_ADC_PollForConversion+0x134>
 8001986:	2329      	movs	r3, #41	; 0x29
 8001988:	e01e      	b.n	80019c8 <HAL_ADC_PollForConversion+0x134>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6919      	ldr	r1, [r3, #16]
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_ADC_PollForConversion+0x1e8>)
 8001992:	400b      	ands	r3, r1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d106      	bne.n	80019a6 <HAL_ADC_PollForConversion+0x112>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68d9      	ldr	r1, [r3, #12]
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_ADC_PollForConversion+0x1ec>)
 80019a0:	400b      	ands	r3, r1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <HAL_ADC_PollForConversion+0x12e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6919      	ldr	r1, [r3, #16]
 80019ac:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <HAL_ADC_PollForConversion+0x1f0>)
 80019ae:	400b      	ands	r3, r1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d108      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x132>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68d9      	ldr	r1, [r3, #12]
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_ADC_PollForConversion+0x1f0>)
 80019bc:	400b      	ands	r3, r1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x132>
 80019c2:	2354      	movs	r3, #84	; 0x54
 80019c4:	e000      	b.n	80019c8 <HAL_ADC_PollForConversion+0x134>
 80019c6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019ce:	e01d      	b.n	8001a0c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d6:	d016      	beq.n	8001a06 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <HAL_ADC_PollForConversion+0x15a>
 80019de:	f7ff fda7 	bl	8001530 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20b      	bcs.n	8001a06 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f043 0204 	orr.w	r2, r3, #4
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e030      	b.n	8001a68 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8dd      	bhi.n	80019d0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0212 	mvn.w	r2, #18
 8001a1c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a38:	d115      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d111      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	f043 0201 	orr.w	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd90      	pop	{r4, r7, pc}
 8001a70:	20000000 	.word	0x20000000
 8001a74:	24924924 	.word	0x24924924
 8001a78:	00924924 	.word	0x00924924
 8001a7c:	12492492 	.word	0x12492492
 8001a80:	00492492 	.word	0x00492492
 8001a84:	00249249 	.word	0x00249249

08001a88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x20>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0dc      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x1da>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d81c      	bhi.n	8001b0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b05      	subs	r3, #5
 8001ae2:	221f      	movs	r2, #31
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4019      	ands	r1, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b05      	subs	r3, #5
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
 8001b08:	e03c      	b.n	8001b84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d81c      	bhi.n	8001b4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3b23      	subs	r3, #35	; 0x23
 8001b24:	221f      	movs	r2, #31
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4019      	ands	r1, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b23      	subs	r3, #35	; 0x23
 8001b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
 8001b4a:	e01b      	b.n	8001b84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b41      	subs	r3, #65	; 0x41
 8001b5e:	221f      	movs	r2, #31
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4019      	ands	r1, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b41      	subs	r3, #65	; 0x41
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	d91c      	bls.n	8001bc6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b1e      	subs	r3, #30
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	e019      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6919      	ldr	r1, [r3, #16]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4019      	ands	r1, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6898      	ldr	r0, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d003      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c06:	2b11      	cmp	r3, #17
 8001c08:	d132      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d125      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d126      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c30:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d11a      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	0c9a      	lsrs	r2, r3, #18
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f9      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x1b2>
 8001c5e:	e007      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40012400 	.word	0x40012400
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	431bde83 	.word	0x431bde83

08001c90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d039      	beq.n	8001d22 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <ADC_Enable+0x9c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <ADC_Enable+0xa0>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	0c9b      	lsrs	r3, r3, #18
 8001cca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ccc:	e002      	b.n	8001cd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cda:	f7ff fc29 	bl	8001530 <HAL_GetTick>
 8001cde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ce0:	e018      	b.n	8001d14 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ce2:	f7ff fc25 	bl	8001530 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d911      	bls.n	8001d14 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f043 0210 	orr.w	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e007      	b.n	8001d24 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d1df      	bne.n	8001ce2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d127      	bne.n	8001d9e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d5e:	f7ff fbe7 	bl	8001530 <HAL_GetTick>
 8001d62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d64:	e014      	b.n	8001d90 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d66:	f7ff fbe3 	bl	8001530 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d90d      	bls.n	8001d90 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f043 0210 	orr.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e007      	b.n	8001da0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d0e3      	beq.n	8001d66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4906      	ldr	r1, [pc, #24]	; (8001e40 <__NVIC_EnableIRQ+0x34>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
         );
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff90 	bl	8001e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff2d 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff42 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff90 	bl	8001e98 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5f 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff35 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa2 	bl	8001efc <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b08b      	sub	sp, #44	; 0x2c
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e127      	b.n	8002228 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f040 8116 	bne.w	8002222 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d034      	beq.n	8002068 <HAL_GPIO_Init+0xa4>
 8001ffe:	2b12      	cmp	r3, #18
 8002000:	d80d      	bhi.n	800201e <HAL_GPIO_Init+0x5a>
 8002002:	2b02      	cmp	r3, #2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x9a>
 8002006:	2b02      	cmp	r3, #2
 8002008:	d804      	bhi.n	8002014 <HAL_GPIO_Init+0x50>
 800200a:	2b00      	cmp	r3, #0
 800200c:	d031      	beq.n	8002072 <HAL_GPIO_Init+0xae>
 800200e:	2b01      	cmp	r3, #1
 8002010:	d01c      	beq.n	800204c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002012:	e048      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002014:	2b03      	cmp	r3, #3
 8002016:	d043      	beq.n	80020a0 <HAL_GPIO_Init+0xdc>
 8002018:	2b11      	cmp	r3, #17
 800201a:	d01b      	beq.n	8002054 <HAL_GPIO_Init+0x90>
          break;
 800201c:	e043      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800201e:	4a89      	ldr	r2, [pc, #548]	; (8002244 <HAL_GPIO_Init+0x280>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d026      	beq.n	8002072 <HAL_GPIO_Init+0xae>
 8002024:	4a87      	ldr	r2, [pc, #540]	; (8002244 <HAL_GPIO_Init+0x280>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d806      	bhi.n	8002038 <HAL_GPIO_Init+0x74>
 800202a:	4a87      	ldr	r2, [pc, #540]	; (8002248 <HAL_GPIO_Init+0x284>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d020      	beq.n	8002072 <HAL_GPIO_Init+0xae>
 8002030:	4a86      	ldr	r2, [pc, #536]	; (800224c <HAL_GPIO_Init+0x288>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01d      	beq.n	8002072 <HAL_GPIO_Init+0xae>
          break;
 8002036:	e036      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002038:	4a85      	ldr	r2, [pc, #532]	; (8002250 <HAL_GPIO_Init+0x28c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0xae>
 800203e:	4a85      	ldr	r2, [pc, #532]	; (8002254 <HAL_GPIO_Init+0x290>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d016      	beq.n	8002072 <HAL_GPIO_Init+0xae>
 8002044:	4a84      	ldr	r2, [pc, #528]	; (8002258 <HAL_GPIO_Init+0x294>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0xae>
          break;
 800204a:	e02c      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e028      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	3304      	adds	r3, #4
 800205a:	623b      	str	r3, [r7, #32]
          break;
 800205c:	e023      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	3308      	adds	r3, #8
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e01e      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	330c      	adds	r3, #12
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e019      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800207a:	2304      	movs	r3, #4
 800207c:	623b      	str	r3, [r7, #32]
          break;
 800207e:	e012      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002088:	2308      	movs	r3, #8
 800208a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	611a      	str	r2, [r3, #16]
          break;
 8002092:	e008      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002094:	2308      	movs	r3, #8
 8002096:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	615a      	str	r2, [r3, #20]
          break;
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2bff      	cmp	r3, #255	; 0xff
 80020aa:	d801      	bhi.n	80020b0 <HAL_GPIO_Init+0xec>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	e001      	b.n	80020b4 <HAL_GPIO_Init+0xf0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2bff      	cmp	r3, #255	; 0xff
 80020ba:	d802      	bhi.n	80020c2 <HAL_GPIO_Init+0xfe>
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x104>
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	3b08      	subs	r3, #8
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	210f      	movs	r1, #15
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	6a39      	ldr	r1, [r7, #32]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8096 	beq.w	8002222 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f6:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_GPIO_Init+0x298>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_GPIO_Init+0x298>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6193      	str	r3, [r2, #24]
 8002102:	4b56      	ldr	r3, [pc, #344]	; (800225c <HAL_GPIO_Init+0x298>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800210e:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_GPIO_Init+0x29c>)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4b      	ldr	r2, [pc, #300]	; (8002264 <HAL_GPIO_Init+0x2a0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0x19e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4a      	ldr	r2, [pc, #296]	; (8002268 <HAL_GPIO_Init+0x2a4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00d      	beq.n	800215e <HAL_GPIO_Init+0x19a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a49      	ldr	r2, [pc, #292]	; (800226c <HAL_GPIO_Init+0x2a8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <HAL_GPIO_Init+0x196>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a48      	ldr	r2, [pc, #288]	; (8002270 <HAL_GPIO_Init+0x2ac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_GPIO_Init+0x192>
 8002152:	2303      	movs	r3, #3
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x1a0>
 8002156:	2304      	movs	r3, #4
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x1a0>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x1a0>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x1a0>
 8002162:	2300      	movs	r3, #0
 8002164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002174:	493a      	ldr	r1, [pc, #232]	; (8002260 <HAL_GPIO_Init+0x29c>)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4938      	ldr	r1, [pc, #224]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
 800219a:	e006      	b.n	80021aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800219c:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	4933      	ldr	r1, [pc, #204]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021b6:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	492e      	ldr	r1, [pc, #184]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	4929      	ldr	r1, [pc, #164]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	4924      	ldr	r1, [pc, #144]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
 80021ea:	e006      	b.n	80021fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	491f      	ldr	r1, [pc, #124]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	491a      	ldr	r1, [pc, #104]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	60cb      	str	r3, [r1, #12]
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	43db      	mvns	r3, r3
 800221c:	4915      	ldr	r1, [pc, #84]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 800221e:	4013      	ands	r3, r2
 8002220:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	3301      	adds	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f aed0 	bne.w	8001fd8 <HAL_GPIO_Init+0x14>
  }
}
 8002238:	bf00      	nop
 800223a:	372c      	adds	r7, #44	; 0x2c
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	10210000 	.word	0x10210000
 8002248:	10110000 	.word	0x10110000
 800224c:	10120000 	.word	0x10120000
 8002250:	10310000 	.word	0x10310000
 8002254:	10320000 	.word	0x10320000
 8002258:	10220000 	.word	0x10220000
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000
 8002264:	40010800 	.word	0x40010800
 8002268:	40010c00 	.word	0x40010c00
 800226c:	40011000 	.word	0x40011000
 8002270:	40011400 	.word	0x40011400
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e001      	b.n	800229a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
 80022b2:	4613      	mov	r3, r2
 80022b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b6:	787b      	ldrb	r3, [r7, #1]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022c2:	e003      	b.n	80022cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	041a      	lsls	r2, r3, #16
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	611a      	str	r2, [r3, #16]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f806 	bl	8002308 <HAL_GPIO_EXTI_Callback>
  }
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e26c      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8087 	beq.w	800244a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800233c:	4b92      	ldr	r3, [pc, #584]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b04      	cmp	r3, #4
 8002346:	d00c      	beq.n	8002362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002348:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d112      	bne.n	800237a <HAL_RCC_OscConfig+0x5e>
 8002354:	4b8c      	ldr	r3, [pc, #560]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d10b      	bne.n	800237a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002362:	4b89      	ldr	r3, [pc, #548]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06c      	beq.n	8002448 <HAL_RCC_OscConfig+0x12c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d168      	bne.n	8002448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e246      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x76>
 8002384:	4b80      	ldr	r3, [pc, #512]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7f      	ldr	r2, [pc, #508]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e02e      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x98>
 800239a:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7a      	ldr	r2, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b78      	ldr	r3, [pc, #480]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0xbc>
 80023be:	4b72      	ldr	r3, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a71      	ldr	r2, [pc, #452]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6e      	ldr	r2, [pc, #440]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 80023d8:	4b6b      	ldr	r3, [pc, #428]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6a      	ldr	r2, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a67      	ldr	r2, [pc, #412]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f89a 	bl	8001530 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff f896 	bl	8001530 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1fa      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xe4>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff f886 	bl	8001530 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff f882 	bl	8001530 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1e6      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x10c>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d063      	beq.n	800251e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002456:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002462:	4b49      	ldr	r3, [pc, #292]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d11c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x18c>
 800246e:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x176>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1ba      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4939      	ldr	r1, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	e03a      	b.n	800251e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7ff f83b 	bl	8001530 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f837 	bl	8001530 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e19b      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4927      	ldr	r1, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff f81a 	bl	8001530 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7ff f816 	bl	8001530 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e17a      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d03a      	beq.n	80025a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d019      	beq.n	8002566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b17      	ldr	r3, [pc, #92]	; (8002590 <HAL_RCC_OscConfig+0x274>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002538:	f7fe fffa 	bl	8001530 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002540:	f7fe fff6 	bl	8001530 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e15a      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800255e:	2001      	movs	r0, #1
 8002560:	f000 fada 	bl	8002b18 <RCC_Delay>
 8002564:	e01c      	b.n	80025a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_OscConfig+0x274>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7fe ffe0 	bl	8001530 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002572:	e00f      	b.n	8002594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7fe ffdc 	bl	8001530 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d908      	bls.n	8002594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e140      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	42420000 	.word	0x42420000
 8002590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	4b9e      	ldr	r3, [pc, #632]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e9      	bne.n	8002574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80a6 	beq.w	80026fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b2:	4b97      	ldr	r3, [pc, #604]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	4b94      	ldr	r3, [pc, #592]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a93      	ldr	r2, [pc, #588]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	61d3      	str	r3, [r2, #28]
 80025ca:	4b91      	ldr	r3, [pc, #580]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b8e      	ldr	r3, [pc, #568]	; (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b8b      	ldr	r3, [pc, #556]	; (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a8a      	ldr	r2, [pc, #552]	; (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7fe ff9d 	bl	8001530 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe ff99 	bl	8001530 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	; 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0fd      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b81      	ldr	r3, [pc, #516]	; (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x312>
 8002620:	4b7b      	ldr	r3, [pc, #492]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a7a      	ldr	r2, [pc, #488]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	e02d      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x334>
 8002636:	4b76      	ldr	r3, [pc, #472]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a75      	ldr	r2, [pc, #468]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	4b73      	ldr	r3, [pc, #460]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a72      	ldr	r2, [pc, #456]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	e01c      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x356>
 8002658:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a6c      	ldr	r2, [pc, #432]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a69      	ldr	r2, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e00b      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 8002672:	4b67      	ldr	r3, [pc, #412]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a66      	ldr	r2, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4b64      	ldr	r3, [pc, #400]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a63      	ldr	r2, [pc, #396]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d015      	beq.n	80026be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7fe ff4d 	bl	8001530 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe ff49 	bl	8001530 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0ab      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b0:	4b57      	ldr	r3, [pc, #348]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ee      	beq.n	800269a <HAL_RCC_OscConfig+0x37e>
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7fe ff37 	bl	8001530 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe ff33 	bl	8001530 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e095      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026dc:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ee      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b48      	ldr	r3, [pc, #288]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a47      	ldr	r2, [pc, #284]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8081 	beq.w	8002806 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002704:	4b42      	ldr	r3, [pc, #264]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d061      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d146      	bne.n	80027a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002718:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCC_OscConfig+0x4fc>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7fe ff07 	bl	8001530 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7fe ff03 	bl	8001530 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e067      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	4b35      	ldr	r3, [pc, #212]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d108      	bne.n	8002760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	492d      	ldr	r1, [pc, #180]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a19      	ldr	r1, [r3, #32]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	430b      	orrs	r3, r1
 8002772:	4927      	ldr	r1, [pc, #156]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_RCC_OscConfig+0x4fc>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7fe fed7 	bl	8001530 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe fed3 	bl	8001530 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e037      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x46a>
 80027a4:	e02f      	b.n	8002806 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <HAL_RCC_OscConfig+0x4fc>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fec0 	bl	8001530 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe febc 	bl	8001530 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e020      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x498>
 80027d2:	e018      	b.n	8002806 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e013      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
 8002818:	42420060 	.word	0x42420060

0800281c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d0      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d910      	bls.n	8002860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4965      	ldr	r1, [pc, #404]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b8      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800289a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494d      	ldr	r1, [pc, #308]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d040      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d115      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e073      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06b      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4936      	ldr	r1, [pc, #216]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7fe fe10 	bl	8001530 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe fe0c 	bl	8001530 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e053      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d210      	bcs.n	800296c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0207 	bic.w	r2, r3, #7
 8002952:	4922      	ldr	r1, [pc, #136]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e032      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4916      	ldr	r1, [pc, #88]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029aa:	f000 f821 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029ae:	4601      	mov	r1, r0
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	fa21 f303 	lsr.w	r3, r1, r3
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1cc>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1d0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fd6e 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08004be4 	.word	0x08004be4
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b490      	push	{r4, r7}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029f8:	1d3c      	adds	r4, r7, #4
 80029fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a1a:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d002      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x40>
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x46>
 8002a2e:	e02d      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a32:	623b      	str	r3, [r7, #32]
      break;
 8002a34:	e02d      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	0c9b      	lsrs	r3, r3, #18
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a42:	4413      	add	r3, r2
 8002a44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	0c5b      	lsrs	r3, r3, #17
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a62:	4413      	add	r3, r2
 8002a64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a6e:	fb02 f203 	mul.w	r2, r2, r3
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e004      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	623b      	str	r3, [r7, #32]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a8e:	623b      	str	r3, [r7, #32]
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3728      	adds	r7, #40	; 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc90      	pop	{r4, r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	08004bbc 	.word	0x08004bbc
 8002aa4:	08004bcc 	.word	0x08004bcc
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	003d0900 	.word	0x003d0900

08002ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff2 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4601      	mov	r1, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4a03      	ldr	r2, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08004bf4 	.word	0x08004bf4

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffde 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002af8:	4601      	mov	r1, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0adb      	lsrs	r3, r3, #11
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4a03      	ldr	r2, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08004bf4 	.word	0x08004bf4

08002b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <RCC_Delay+0x34>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <RCC_Delay+0x38>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b34:	bf00      	nop
  }
  while (Delay --);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f9      	bne.n	8002b34 <RCC_Delay+0x1c>
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d07d      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d118      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba8:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a42      	ldr	r2, [pc, #264]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fcbc 	bl	8001530 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	e008      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fe fcb8 	bl	8001530 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e06d      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02e      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d027      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c08:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c0e:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d014      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fc87 	bl	8001530 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fc83 	bl	8001530 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e036      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ee      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4917      	ldr	r1, [pc, #92]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	490b      	ldr	r1, [pc, #44]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	42420440 	.word	0x42420440

08002cc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b08d      	sub	sp, #52	; 0x34
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cc8:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002cca:	f107 040c 	add.w	r4, r7, #12
 8002cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cd4:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	2300      	movs	r3, #0
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d07f      	beq.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d002      	beq.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d048      	beq.n	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002cfc:	e08b      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d04:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d07f      	beq.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	0c9b      	lsrs	r3, r3, #18
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d22:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0c5b      	lsrs	r3, r3, #17
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d4e:	4a37      	ldr	r2, [pc, #220]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	e004      	b.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	4a33      	ldr	r2, [pc, #204]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d76:	d102      	bne.n	8002d7e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d7c:	e048      	b.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d8c:	e040      	b.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	d108      	bne.n	8002db2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db0:	e01f      	b.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002dca:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd0:	e00f      	b.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ddc:	d11a      	bne.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d014      	beq.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002dea:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002df0:	e010      	b.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002df2:	e00f      	b.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002df4:	f7ff fe7c 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	0b9b      	lsrs	r3, r3, #14
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	3301      	adds	r3, #1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002e10:	bf00      	nop
 8002e12:	e000      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002e14:	bf00      	nop
    }
  }
  return (frequency);
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3734      	adds	r7, #52	; 0x34
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd90      	pop	{r4, r7, pc}
 8002e20:	08004bd0 	.word	0x08004bd0
 8002e24:	08004be0 	.word	0x08004be0
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	007a1200 	.word	0x007a1200
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	aaaaaaab 	.word	0xaaaaaaab

08002e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e041      	b.n	8002ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe f936 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fc1c 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d001      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e03a      	b.n	8002f66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_TIM_Base_Start_IT+0x98>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00e      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1a:	d009      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d111      	bne.n	8002f54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d010      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	e007      	b.n	8002f64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e041      	b.n	8003012 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f839 	bl	800301a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 fb7a 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_TIM_PWM_Start+0x24>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e022      	b.n	8003096 <HAL_TIM_PWM_Start+0x6a>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d109      	bne.n	800306a <HAL_TIM_PWM_Start+0x3e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e015      	b.n	8003096 <HAL_TIM_PWM_Start+0x6a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d109      	bne.n	8003084 <HAL_TIM_PWM_Start+0x58>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e008      	b.n	8003096 <HAL_TIM_PWM_Start+0x6a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e05e      	b.n	800315c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PWM_Start+0x82>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ac:	e013      	b.n	80030d6 <HAL_TIM_PWM_Start+0xaa>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d104      	bne.n	80030be <HAL_TIM_PWM_Start+0x92>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030bc:	e00b      	b.n	80030d6 <HAL_TIM_PWM_Start+0xaa>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d104      	bne.n	80030ce <HAL_TIM_PWM_Start+0xa2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030cc:	e003      	b.n	80030d6 <HAL_TIM_PWM_Start+0xaa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2201      	movs	r2, #1
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fd68 	bl	8003bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_TIM_PWM_Start+0x138>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d107      	bne.n	80030fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_TIM_PWM_Start+0x138>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_TIM_PWM_Start+0xfa>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d009      	beq.n	8003126 <HAL_TIM_PWM_Start+0xfa>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a14      	ldr	r2, [pc, #80]	; (8003168 <HAL_TIM_PWM_Start+0x13c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_TIM_PWM_Start+0xfa>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a12      	ldr	r2, [pc, #72]	; (800316c <HAL_TIM_PWM_Start+0x140>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d111      	bne.n	800314a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b06      	cmp	r3, #6
 8003136:	d010      	beq.n	800315a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003148:	e007      	b.n	800315a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800

08003170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0202 	mvn.w	r2, #2
 800319c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa62 	bl	800367c <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa55 	bl	800366a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa64 	bl	800368e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0204 	mvn.w	r2, #4
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa38 	bl	800367c <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa2b 	bl	800366a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa3a 	bl	800368e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b08      	cmp	r3, #8
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b08      	cmp	r3, #8
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0208 	mvn.w	r2, #8
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2204      	movs	r2, #4
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fa0e 	bl	800367c <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa01 	bl	800366a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fa10 	bl	800368e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b10      	cmp	r3, #16
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b10      	cmp	r3, #16
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0210 	mvn.w	r2, #16
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2208      	movs	r2, #8
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9e4 	bl	800367c <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f9d7 	bl	800366a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f9e6 	bl	800368e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10e      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0201 	mvn.w	r2, #1
 80032ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fe6e 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b80      	cmp	r3, #128	; 0x80
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fcd5 	bl	8003cca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9aa 	bl	80036a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b20      	cmp	r3, #32
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b20      	cmp	r3, #32
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0220 	mvn.w	r2, #32
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fca0 	bl	8003cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003396:	2302      	movs	r3, #2
 8003398:	e0ac      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b0c      	cmp	r3, #12
 80033a6:	f200 809f 	bhi.w	80034e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80033aa:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	080033e5 	.word	0x080033e5
 80033b4:	080034e9 	.word	0x080034e9
 80033b8:	080034e9 	.word	0x080034e9
 80033bc:	080034e9 	.word	0x080034e9
 80033c0:	08003425 	.word	0x08003425
 80033c4:	080034e9 	.word	0x080034e9
 80033c8:	080034e9 	.word	0x080034e9
 80033cc:	080034e9 	.word	0x080034e9
 80033d0:	08003467 	.word	0x08003467
 80033d4:	080034e9 	.word	0x080034e9
 80033d8:	080034e9 	.word	0x080034e9
 80033dc:	080034e9 	.word	0x080034e9
 80033e0:	080034a7 	.word	0x080034a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f9c4 	bl	8003778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0208 	orr.w	r2, r2, #8
 80033fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6999      	ldr	r1, [r3, #24]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	619a      	str	r2, [r3, #24]
      break;
 8003422:	e062      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fa0a 	bl	8003844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6999      	ldr	r1, [r3, #24]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	021a      	lsls	r2, r3, #8
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	619a      	str	r2, [r3, #24]
      break;
 8003464:	e041      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fa53 	bl	8003918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0208 	orr.w	r2, r2, #8
 8003480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0204 	bic.w	r2, r2, #4
 8003490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69d9      	ldr	r1, [r3, #28]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	61da      	str	r2, [r3, #28]
      break;
 80034a4:	e021      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fa9d 	bl	80039ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69d9      	ldr	r1, [r3, #28]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	021a      	lsls	r2, r3, #8
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	61da      	str	r2, [r3, #28]
      break;
 80034e6:	e000      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80034e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_TIM_ConfigClockSource+0x18>
 8003510:	2302      	movs	r3, #2
 8003512:	e0a6      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x166>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003532:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800353a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d067      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x120>
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d80b      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x6c>
 8003550:	2b10      	cmp	r3, #16
 8003552:	d073      	beq.n	800363c <HAL_TIM_ConfigClockSource+0x140>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d802      	bhi.n	800355e <HAL_TIM_ConfigClockSource+0x62>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d06f      	beq.n	800363c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800355c:	e078      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800355e:	2b20      	cmp	r3, #32
 8003560:	d06c      	beq.n	800363c <HAL_TIM_ConfigClockSource+0x140>
 8003562:	2b30      	cmp	r3, #48	; 0x30
 8003564:	d06a      	beq.n	800363c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003566:	e073      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003568:	2b70      	cmp	r3, #112	; 0x70
 800356a:	d00d      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0x8c>
 800356c:	2b70      	cmp	r3, #112	; 0x70
 800356e:	d804      	bhi.n	800357a <HAL_TIM_ConfigClockSource+0x7e>
 8003570:	2b50      	cmp	r3, #80	; 0x50
 8003572:	d033      	beq.n	80035dc <HAL_TIM_ConfigClockSource+0xe0>
 8003574:	2b60      	cmp	r3, #96	; 0x60
 8003576:	d041      	beq.n	80035fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003578:	e06a      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357e:	d066      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x152>
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d017      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003586:	e063      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f000 faed 	bl	8003b76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]
      break;
 80035b4:	e04c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f000 fad6 	bl	8003b76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d8:	609a      	str	r2, [r3, #8]
      break;
 80035da:	e039      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f000 fa4d 	bl	8003a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2150      	movs	r1, #80	; 0x50
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 faa4 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 80035fa:	e029      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	461a      	mov	r2, r3
 800360a:	f000 fa6b 	bl	8003ae4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2160      	movs	r1, #96	; 0x60
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fa94 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 800361a:	e019      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	f000 fa2d 	bl	8003a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2140      	movs	r1, #64	; 0x40
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fa84 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 800363a:	e009      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f000 fa7b 	bl	8003b42 <TIM_ITRx_SetConfig>
        break;
 800364c:	e000      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800364e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
	...

080036b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a29      	ldr	r2, [pc, #164]	; (800376c <TIM_Base_SetConfig+0xb8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <TIM_Base_SetConfig+0x30>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d007      	beq.n	80036e4 <TIM_Base_SetConfig+0x30>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a26      	ldr	r2, [pc, #152]	; (8003770 <TIM_Base_SetConfig+0xbc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0x30>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a25      	ldr	r2, [pc, #148]	; (8003774 <TIM_Base_SetConfig+0xc0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d108      	bne.n	80036f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1c      	ldr	r2, [pc, #112]	; (800376c <TIM_Base_SetConfig+0xb8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00b      	beq.n	8003716 <TIM_Base_SetConfig+0x62>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003704:	d007      	beq.n	8003716 <TIM_Base_SetConfig+0x62>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <TIM_Base_SetConfig+0xbc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_Base_SetConfig+0x62>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <TIM_Base_SetConfig+0xc0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d108      	bne.n	8003728 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a07      	ldr	r2, [pc, #28]	; (800376c <TIM_Base_SetConfig+0xb8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800

08003778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f023 0201 	bic.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 0302 	bic.w	r3, r3, #2
 80037c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <TIM_OC1_SetConfig+0xc8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d10c      	bne.n	80037ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0308 	bic.w	r3, r3, #8
 80037da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a13      	ldr	r2, [pc, #76]	; (8003840 <TIM_OC1_SetConfig+0xc8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d111      	bne.n	800381a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	621a      	str	r2, [r3, #32]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40012c00 	.word	0x40012c00

08003844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0210 	bic.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0320 	bic.w	r3, r3, #32
 800388e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <TIM_OC2_SetConfig+0xd0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d10d      	bne.n	80038c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a14      	ldr	r2, [pc, #80]	; (8003914 <TIM_OC2_SetConfig+0xd0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d113      	bne.n	80038f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00

08003918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <TIM_OC3_SetConfig+0xd0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800397c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <TIM_OC3_SetConfig+0xd0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d113      	bne.n	80039c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40012c00 	.word	0x40012c00

080039ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <TIM_OC4_SetConfig+0x98>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	40012c00 	.word	0x40012c00

08003a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0201 	bic.w	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f023 030a 	bic.w	r3, r3, #10
 8003ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 0210 	bic.w	r2, r3, #16
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	031b      	lsls	r3, r3, #12
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	621a      	str	r2, [r3, #32]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f043 0307 	orr.w	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b087      	sub	sp, #28
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	021a      	lsls	r2, r3, #8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	609a      	str	r2, [r3, #8]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	431a      	orrs	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e046      	b.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d009      	beq.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10c      	bne.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800

08003cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e03f      	b.n	8003d6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd faa8 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f905 	bl	8003f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b08a      	sub	sp, #40	; 0x28
 8003d7a:	af02      	add	r7, sp, #8
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d17c      	bne.n	8003e90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_UART_Transmit+0x2c>
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e075      	b.n	8003e92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_UART_Transmit+0x3e>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e06e      	b.n	8003e92 <HAL_UART_Transmit+0x11c>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2221      	movs	r2, #33	; 0x21
 8003dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003dca:	f7fd fbb1 	bl	8001530 <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	88fa      	ldrh	r2, [r7, #6]
 8003dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d108      	bne.n	8003df8 <HAL_UART_Transmit+0x82>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e003      	b.n	8003e00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e08:	e02a      	b.n	8003e60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f840 	bl	8003e9a <UART_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e036      	b.n	8003e92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	e007      	b.n	8003e52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1cf      	bne.n	8003e0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2140      	movs	r1, #64	; 0x40
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f810 	bl	8003e9a <UART_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e006      	b.n	8003e92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eaa:	e02c      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d028      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <UART_WaitOnFlagUntilTimeout+0x30>
 8003eba:	f7fd fb39 	bl	8001530 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d21d      	bcs.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ed8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e00f      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d0c3      	beq.n	8003eac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f6a:	f023 030c 	bic.w	r3, r3, #12
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <UART_SetConfig+0x114>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f98:	f7fe fdaa 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	e002      	b.n	8003fa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fe fd92 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009a      	lsls	r2, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	4a22      	ldr	r2, [pc, #136]	; (8004048 <UART_SetConfig+0x118>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	0119      	lsls	r1, r3, #4
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <UART_SetConfig+0x118>)
 8003fde:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	2064      	movs	r0, #100	; 0x64
 8003fe6:	fb00 f303 	mul.w	r3, r0, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	3332      	adds	r3, #50	; 0x32
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <UART_SetConfig+0x118>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffc:	4419      	add	r1, r3
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009a      	lsls	r2, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	fbb2 f2f3 	udiv	r2, r2, r3
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <UART_SetConfig+0x118>)
 8004016:	fba3 0302 	umull	r0, r3, r3, r2
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2064      	movs	r0, #100	; 0x64
 800401e:	fb00 f303 	mul.w	r3, r0, r3
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	3332      	adds	r3, #50	; 0x32
 8004028:	4a07      	ldr	r2, [pc, #28]	; (8004048 <UART_SetConfig+0x118>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	440a      	add	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40013800 	.word	0x40013800
 8004048:	51eb851f 	.word	0x51eb851f

0800404c <__errno>:
 800404c:	4b01      	ldr	r3, [pc, #4]	; (8004054 <__errno+0x8>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	2000000c 	.word	0x2000000c

08004058 <__libc_init_array>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	2500      	movs	r5, #0
 800405c:	4e0c      	ldr	r6, [pc, #48]	; (8004090 <__libc_init_array+0x38>)
 800405e:	4c0d      	ldr	r4, [pc, #52]	; (8004094 <__libc_init_array+0x3c>)
 8004060:	1ba4      	subs	r4, r4, r6
 8004062:	10a4      	asrs	r4, r4, #2
 8004064:	42a5      	cmp	r5, r4
 8004066:	d109      	bne.n	800407c <__libc_init_array+0x24>
 8004068:	f000 fcca 	bl	8004a00 <_init>
 800406c:	2500      	movs	r5, #0
 800406e:	4e0a      	ldr	r6, [pc, #40]	; (8004098 <__libc_init_array+0x40>)
 8004070:	4c0a      	ldr	r4, [pc, #40]	; (800409c <__libc_init_array+0x44>)
 8004072:	1ba4      	subs	r4, r4, r6
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	42a5      	cmp	r5, r4
 8004078:	d105      	bne.n	8004086 <__libc_init_array+0x2e>
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004080:	4798      	blx	r3
 8004082:	3501      	adds	r5, #1
 8004084:	e7ee      	b.n	8004064 <__libc_init_array+0xc>
 8004086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800408a:	4798      	blx	r3
 800408c:	3501      	adds	r5, #1
 800408e:	e7f2      	b.n	8004076 <__libc_init_array+0x1e>
 8004090:	08004c30 	.word	0x08004c30
 8004094:	08004c30 	.word	0x08004c30
 8004098:	08004c30 	.word	0x08004c30
 800409c:	08004c34 	.word	0x08004c34

080040a0 <memcpy>:
 80040a0:	b510      	push	{r4, lr}
 80040a2:	1e43      	subs	r3, r0, #1
 80040a4:	440a      	add	r2, r1
 80040a6:	4291      	cmp	r1, r2
 80040a8:	d100      	bne.n	80040ac <memcpy+0xc>
 80040aa:	bd10      	pop	{r4, pc}
 80040ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b4:	e7f7      	b.n	80040a6 <memcpy+0x6>

080040b6 <memset>:
 80040b6:	4603      	mov	r3, r0
 80040b8:	4402      	add	r2, r0
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d100      	bne.n	80040c0 <memset+0xa>
 80040be:	4770      	bx	lr
 80040c0:	f803 1b01 	strb.w	r1, [r3], #1
 80040c4:	e7f9      	b.n	80040ba <memset+0x4>
	...

080040c8 <srand>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <srand+0x38>)
 80040cc:	4605      	mov	r5, r0
 80040ce:	681c      	ldr	r4, [r3, #0]
 80040d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040d2:	b97b      	cbnz	r3, 80040f4 <srand+0x2c>
 80040d4:	2018      	movs	r0, #24
 80040d6:	f000 f89b 	bl	8004210 <malloc>
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <srand+0x3c>)
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <srand+0x40>)
 80040de:	63a0      	str	r0, [r4, #56]	; 0x38
 80040e0:	e9c0 2300 	strd	r2, r3, [r0]
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <srand+0x44>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	6083      	str	r3, [r0, #8]
 80040ea:	230b      	movs	r3, #11
 80040ec:	8183      	strh	r3, [r0, #12]
 80040ee:	2300      	movs	r3, #0
 80040f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80040f4:	2200      	movs	r2, #0
 80040f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040f8:	611d      	str	r5, [r3, #16]
 80040fa:	615a      	str	r2, [r3, #20]
 80040fc:	bd38      	pop	{r3, r4, r5, pc}
 80040fe:	bf00      	nop
 8004100:	2000000c 	.word	0x2000000c
 8004104:	abcd330e 	.word	0xabcd330e
 8004108:	e66d1234 	.word	0xe66d1234
 800410c:	0005deec 	.word	0x0005deec

08004110 <rand>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <rand+0x50>)
 8004114:	681c      	ldr	r4, [r3, #0]
 8004116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004118:	b97b      	cbnz	r3, 800413a <rand+0x2a>
 800411a:	2018      	movs	r0, #24
 800411c:	f000 f878 	bl	8004210 <malloc>
 8004120:	4a10      	ldr	r2, [pc, #64]	; (8004164 <rand+0x54>)
 8004122:	4b11      	ldr	r3, [pc, #68]	; (8004168 <rand+0x58>)
 8004124:	63a0      	str	r0, [r4, #56]	; 0x38
 8004126:	e9c0 2300 	strd	r2, r3, [r0]
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <rand+0x5c>)
 800412c:	2201      	movs	r2, #1
 800412e:	6083      	str	r3, [r0, #8]
 8004130:	230b      	movs	r3, #11
 8004132:	8183      	strh	r3, [r0, #12]
 8004134:	2300      	movs	r3, #0
 8004136:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800413a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800413c:	480c      	ldr	r0, [pc, #48]	; (8004170 <rand+0x60>)
 800413e:	690a      	ldr	r2, [r1, #16]
 8004140:	694b      	ldr	r3, [r1, #20]
 8004142:	4350      	muls	r0, r2
 8004144:	4c0b      	ldr	r4, [pc, #44]	; (8004174 <rand+0x64>)
 8004146:	fb04 0003 	mla	r0, r4, r3, r0
 800414a:	fba2 2304 	umull	r2, r3, r2, r4
 800414e:	4403      	add	r3, r0
 8004150:	1c54      	adds	r4, r2, #1
 8004152:	f143 0500 	adc.w	r5, r3, #0
 8004156:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800415a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	2000000c 	.word	0x2000000c
 8004164:	abcd330e 	.word	0xabcd330e
 8004168:	e66d1234 	.word	0xe66d1234
 800416c:	0005deec 	.word	0x0005deec
 8004170:	5851f42d 	.word	0x5851f42d
 8004174:	4c957f2d 	.word	0x4c957f2d

08004178 <siprintf>:
 8004178:	b40e      	push	{r1, r2, r3}
 800417a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800417e:	b500      	push	{lr}
 8004180:	b09c      	sub	sp, #112	; 0x70
 8004182:	ab1d      	add	r3, sp, #116	; 0x74
 8004184:	9002      	str	r0, [sp, #8]
 8004186:	9006      	str	r0, [sp, #24]
 8004188:	9107      	str	r1, [sp, #28]
 800418a:	9104      	str	r1, [sp, #16]
 800418c:	4808      	ldr	r0, [pc, #32]	; (80041b0 <siprintf+0x38>)
 800418e:	4909      	ldr	r1, [pc, #36]	; (80041b4 <siprintf+0x3c>)
 8004190:	f853 2b04 	ldr.w	r2, [r3], #4
 8004194:	9105      	str	r1, [sp, #20]
 8004196:	6800      	ldr	r0, [r0, #0]
 8004198:	a902      	add	r1, sp, #8
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	f000 f940 	bl	8004420 <_svfiprintf_r>
 80041a0:	2200      	movs	r2, #0
 80041a2:	9b02      	ldr	r3, [sp, #8]
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	b01c      	add	sp, #112	; 0x70
 80041a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041ac:	b003      	add	sp, #12
 80041ae:	4770      	bx	lr
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	ffff0208 	.word	0xffff0208

080041b8 <time>:
 80041b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <time+0x30>)
 80041bc:	4604      	mov	r4, r0
 80041be:	2200      	movs	r2, #0
 80041c0:	4669      	mov	r1, sp
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	f000 f812 	bl	80041ec <_gettimeofday_r>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	da05      	bge.n	80041d8 <time+0x20>
 80041cc:	f04f 32ff 	mov.w	r2, #4294967295
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	e9cd 2300 	strd	r2, r3, [sp]
 80041d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041dc:	b10c      	cbz	r4, 80041e2 <time+0x2a>
 80041de:	e9c4 0100 	strd	r0, r1, [r4]
 80041e2:	b004      	add	sp, #16
 80041e4:	bd10      	pop	{r4, pc}
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c

080041ec <_gettimeofday_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	2300      	movs	r3, #0
 80041f0:	4c06      	ldr	r4, [pc, #24]	; (800420c <_gettimeofday_r+0x20>)
 80041f2:	4605      	mov	r5, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	f000 fbf9 	bl	80049f0 <_gettimeofday>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	d102      	bne.n	8004208 <_gettimeofday_r+0x1c>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	b103      	cbz	r3, 8004208 <_gettimeofday_r+0x1c>
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	bd38      	pop	{r3, r4, r5, pc}
 800420a:	bf00      	nop
 800420c:	2000030c 	.word	0x2000030c

08004210 <malloc>:
 8004210:	4b02      	ldr	r3, [pc, #8]	; (800421c <malloc+0xc>)
 8004212:	4601      	mov	r1, r0
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	f000 b84f 	b.w	80042b8 <_malloc_r>
 800421a:	bf00      	nop
 800421c:	2000000c 	.word	0x2000000c

08004220 <_free_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4605      	mov	r5, r0
 8004224:	2900      	cmp	r1, #0
 8004226:	d043      	beq.n	80042b0 <_free_r+0x90>
 8004228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422c:	1f0c      	subs	r4, r1, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfb8      	it	lt
 8004232:	18e4      	addlt	r4, r4, r3
 8004234:	f000 fbab 	bl	800498e <__malloc_lock>
 8004238:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <_free_r+0x94>)
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	4610      	mov	r0, r2
 800423e:	b933      	cbnz	r3, 800424e <_free_r+0x2e>
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	6014      	str	r4, [r2, #0]
 8004244:	4628      	mov	r0, r5
 8004246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800424a:	f000 bba1 	b.w	8004990 <__malloc_unlock>
 800424e:	42a3      	cmp	r3, r4
 8004250:	d90b      	bls.n	800426a <_free_r+0x4a>
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	1862      	adds	r2, r4, r1
 8004256:	4293      	cmp	r3, r2
 8004258:	bf01      	itttt	eq
 800425a:	681a      	ldreq	r2, [r3, #0]
 800425c:	685b      	ldreq	r3, [r3, #4]
 800425e:	1852      	addeq	r2, r2, r1
 8004260:	6022      	streq	r2, [r4, #0]
 8004262:	6063      	str	r3, [r4, #4]
 8004264:	6004      	str	r4, [r0, #0]
 8004266:	e7ed      	b.n	8004244 <_free_r+0x24>
 8004268:	4613      	mov	r3, r2
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	b10a      	cbz	r2, 8004272 <_free_r+0x52>
 800426e:	42a2      	cmp	r2, r4
 8004270:	d9fa      	bls.n	8004268 <_free_r+0x48>
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	1858      	adds	r0, r3, r1
 8004276:	42a0      	cmp	r0, r4
 8004278:	d10b      	bne.n	8004292 <_free_r+0x72>
 800427a:	6820      	ldr	r0, [r4, #0]
 800427c:	4401      	add	r1, r0
 800427e:	1858      	adds	r0, r3, r1
 8004280:	4282      	cmp	r2, r0
 8004282:	6019      	str	r1, [r3, #0]
 8004284:	d1de      	bne.n	8004244 <_free_r+0x24>
 8004286:	6810      	ldr	r0, [r2, #0]
 8004288:	6852      	ldr	r2, [r2, #4]
 800428a:	4401      	add	r1, r0
 800428c:	6019      	str	r1, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	e7d8      	b.n	8004244 <_free_r+0x24>
 8004292:	d902      	bls.n	800429a <_free_r+0x7a>
 8004294:	230c      	movs	r3, #12
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	e7d4      	b.n	8004244 <_free_r+0x24>
 800429a:	6820      	ldr	r0, [r4, #0]
 800429c:	1821      	adds	r1, r4, r0
 800429e:	428a      	cmp	r2, r1
 80042a0:	bf01      	itttt	eq
 80042a2:	6811      	ldreq	r1, [r2, #0]
 80042a4:	6852      	ldreq	r2, [r2, #4]
 80042a6:	1809      	addeq	r1, r1, r0
 80042a8:	6021      	streq	r1, [r4, #0]
 80042aa:	6062      	str	r2, [r4, #4]
 80042ac:	605c      	str	r4, [r3, #4]
 80042ae:	e7c9      	b.n	8004244 <_free_r+0x24>
 80042b0:	bd38      	pop	{r3, r4, r5, pc}
 80042b2:	bf00      	nop
 80042b4:	20000090 	.word	0x20000090

080042b8 <_malloc_r>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	1ccd      	adds	r5, r1, #3
 80042bc:	f025 0503 	bic.w	r5, r5, #3
 80042c0:	3508      	adds	r5, #8
 80042c2:	2d0c      	cmp	r5, #12
 80042c4:	bf38      	it	cc
 80042c6:	250c      	movcc	r5, #12
 80042c8:	2d00      	cmp	r5, #0
 80042ca:	4606      	mov	r6, r0
 80042cc:	db01      	blt.n	80042d2 <_malloc_r+0x1a>
 80042ce:	42a9      	cmp	r1, r5
 80042d0:	d903      	bls.n	80042da <_malloc_r+0x22>
 80042d2:	230c      	movs	r3, #12
 80042d4:	6033      	str	r3, [r6, #0]
 80042d6:	2000      	movs	r0, #0
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	f000 fb58 	bl	800498e <__malloc_lock>
 80042de:	4a21      	ldr	r2, [pc, #132]	; (8004364 <_malloc_r+0xac>)
 80042e0:	6814      	ldr	r4, [r2, #0]
 80042e2:	4621      	mov	r1, r4
 80042e4:	b991      	cbnz	r1, 800430c <_malloc_r+0x54>
 80042e6:	4c20      	ldr	r4, [pc, #128]	; (8004368 <_malloc_r+0xb0>)
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	b91b      	cbnz	r3, 80042f4 <_malloc_r+0x3c>
 80042ec:	4630      	mov	r0, r6
 80042ee:	f000 fb17 	bl	8004920 <_sbrk_r>
 80042f2:	6020      	str	r0, [r4, #0]
 80042f4:	4629      	mov	r1, r5
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 fb12 	bl	8004920 <_sbrk_r>
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	d124      	bne.n	800434a <_malloc_r+0x92>
 8004300:	230c      	movs	r3, #12
 8004302:	4630      	mov	r0, r6
 8004304:	6033      	str	r3, [r6, #0]
 8004306:	f000 fb43 	bl	8004990 <__malloc_unlock>
 800430a:	e7e4      	b.n	80042d6 <_malloc_r+0x1e>
 800430c:	680b      	ldr	r3, [r1, #0]
 800430e:	1b5b      	subs	r3, r3, r5
 8004310:	d418      	bmi.n	8004344 <_malloc_r+0x8c>
 8004312:	2b0b      	cmp	r3, #11
 8004314:	d90f      	bls.n	8004336 <_malloc_r+0x7e>
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	18cc      	adds	r4, r1, r3
 800431a:	50cd      	str	r5, [r1, r3]
 800431c:	4630      	mov	r0, r6
 800431e:	f000 fb37 	bl	8004990 <__malloc_unlock>
 8004322:	f104 000b 	add.w	r0, r4, #11
 8004326:	1d23      	adds	r3, r4, #4
 8004328:	f020 0007 	bic.w	r0, r0, #7
 800432c:	1ac3      	subs	r3, r0, r3
 800432e:	d0d3      	beq.n	80042d8 <_malloc_r+0x20>
 8004330:	425a      	negs	r2, r3
 8004332:	50e2      	str	r2, [r4, r3]
 8004334:	e7d0      	b.n	80042d8 <_malloc_r+0x20>
 8004336:	684b      	ldr	r3, [r1, #4]
 8004338:	428c      	cmp	r4, r1
 800433a:	bf16      	itet	ne
 800433c:	6063      	strne	r3, [r4, #4]
 800433e:	6013      	streq	r3, [r2, #0]
 8004340:	460c      	movne	r4, r1
 8004342:	e7eb      	b.n	800431c <_malloc_r+0x64>
 8004344:	460c      	mov	r4, r1
 8004346:	6849      	ldr	r1, [r1, #4]
 8004348:	e7cc      	b.n	80042e4 <_malloc_r+0x2c>
 800434a:	1cc4      	adds	r4, r0, #3
 800434c:	f024 0403 	bic.w	r4, r4, #3
 8004350:	42a0      	cmp	r0, r4
 8004352:	d005      	beq.n	8004360 <_malloc_r+0xa8>
 8004354:	1a21      	subs	r1, r4, r0
 8004356:	4630      	mov	r0, r6
 8004358:	f000 fae2 	bl	8004920 <_sbrk_r>
 800435c:	3001      	adds	r0, #1
 800435e:	d0cf      	beq.n	8004300 <_malloc_r+0x48>
 8004360:	6025      	str	r5, [r4, #0]
 8004362:	e7db      	b.n	800431c <_malloc_r+0x64>
 8004364:	20000090 	.word	0x20000090
 8004368:	20000094 	.word	0x20000094

0800436c <__ssputs_r>:
 800436c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004370:	688e      	ldr	r6, [r1, #8]
 8004372:	4682      	mov	sl, r0
 8004374:	429e      	cmp	r6, r3
 8004376:	460c      	mov	r4, r1
 8004378:	4690      	mov	r8, r2
 800437a:	4699      	mov	r9, r3
 800437c:	d837      	bhi.n	80043ee <__ssputs_r+0x82>
 800437e:	898a      	ldrh	r2, [r1, #12]
 8004380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004384:	d031      	beq.n	80043ea <__ssputs_r+0x7e>
 8004386:	2302      	movs	r3, #2
 8004388:	6825      	ldr	r5, [r4, #0]
 800438a:	6909      	ldr	r1, [r1, #16]
 800438c:	1a6f      	subs	r7, r5, r1
 800438e:	6965      	ldr	r5, [r4, #20]
 8004390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004394:	fb95 f5f3 	sdiv	r5, r5, r3
 8004398:	f109 0301 	add.w	r3, r9, #1
 800439c:	443b      	add	r3, r7
 800439e:	429d      	cmp	r5, r3
 80043a0:	bf38      	it	cc
 80043a2:	461d      	movcc	r5, r3
 80043a4:	0553      	lsls	r3, r2, #21
 80043a6:	d530      	bpl.n	800440a <__ssputs_r+0x9e>
 80043a8:	4629      	mov	r1, r5
 80043aa:	f7ff ff85 	bl	80042b8 <_malloc_r>
 80043ae:	4606      	mov	r6, r0
 80043b0:	b950      	cbnz	r0, 80043c8 <__ssputs_r+0x5c>
 80043b2:	230c      	movs	r3, #12
 80043b4:	f04f 30ff 	mov.w	r0, #4294967295
 80043b8:	f8ca 3000 	str.w	r3, [sl]
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c2:	81a3      	strh	r3, [r4, #12]
 80043c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c8:	463a      	mov	r2, r7
 80043ca:	6921      	ldr	r1, [r4, #16]
 80043cc:	f7ff fe68 	bl	80040a0 <memcpy>
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	81a3      	strh	r3, [r4, #12]
 80043dc:	6126      	str	r6, [r4, #16]
 80043de:	443e      	add	r6, r7
 80043e0:	6026      	str	r6, [r4, #0]
 80043e2:	464e      	mov	r6, r9
 80043e4:	6165      	str	r5, [r4, #20]
 80043e6:	1bed      	subs	r5, r5, r7
 80043e8:	60a5      	str	r5, [r4, #8]
 80043ea:	454e      	cmp	r6, r9
 80043ec:	d900      	bls.n	80043f0 <__ssputs_r+0x84>
 80043ee:	464e      	mov	r6, r9
 80043f0:	4632      	mov	r2, r6
 80043f2:	4641      	mov	r1, r8
 80043f4:	6820      	ldr	r0, [r4, #0]
 80043f6:	f000 fab1 	bl	800495c <memmove>
 80043fa:	68a3      	ldr	r3, [r4, #8]
 80043fc:	2000      	movs	r0, #0
 80043fe:	1b9b      	subs	r3, r3, r6
 8004400:	60a3      	str	r3, [r4, #8]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	441e      	add	r6, r3
 8004406:	6026      	str	r6, [r4, #0]
 8004408:	e7dc      	b.n	80043c4 <__ssputs_r+0x58>
 800440a:	462a      	mov	r2, r5
 800440c:	f000 fac1 	bl	8004992 <_realloc_r>
 8004410:	4606      	mov	r6, r0
 8004412:	2800      	cmp	r0, #0
 8004414:	d1e2      	bne.n	80043dc <__ssputs_r+0x70>
 8004416:	6921      	ldr	r1, [r4, #16]
 8004418:	4650      	mov	r0, sl
 800441a:	f7ff ff01 	bl	8004220 <_free_r>
 800441e:	e7c8      	b.n	80043b2 <__ssputs_r+0x46>

08004420 <_svfiprintf_r>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	461d      	mov	r5, r3
 8004426:	898b      	ldrh	r3, [r1, #12]
 8004428:	b09d      	sub	sp, #116	; 0x74
 800442a:	061f      	lsls	r7, r3, #24
 800442c:	4680      	mov	r8, r0
 800442e:	460c      	mov	r4, r1
 8004430:	4616      	mov	r6, r2
 8004432:	d50f      	bpl.n	8004454 <_svfiprintf_r+0x34>
 8004434:	690b      	ldr	r3, [r1, #16]
 8004436:	b96b      	cbnz	r3, 8004454 <_svfiprintf_r+0x34>
 8004438:	2140      	movs	r1, #64	; 0x40
 800443a:	f7ff ff3d 	bl	80042b8 <_malloc_r>
 800443e:	6020      	str	r0, [r4, #0]
 8004440:	6120      	str	r0, [r4, #16]
 8004442:	b928      	cbnz	r0, 8004450 <_svfiprintf_r+0x30>
 8004444:	230c      	movs	r3, #12
 8004446:	f8c8 3000 	str.w	r3, [r8]
 800444a:	f04f 30ff 	mov.w	r0, #4294967295
 800444e:	e0c8      	b.n	80045e2 <_svfiprintf_r+0x1c2>
 8004450:	2340      	movs	r3, #64	; 0x40
 8004452:	6163      	str	r3, [r4, #20]
 8004454:	2300      	movs	r3, #0
 8004456:	9309      	str	r3, [sp, #36]	; 0x24
 8004458:	2320      	movs	r3, #32
 800445a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800445e:	2330      	movs	r3, #48	; 0x30
 8004460:	f04f 0b01 	mov.w	fp, #1
 8004464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004468:	9503      	str	r5, [sp, #12]
 800446a:	4637      	mov	r7, r6
 800446c:	463d      	mov	r5, r7
 800446e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004472:	b10b      	cbz	r3, 8004478 <_svfiprintf_r+0x58>
 8004474:	2b25      	cmp	r3, #37	; 0x25
 8004476:	d13e      	bne.n	80044f6 <_svfiprintf_r+0xd6>
 8004478:	ebb7 0a06 	subs.w	sl, r7, r6
 800447c:	d00b      	beq.n	8004496 <_svfiprintf_r+0x76>
 800447e:	4653      	mov	r3, sl
 8004480:	4632      	mov	r2, r6
 8004482:	4621      	mov	r1, r4
 8004484:	4640      	mov	r0, r8
 8004486:	f7ff ff71 	bl	800436c <__ssputs_r>
 800448a:	3001      	adds	r0, #1
 800448c:	f000 80a4 	beq.w	80045d8 <_svfiprintf_r+0x1b8>
 8004490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004492:	4453      	add	r3, sl
 8004494:	9309      	str	r3, [sp, #36]	; 0x24
 8004496:	783b      	ldrb	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 809d 	beq.w	80045d8 <_svfiprintf_r+0x1b8>
 800449e:	2300      	movs	r3, #0
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a8:	9304      	str	r3, [sp, #16]
 80044aa:	9307      	str	r3, [sp, #28]
 80044ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044b0:	931a      	str	r3, [sp, #104]	; 0x68
 80044b2:	462f      	mov	r7, r5
 80044b4:	2205      	movs	r2, #5
 80044b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80044ba:	4850      	ldr	r0, [pc, #320]	; (80045fc <_svfiprintf_r+0x1dc>)
 80044bc:	f000 fa40 	bl	8004940 <memchr>
 80044c0:	9b04      	ldr	r3, [sp, #16]
 80044c2:	b9d0      	cbnz	r0, 80044fa <_svfiprintf_r+0xda>
 80044c4:	06d9      	lsls	r1, r3, #27
 80044c6:	bf44      	itt	mi
 80044c8:	2220      	movmi	r2, #32
 80044ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044ce:	071a      	lsls	r2, r3, #28
 80044d0:	bf44      	itt	mi
 80044d2:	222b      	movmi	r2, #43	; 0x2b
 80044d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044d8:	782a      	ldrb	r2, [r5, #0]
 80044da:	2a2a      	cmp	r2, #42	; 0x2a
 80044dc:	d015      	beq.n	800450a <_svfiprintf_r+0xea>
 80044de:	462f      	mov	r7, r5
 80044e0:	2000      	movs	r0, #0
 80044e2:	250a      	movs	r5, #10
 80044e4:	9a07      	ldr	r2, [sp, #28]
 80044e6:	4639      	mov	r1, r7
 80044e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ec:	3b30      	subs	r3, #48	; 0x30
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d94d      	bls.n	800458e <_svfiprintf_r+0x16e>
 80044f2:	b1b8      	cbz	r0, 8004524 <_svfiprintf_r+0x104>
 80044f4:	e00f      	b.n	8004516 <_svfiprintf_r+0xf6>
 80044f6:	462f      	mov	r7, r5
 80044f8:	e7b8      	b.n	800446c <_svfiprintf_r+0x4c>
 80044fa:	4a40      	ldr	r2, [pc, #256]	; (80045fc <_svfiprintf_r+0x1dc>)
 80044fc:	463d      	mov	r5, r7
 80044fe:	1a80      	subs	r0, r0, r2
 8004500:	fa0b f000 	lsl.w	r0, fp, r0
 8004504:	4318      	orrs	r0, r3
 8004506:	9004      	str	r0, [sp, #16]
 8004508:	e7d3      	b.n	80044b2 <_svfiprintf_r+0x92>
 800450a:	9a03      	ldr	r2, [sp, #12]
 800450c:	1d11      	adds	r1, r2, #4
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	9103      	str	r1, [sp, #12]
 8004512:	2a00      	cmp	r2, #0
 8004514:	db01      	blt.n	800451a <_svfiprintf_r+0xfa>
 8004516:	9207      	str	r2, [sp, #28]
 8004518:	e004      	b.n	8004524 <_svfiprintf_r+0x104>
 800451a:	4252      	negs	r2, r2
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	9207      	str	r2, [sp, #28]
 8004522:	9304      	str	r3, [sp, #16]
 8004524:	783b      	ldrb	r3, [r7, #0]
 8004526:	2b2e      	cmp	r3, #46	; 0x2e
 8004528:	d10c      	bne.n	8004544 <_svfiprintf_r+0x124>
 800452a:	787b      	ldrb	r3, [r7, #1]
 800452c:	2b2a      	cmp	r3, #42	; 0x2a
 800452e:	d133      	bne.n	8004598 <_svfiprintf_r+0x178>
 8004530:	9b03      	ldr	r3, [sp, #12]
 8004532:	3702      	adds	r7, #2
 8004534:	1d1a      	adds	r2, r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	9203      	str	r2, [sp, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	bfb8      	it	lt
 800453e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004542:	9305      	str	r3, [sp, #20]
 8004544:	4d2e      	ldr	r5, [pc, #184]	; (8004600 <_svfiprintf_r+0x1e0>)
 8004546:	2203      	movs	r2, #3
 8004548:	7839      	ldrb	r1, [r7, #0]
 800454a:	4628      	mov	r0, r5
 800454c:	f000 f9f8 	bl	8004940 <memchr>
 8004550:	b138      	cbz	r0, 8004562 <_svfiprintf_r+0x142>
 8004552:	2340      	movs	r3, #64	; 0x40
 8004554:	1b40      	subs	r0, r0, r5
 8004556:	fa03 f000 	lsl.w	r0, r3, r0
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	3701      	adds	r7, #1
 800455e:	4303      	orrs	r3, r0
 8004560:	9304      	str	r3, [sp, #16]
 8004562:	7839      	ldrb	r1, [r7, #0]
 8004564:	2206      	movs	r2, #6
 8004566:	4827      	ldr	r0, [pc, #156]	; (8004604 <_svfiprintf_r+0x1e4>)
 8004568:	1c7e      	adds	r6, r7, #1
 800456a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800456e:	f000 f9e7 	bl	8004940 <memchr>
 8004572:	2800      	cmp	r0, #0
 8004574:	d038      	beq.n	80045e8 <_svfiprintf_r+0x1c8>
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <_svfiprintf_r+0x1e8>)
 8004578:	bb13      	cbnz	r3, 80045c0 <_svfiprintf_r+0x1a0>
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	3307      	adds	r3, #7
 800457e:	f023 0307 	bic.w	r3, r3, #7
 8004582:	3308      	adds	r3, #8
 8004584:	9303      	str	r3, [sp, #12]
 8004586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004588:	444b      	add	r3, r9
 800458a:	9309      	str	r3, [sp, #36]	; 0x24
 800458c:	e76d      	b.n	800446a <_svfiprintf_r+0x4a>
 800458e:	fb05 3202 	mla	r2, r5, r2, r3
 8004592:	2001      	movs	r0, #1
 8004594:	460f      	mov	r7, r1
 8004596:	e7a6      	b.n	80044e6 <_svfiprintf_r+0xc6>
 8004598:	2300      	movs	r3, #0
 800459a:	250a      	movs	r5, #10
 800459c:	4619      	mov	r1, r3
 800459e:	3701      	adds	r7, #1
 80045a0:	9305      	str	r3, [sp, #20]
 80045a2:	4638      	mov	r0, r7
 80045a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a8:	3a30      	subs	r2, #48	; 0x30
 80045aa:	2a09      	cmp	r2, #9
 80045ac:	d903      	bls.n	80045b6 <_svfiprintf_r+0x196>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0c8      	beq.n	8004544 <_svfiprintf_r+0x124>
 80045b2:	9105      	str	r1, [sp, #20]
 80045b4:	e7c6      	b.n	8004544 <_svfiprintf_r+0x124>
 80045b6:	fb05 2101 	mla	r1, r5, r1, r2
 80045ba:	2301      	movs	r3, #1
 80045bc:	4607      	mov	r7, r0
 80045be:	e7f0      	b.n	80045a2 <_svfiprintf_r+0x182>
 80045c0:	ab03      	add	r3, sp, #12
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	4622      	mov	r2, r4
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <_svfiprintf_r+0x1ec>)
 80045c8:	a904      	add	r1, sp, #16
 80045ca:	4640      	mov	r0, r8
 80045cc:	f3af 8000 	nop.w
 80045d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045d4:	4681      	mov	r9, r0
 80045d6:	d1d6      	bne.n	8004586 <_svfiprintf_r+0x166>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	065b      	lsls	r3, r3, #25
 80045dc:	f53f af35 	bmi.w	800444a <_svfiprintf_r+0x2a>
 80045e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045e2:	b01d      	add	sp, #116	; 0x74
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e8:	ab03      	add	r3, sp, #12
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4622      	mov	r2, r4
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <_svfiprintf_r+0x1ec>)
 80045f0:	a904      	add	r1, sp, #16
 80045f2:	4640      	mov	r0, r8
 80045f4:	f000 f882 	bl	80046fc <_printf_i>
 80045f8:	e7ea      	b.n	80045d0 <_svfiprintf_r+0x1b0>
 80045fa:	bf00      	nop
 80045fc:	08004bfc 	.word	0x08004bfc
 8004600:	08004c02 	.word	0x08004c02
 8004604:	08004c06 	.word	0x08004c06
 8004608:	00000000 	.word	0x00000000
 800460c:	0800436d 	.word	0x0800436d

08004610 <_printf_common>:
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	4691      	mov	r9, r2
 8004616:	461f      	mov	r7, r3
 8004618:	688a      	ldr	r2, [r1, #8]
 800461a:	690b      	ldr	r3, [r1, #16]
 800461c:	4606      	mov	r6, r0
 800461e:	4293      	cmp	r3, r2
 8004620:	bfb8      	it	lt
 8004622:	4613      	movlt	r3, r2
 8004624:	f8c9 3000 	str.w	r3, [r9]
 8004628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800462c:	460c      	mov	r4, r1
 800462e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004632:	b112      	cbz	r2, 800463a <_printf_common+0x2a>
 8004634:	3301      	adds	r3, #1
 8004636:	f8c9 3000 	str.w	r3, [r9]
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	0699      	lsls	r1, r3, #26
 800463e:	bf42      	ittt	mi
 8004640:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004644:	3302      	addmi	r3, #2
 8004646:	f8c9 3000 	strmi.w	r3, [r9]
 800464a:	6825      	ldr	r5, [r4, #0]
 800464c:	f015 0506 	ands.w	r5, r5, #6
 8004650:	d107      	bne.n	8004662 <_printf_common+0x52>
 8004652:	f104 0a19 	add.w	sl, r4, #25
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	f8d9 2000 	ldr.w	r2, [r9]
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	42ab      	cmp	r3, r5
 8004660:	dc29      	bgt.n	80046b6 <_printf_common+0xa6>
 8004662:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	3300      	adds	r3, #0
 800466a:	bf18      	it	ne
 800466c:	2301      	movne	r3, #1
 800466e:	0692      	lsls	r2, r2, #26
 8004670:	d42e      	bmi.n	80046d0 <_printf_common+0xc0>
 8004672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004676:	4639      	mov	r1, r7
 8004678:	4630      	mov	r0, r6
 800467a:	47c0      	blx	r8
 800467c:	3001      	adds	r0, #1
 800467e:	d021      	beq.n	80046c4 <_printf_common+0xb4>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	68e5      	ldr	r5, [r4, #12]
 8004684:	f003 0306 	and.w	r3, r3, #6
 8004688:	2b04      	cmp	r3, #4
 800468a:	bf18      	it	ne
 800468c:	2500      	movne	r5, #0
 800468e:	f8d9 2000 	ldr.w	r2, [r9]
 8004692:	f04f 0900 	mov.w	r9, #0
 8004696:	bf08      	it	eq
 8004698:	1aad      	subeq	r5, r5, r2
 800469a:	68a3      	ldr	r3, [r4, #8]
 800469c:	6922      	ldr	r2, [r4, #16]
 800469e:	bf08      	it	eq
 80046a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bfc4      	itt	gt
 80046a8:	1a9b      	subgt	r3, r3, r2
 80046aa:	18ed      	addgt	r5, r5, r3
 80046ac:	341a      	adds	r4, #26
 80046ae:	454d      	cmp	r5, r9
 80046b0:	d11a      	bne.n	80046e8 <_printf_common+0xd8>
 80046b2:	2000      	movs	r0, #0
 80046b4:	e008      	b.n	80046c8 <_printf_common+0xb8>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4652      	mov	r2, sl
 80046ba:	4639      	mov	r1, r7
 80046bc:	4630      	mov	r0, r6
 80046be:	47c0      	blx	r8
 80046c0:	3001      	adds	r0, #1
 80046c2:	d103      	bne.n	80046cc <_printf_common+0xbc>
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046cc:	3501      	adds	r5, #1
 80046ce:	e7c2      	b.n	8004656 <_printf_common+0x46>
 80046d0:	2030      	movs	r0, #48	; 0x30
 80046d2:	18e1      	adds	r1, r4, r3
 80046d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046de:	4422      	add	r2, r4
 80046e0:	3302      	adds	r3, #2
 80046e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046e6:	e7c4      	b.n	8004672 <_printf_common+0x62>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4622      	mov	r2, r4
 80046ec:	4639      	mov	r1, r7
 80046ee:	4630      	mov	r0, r6
 80046f0:	47c0      	blx	r8
 80046f2:	3001      	adds	r0, #1
 80046f4:	d0e6      	beq.n	80046c4 <_printf_common+0xb4>
 80046f6:	f109 0901 	add.w	r9, r9, #1
 80046fa:	e7d8      	b.n	80046ae <_printf_common+0x9e>

080046fc <_printf_i>:
 80046fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004700:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004704:	460c      	mov	r4, r1
 8004706:	7e09      	ldrb	r1, [r1, #24]
 8004708:	b085      	sub	sp, #20
 800470a:	296e      	cmp	r1, #110	; 0x6e
 800470c:	4617      	mov	r7, r2
 800470e:	4606      	mov	r6, r0
 8004710:	4698      	mov	r8, r3
 8004712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004714:	f000 80b3 	beq.w	800487e <_printf_i+0x182>
 8004718:	d822      	bhi.n	8004760 <_printf_i+0x64>
 800471a:	2963      	cmp	r1, #99	; 0x63
 800471c:	d036      	beq.n	800478c <_printf_i+0x90>
 800471e:	d80a      	bhi.n	8004736 <_printf_i+0x3a>
 8004720:	2900      	cmp	r1, #0
 8004722:	f000 80b9 	beq.w	8004898 <_printf_i+0x19c>
 8004726:	2958      	cmp	r1, #88	; 0x58
 8004728:	f000 8083 	beq.w	8004832 <_printf_i+0x136>
 800472c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004734:	e032      	b.n	800479c <_printf_i+0xa0>
 8004736:	2964      	cmp	r1, #100	; 0x64
 8004738:	d001      	beq.n	800473e <_printf_i+0x42>
 800473a:	2969      	cmp	r1, #105	; 0x69
 800473c:	d1f6      	bne.n	800472c <_printf_i+0x30>
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	6813      	ldr	r3, [r2, #0]
 8004742:	0605      	lsls	r5, r0, #24
 8004744:	f103 0104 	add.w	r1, r3, #4
 8004748:	d52a      	bpl.n	80047a0 <_printf_i+0xa4>
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6011      	str	r1, [r2, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	da03      	bge.n	800475a <_printf_i+0x5e>
 8004752:	222d      	movs	r2, #45	; 0x2d
 8004754:	425b      	negs	r3, r3
 8004756:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800475a:	486f      	ldr	r0, [pc, #444]	; (8004918 <_printf_i+0x21c>)
 800475c:	220a      	movs	r2, #10
 800475e:	e039      	b.n	80047d4 <_printf_i+0xd8>
 8004760:	2973      	cmp	r1, #115	; 0x73
 8004762:	f000 809d 	beq.w	80048a0 <_printf_i+0x1a4>
 8004766:	d808      	bhi.n	800477a <_printf_i+0x7e>
 8004768:	296f      	cmp	r1, #111	; 0x6f
 800476a:	d020      	beq.n	80047ae <_printf_i+0xb2>
 800476c:	2970      	cmp	r1, #112	; 0x70
 800476e:	d1dd      	bne.n	800472c <_printf_i+0x30>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	f043 0320 	orr.w	r3, r3, #32
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	e003      	b.n	8004782 <_printf_i+0x86>
 800477a:	2975      	cmp	r1, #117	; 0x75
 800477c:	d017      	beq.n	80047ae <_printf_i+0xb2>
 800477e:	2978      	cmp	r1, #120	; 0x78
 8004780:	d1d4      	bne.n	800472c <_printf_i+0x30>
 8004782:	2378      	movs	r3, #120	; 0x78
 8004784:	4865      	ldr	r0, [pc, #404]	; (800491c <_printf_i+0x220>)
 8004786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800478a:	e055      	b.n	8004838 <_printf_i+0x13c>
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004792:	1d19      	adds	r1, r3, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6011      	str	r1, [r2, #0]
 8004798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800479c:	2301      	movs	r3, #1
 800479e:	e08c      	b.n	80048ba <_printf_i+0x1be>
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047a6:	6011      	str	r1, [r2, #0]
 80047a8:	bf18      	it	ne
 80047aa:	b21b      	sxthne	r3, r3
 80047ac:	e7cf      	b.n	800474e <_printf_i+0x52>
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	6825      	ldr	r5, [r4, #0]
 80047b2:	1d18      	adds	r0, r3, #4
 80047b4:	6010      	str	r0, [r2, #0]
 80047b6:	0628      	lsls	r0, r5, #24
 80047b8:	d501      	bpl.n	80047be <_printf_i+0xc2>
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	e002      	b.n	80047c4 <_printf_i+0xc8>
 80047be:	0668      	lsls	r0, r5, #25
 80047c0:	d5fb      	bpl.n	80047ba <_printf_i+0xbe>
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	296f      	cmp	r1, #111	; 0x6f
 80047c6:	bf14      	ite	ne
 80047c8:	220a      	movne	r2, #10
 80047ca:	2208      	moveq	r2, #8
 80047cc:	4852      	ldr	r0, [pc, #328]	; (8004918 <_printf_i+0x21c>)
 80047ce:	2100      	movs	r1, #0
 80047d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047d4:	6865      	ldr	r5, [r4, #4]
 80047d6:	2d00      	cmp	r5, #0
 80047d8:	60a5      	str	r5, [r4, #8]
 80047da:	f2c0 8095 	blt.w	8004908 <_printf_i+0x20c>
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	f021 0104 	bic.w	r1, r1, #4
 80047e4:	6021      	str	r1, [r4, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d13d      	bne.n	8004866 <_printf_i+0x16a>
 80047ea:	2d00      	cmp	r5, #0
 80047ec:	f040 808e 	bne.w	800490c <_printf_i+0x210>
 80047f0:	4665      	mov	r5, ip
 80047f2:	2a08      	cmp	r2, #8
 80047f4:	d10b      	bne.n	800480e <_printf_i+0x112>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	07db      	lsls	r3, r3, #31
 80047fa:	d508      	bpl.n	800480e <_printf_i+0x112>
 80047fc:	6923      	ldr	r3, [r4, #16]
 80047fe:	6862      	ldr	r2, [r4, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	bfde      	ittt	le
 8004804:	2330      	movle	r3, #48	; 0x30
 8004806:	f805 3c01 	strble.w	r3, [r5, #-1]
 800480a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800480e:	ebac 0305 	sub.w	r3, ip, r5
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	f8cd 8000 	str.w	r8, [sp]
 8004818:	463b      	mov	r3, r7
 800481a:	aa03      	add	r2, sp, #12
 800481c:	4621      	mov	r1, r4
 800481e:	4630      	mov	r0, r6
 8004820:	f7ff fef6 	bl	8004610 <_printf_common>
 8004824:	3001      	adds	r0, #1
 8004826:	d14d      	bne.n	80048c4 <_printf_i+0x1c8>
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	b005      	add	sp, #20
 800482e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004832:	4839      	ldr	r0, [pc, #228]	; (8004918 <_printf_i+0x21c>)
 8004834:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	6821      	ldr	r1, [r4, #0]
 800483c:	1d1d      	adds	r5, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6015      	str	r5, [r2, #0]
 8004842:	060a      	lsls	r2, r1, #24
 8004844:	d50b      	bpl.n	800485e <_printf_i+0x162>
 8004846:	07ca      	lsls	r2, r1, #31
 8004848:	bf44      	itt	mi
 800484a:	f041 0120 	orrmi.w	r1, r1, #32
 800484e:	6021      	strmi	r1, [r4, #0]
 8004850:	b91b      	cbnz	r3, 800485a <_printf_i+0x15e>
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	f022 0220 	bic.w	r2, r2, #32
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	2210      	movs	r2, #16
 800485c:	e7b7      	b.n	80047ce <_printf_i+0xd2>
 800485e:	064d      	lsls	r5, r1, #25
 8004860:	bf48      	it	mi
 8004862:	b29b      	uxthmi	r3, r3
 8004864:	e7ef      	b.n	8004846 <_printf_i+0x14a>
 8004866:	4665      	mov	r5, ip
 8004868:	fbb3 f1f2 	udiv	r1, r3, r2
 800486c:	fb02 3311 	mls	r3, r2, r1, r3
 8004870:	5cc3      	ldrb	r3, [r0, r3]
 8004872:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004876:	460b      	mov	r3, r1
 8004878:	2900      	cmp	r1, #0
 800487a:	d1f5      	bne.n	8004868 <_printf_i+0x16c>
 800487c:	e7b9      	b.n	80047f2 <_printf_i+0xf6>
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	6825      	ldr	r5, [r4, #0]
 8004882:	1d18      	adds	r0, r3, #4
 8004884:	6961      	ldr	r1, [r4, #20]
 8004886:	6010      	str	r0, [r2, #0]
 8004888:	0628      	lsls	r0, r5, #24
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	d501      	bpl.n	8004892 <_printf_i+0x196>
 800488e:	6019      	str	r1, [r3, #0]
 8004890:	e002      	b.n	8004898 <_printf_i+0x19c>
 8004892:	066a      	lsls	r2, r5, #25
 8004894:	d5fb      	bpl.n	800488e <_printf_i+0x192>
 8004896:	8019      	strh	r1, [r3, #0]
 8004898:	2300      	movs	r3, #0
 800489a:	4665      	mov	r5, ip
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	e7b9      	b.n	8004814 <_printf_i+0x118>
 80048a0:	6813      	ldr	r3, [r2, #0]
 80048a2:	1d19      	adds	r1, r3, #4
 80048a4:	6011      	str	r1, [r2, #0]
 80048a6:	681d      	ldr	r5, [r3, #0]
 80048a8:	6862      	ldr	r2, [r4, #4]
 80048aa:	2100      	movs	r1, #0
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 f847 	bl	8004940 <memchr>
 80048b2:	b108      	cbz	r0, 80048b8 <_printf_i+0x1bc>
 80048b4:	1b40      	subs	r0, r0, r5
 80048b6:	6060      	str	r0, [r4, #4]
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	6123      	str	r3, [r4, #16]
 80048bc:	2300      	movs	r3, #0
 80048be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c2:	e7a7      	b.n	8004814 <_printf_i+0x118>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	462a      	mov	r2, r5
 80048c8:	4639      	mov	r1, r7
 80048ca:	4630      	mov	r0, r6
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0aa      	beq.n	8004828 <_printf_i+0x12c>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	079b      	lsls	r3, r3, #30
 80048d6:	d413      	bmi.n	8004900 <_printf_i+0x204>
 80048d8:	68e0      	ldr	r0, [r4, #12]
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	4298      	cmp	r0, r3
 80048de:	bfb8      	it	lt
 80048e0:	4618      	movlt	r0, r3
 80048e2:	e7a3      	b.n	800482c <_printf_i+0x130>
 80048e4:	2301      	movs	r3, #1
 80048e6:	464a      	mov	r2, r9
 80048e8:	4639      	mov	r1, r7
 80048ea:	4630      	mov	r0, r6
 80048ec:	47c0      	blx	r8
 80048ee:	3001      	adds	r0, #1
 80048f0:	d09a      	beq.n	8004828 <_printf_i+0x12c>
 80048f2:	3501      	adds	r5, #1
 80048f4:	68e3      	ldr	r3, [r4, #12]
 80048f6:	9a03      	ldr	r2, [sp, #12]
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	42ab      	cmp	r3, r5
 80048fc:	dcf2      	bgt.n	80048e4 <_printf_i+0x1e8>
 80048fe:	e7eb      	b.n	80048d8 <_printf_i+0x1dc>
 8004900:	2500      	movs	r5, #0
 8004902:	f104 0919 	add.w	r9, r4, #25
 8004906:	e7f5      	b.n	80048f4 <_printf_i+0x1f8>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ac      	bne.n	8004866 <_printf_i+0x16a>
 800490c:	7803      	ldrb	r3, [r0, #0]
 800490e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004912:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004916:	e76c      	b.n	80047f2 <_printf_i+0xf6>
 8004918:	08004c0d 	.word	0x08004c0d
 800491c:	08004c1e 	.word	0x08004c1e

08004920 <_sbrk_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	2300      	movs	r3, #0
 8004924:	4c05      	ldr	r4, [pc, #20]	; (800493c <_sbrk_r+0x1c>)
 8004926:	4605      	mov	r5, r0
 8004928:	4608      	mov	r0, r1
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f7fc fd46 	bl	80013bc <_sbrk>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_sbrk_r+0x1a>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_sbrk_r+0x1a>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	2000030c 	.word	0x2000030c

08004940 <memchr>:
 8004940:	b510      	push	{r4, lr}
 8004942:	b2c9      	uxtb	r1, r1
 8004944:	4402      	add	r2, r0
 8004946:	4290      	cmp	r0, r2
 8004948:	4603      	mov	r3, r0
 800494a:	d101      	bne.n	8004950 <memchr+0x10>
 800494c:	2300      	movs	r3, #0
 800494e:	e003      	b.n	8004958 <memchr+0x18>
 8004950:	781c      	ldrb	r4, [r3, #0]
 8004952:	3001      	adds	r0, #1
 8004954:	428c      	cmp	r4, r1
 8004956:	d1f6      	bne.n	8004946 <memchr+0x6>
 8004958:	4618      	mov	r0, r3
 800495a:	bd10      	pop	{r4, pc}

0800495c <memmove>:
 800495c:	4288      	cmp	r0, r1
 800495e:	b510      	push	{r4, lr}
 8004960:	eb01 0302 	add.w	r3, r1, r2
 8004964:	d807      	bhi.n	8004976 <memmove+0x1a>
 8004966:	1e42      	subs	r2, r0, #1
 8004968:	4299      	cmp	r1, r3
 800496a:	d00a      	beq.n	8004982 <memmove+0x26>
 800496c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004970:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004974:	e7f8      	b.n	8004968 <memmove+0xc>
 8004976:	4283      	cmp	r3, r0
 8004978:	d9f5      	bls.n	8004966 <memmove+0xa>
 800497a:	1881      	adds	r1, r0, r2
 800497c:	1ad2      	subs	r2, r2, r3
 800497e:	42d3      	cmn	r3, r2
 8004980:	d100      	bne.n	8004984 <memmove+0x28>
 8004982:	bd10      	pop	{r4, pc}
 8004984:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004988:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800498c:	e7f7      	b.n	800497e <memmove+0x22>

0800498e <__malloc_lock>:
 800498e:	4770      	bx	lr

08004990 <__malloc_unlock>:
 8004990:	4770      	bx	lr

08004992 <_realloc_r>:
 8004992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004994:	4607      	mov	r7, r0
 8004996:	4614      	mov	r4, r2
 8004998:	460e      	mov	r6, r1
 800499a:	b921      	cbnz	r1, 80049a6 <_realloc_r+0x14>
 800499c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049a0:	4611      	mov	r1, r2
 80049a2:	f7ff bc89 	b.w	80042b8 <_malloc_r>
 80049a6:	b922      	cbnz	r2, 80049b2 <_realloc_r+0x20>
 80049a8:	f7ff fc3a 	bl	8004220 <_free_r>
 80049ac:	4625      	mov	r5, r4
 80049ae:	4628      	mov	r0, r5
 80049b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b2:	f000 f814 	bl	80049de <_malloc_usable_size_r>
 80049b6:	42a0      	cmp	r0, r4
 80049b8:	d20f      	bcs.n	80049da <_realloc_r+0x48>
 80049ba:	4621      	mov	r1, r4
 80049bc:	4638      	mov	r0, r7
 80049be:	f7ff fc7b 	bl	80042b8 <_malloc_r>
 80049c2:	4605      	mov	r5, r0
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d0f2      	beq.n	80049ae <_realloc_r+0x1c>
 80049c8:	4631      	mov	r1, r6
 80049ca:	4622      	mov	r2, r4
 80049cc:	f7ff fb68 	bl	80040a0 <memcpy>
 80049d0:	4631      	mov	r1, r6
 80049d2:	4638      	mov	r0, r7
 80049d4:	f7ff fc24 	bl	8004220 <_free_r>
 80049d8:	e7e9      	b.n	80049ae <_realloc_r+0x1c>
 80049da:	4635      	mov	r5, r6
 80049dc:	e7e7      	b.n	80049ae <_realloc_r+0x1c>

080049de <_malloc_usable_size_r>:
 80049de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e2:	1f18      	subs	r0, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bfbc      	itt	lt
 80049e8:	580b      	ldrlt	r3, [r1, r0]
 80049ea:	18c0      	addlt	r0, r0, r3
 80049ec:	4770      	bx	lr
	...

080049f0 <_gettimeofday>:
 80049f0:	2258      	movs	r2, #88	; 0x58
 80049f2:	4b02      	ldr	r3, [pc, #8]	; (80049fc <_gettimeofday+0xc>)
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	4770      	bx	lr
 80049fc:	2000030c 	.word	0x2000030c

08004a00 <_init>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr

08004a0c <_fini>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr
