
03_Robot_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004030  08004030  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004030  08004030  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004030  08004030  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000070  080040a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080040a8  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0a5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d3e  00000000  00000000  0002d13e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  0002ee80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  0002fb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188ec  00000000  00000000  00030778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab8a  00000000  00000000  00049064  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fae8  00000000  00000000  00053bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e36d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000391c  00000000  00000000  000e3754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f40 	.word	0x08003f40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003f40 	.word	0x08003f40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <robotDefaultValuesInit>:
 *      Author: pawel
 */
#include "STM32_Robot.h"

void robotDefaultValuesInit(Robot* rob, TIM_HandleTypeDef* timEngLeft, TIM_HandleTypeDef* timEngRight, UART_HandleTypeDef* uartUSB, UART_HandleTypeDef* uartBlth, UART_HandleTypeDef* uartSelected, ADC_HandleTypeDef* adc)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	rob->engLeft.tim = timEngLeft;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	68ba      	ldr	r2, [r7, #8]
 800016e:	601a      	str	r2, [r3, #0]
	rob->engLeft.timChl = TIM_CHANNEL_1;//3
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	2200      	movs	r2, #0
 8000174:	605a      	str	r2, [r3, #4]
	rob->engLeft.dirPinPort = GPIOB;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	4a5e      	ldr	r2, [pc, #376]	; (80002f4 <robotDefaultValuesInit+0x198>)
 800017a:	609a      	str	r2, [r3, #8]
	rob->engLeft.dirPin = GPIO_PIN_5;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2220      	movs	r2, #32
 8000180:	60da      	str	r2, [r3, #12]
	rob->engLeft.pwmVal = 0;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	741a      	strb	r2, [r3, #16]

	rob->engRight.tim = timEngRight;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	615a      	str	r2, [r3, #20]
	rob->engRight.timChl = TIM_CHANNEL_3;//1
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2208      	movs	r2, #8
 8000192:	619a      	str	r2, [r3, #24]
	rob->engRight.dirPinPort = GPIOC;
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	4a58      	ldr	r2, [pc, #352]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000198:	61da      	str	r2, [r3, #28]
	rob->engRight.dirPin = GPIO_PIN_7;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	2280      	movs	r2, #128	; 0x80
 800019e:	621a      	str	r2, [r3, #32]
	rob->engRight.pwmVal = 0;
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	2200      	movs	r2, #0
 80001a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	rob->uartUSB = uartUSB;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	683a      	ldr	r2, [r7, #0]
 80001ac:	629a      	str	r2, [r3, #40]	; 0x28
	rob->uartBlth = uartBlth;
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	69ba      	ldr	r2, [r7, #24]
 80001b2:	62da      	str	r2, [r3, #44]	; 0x2c
	rob->blthPinPort = GPIOA;		//to trzeba przerzucic na i2c
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	4a51      	ldr	r2, [pc, #324]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 80001b8:	635a      	str	r2, [r3, #52]	; 0x34
	rob->blthPin = GPIO_PIN_15;		//to trzeba przerzucic na i2c
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80001c0:	639a      	str	r2, [r3, #56]	; 0x38
	rob->uartSelected = uartSelected;
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	69fa      	ldr	r2, [r7, #28]
 80001c6:	631a      	str	r2, [r3, #48]	; 0x30

	strcpy(rob->snr[0].snrName, "RgtCnct");
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	3340      	adds	r3, #64	; 0x40
 80001cc:	494c      	ldr	r1, [pc, #304]	; (8000300 <robotDefaultValuesInit+0x1a4>)
 80001ce:	461a      	mov	r2, r3
 80001d0:	460b      	mov	r3, r1
 80001d2:	cb03      	ldmia	r3!, {r0, r1}
 80001d4:	6010      	str	r0, [r2, #0]
 80001d6:	6051      	str	r1, [r2, #4]
	rob->snr[0].snrPinPort = DIGIAL_SNR;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	2200      	movs	r2, #0
 80001dc:	64da      	str	r2, [r3, #76]	; 0x4c
	rob->snr[0].snrPinPort = GPIOA;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	4a46      	ldr	r2, [pc, #280]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 80001e2:	64da      	str	r2, [r3, #76]	; 0x4c
	rob->snr[0].snrPin = GPIO_PIN_0;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	2201      	movs	r2, #1
 80001e8:	651a      	str	r2, [r3, #80]	; 0x50
	rob->snr[0].snrVal = 0;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	2200      	movs	r2, #0
 80001ee:	655a      	str	r2, [r3, #84]	; 0x54

	strcpy(rob->snr[1].snrName, "LftCnct");
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	3368      	adds	r3, #104	; 0x68
 80001f4:	4943      	ldr	r1, [pc, #268]	; (8000304 <robotDefaultValuesInit+0x1a8>)
 80001f6:	461a      	mov	r2, r3
 80001f8:	460b      	mov	r3, r1
 80001fa:	cb03      	ldmia	r3!, {r0, r1}
 80001fc:	6010      	str	r0, [r2, #0]
 80001fe:	6051      	str	r1, [r2, #4]
	rob->snr[1].snrType = DIGIAL_SNR;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rob->snr[1].snrPinPort = GPIOA;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	4a3c      	ldr	r2, [pc, #240]	; (80002fc <robotDefaultValuesInit+0x1a0>)
 800020c:	675a      	str	r2, [r3, #116]	; 0x74
	rob->snr[1].snrPin = GPIO_PIN_1;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2202      	movs	r2, #2
 8000212:	679a      	str	r2, [r3, #120]	; 0x78
	rob->snr[1].snrVal = 0;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2200      	movs	r2, #0
 8000218:	67da      	str	r2, [r3, #124]	; 0x7c

	strcpy(rob->snr[2].snrName, "RgtLight");
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	3390      	adds	r3, #144	; 0x90
 800021e:	493a      	ldr	r1, [pc, #232]	; (8000308 <robotDefaultValuesInit+0x1ac>)
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	cb03      	ldmia	r3!, {r0, r1}
 8000226:	6010      	str	r0, [r2, #0]
 8000228:	6051      	str	r1, [r2, #4]
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	7213      	strb	r3, [r2, #8]
	rob->snr[2].snrType = ANALOG_SNR;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	2201      	movs	r2, #1
 8000232:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rob->snr[2].snrPinPort = GPIOC;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 800023a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	rob->snr[2].snrPin = GPIO_PIN_5;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2220      	movs	r2, #32
 8000242:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	rob->snr[2].snrVal = 0;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	2200      	movs	r2, #0
 800024a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	rob->snr[2].snrAdc = adc;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	6a3a      	ldr	r2, [r7, #32]
 8000252:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	rob->snr[2].snrAdcChannel.Channel = ADC_CHANNEL_15;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	220f      	movs	r2, #15
 800025a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	rob->snr[2].snrAdcChannel.Rank = ADC_REGULAR_RANK_1;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2201      	movs	r2, #1
 8000262:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	rob->snr[2].snrAdcChannel.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2202      	movs	r2, #2
 800026a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000274:	4820      	ldr	r0, [pc, #128]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000276:	f001 fda2 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2140      	movs	r1, #64	; 0x40
 800027e:	481e      	ldr	r0, [pc, #120]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 8000280:	f001 fd9d 	bl	8001dbe <HAL_GPIO_WritePin>

	strcpy(rob->snr[3].snrName, "LftLight");
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	33b8      	adds	r3, #184	; 0xb8
 8000288:	4920      	ldr	r1, [pc, #128]	; (800030c <robotDefaultValuesInit+0x1b0>)
 800028a:	461a      	mov	r2, r3
 800028c:	460b      	mov	r3, r1
 800028e:	cb03      	ldmia	r3!, {r0, r1}
 8000290:	6010      	str	r0, [r2, #0]
 8000292:	6051      	str	r1, [r2, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	7213      	strb	r3, [r2, #8]
	rob->snr[3].snrType = ANALOG_SNR;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2201      	movs	r2, #1
 800029c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rob->snr[3].snrPinPort = GPIOC;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 80002a4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	rob->snr[3].snrPin = GPIO_PIN_0;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	2201      	movs	r2, #1
 80002ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	rob->snr[3].snrVal = 0;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2200      	movs	r2, #0
 80002b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	rob->snr[3].snrAdc = adc;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	6a3a      	ldr	r2, [r7, #32]
 80002bc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	rob->snr[3].snrAdcChannel.Channel = ADC_CHANNEL_10;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	220a      	movs	r2, #10
 80002c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	rob->snr[3].snrAdcChannel.Rank = ADC_REGULAR_RANK_1;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2201      	movs	r2, #1
 80002cc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	rob->snr[3].snrAdcChannel.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	2202      	movs	r2, #2
 80002d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	2101      	movs	r1, #1
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <robotDefaultValuesInit+0x198>)
 80002de:	f001 fd6e 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	4804      	ldr	r0, [pc, #16]	; (80002f8 <robotDefaultValuesInit+0x19c>)
 80002e8:	f001 fd69 	bl	8001dbe <HAL_GPIO_WritePin>


}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	40011000 	.word	0x40011000
 80002fc:	40010800 	.word	0x40010800
 8000300:	08003f58 	.word	0x08003f58
 8000304:	08003f60 	.word	0x08003f60
 8000308:	08003f68 	.word	0x08003f68
 800030c:	08003f74 	.word	0x08003f74

08000310 <robotTelemetry>:
		HAL_TIM_PWM_Start(rob->engLeft.tim, rob->engLeft.timChl);
	}
}

void robotTelemetry(Robot *rob)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b0b7      	sub	sp, #220	; 0xdc
 8000314:	af02      	add	r7, sp, #8
 8000316:	6078      	str	r0, [r7, #4]
	char data[200];
	//sprintf(data, "Left Enigne PWM Duty Cycle: %i%%\r\nRight Enigne PWM Duty Cycle: %i%%\r\n\r\n",
			//rob->engLeft.pwmVal, rob->engRight.pwmVal);
	//int32_t diff = rob->snr[2].snrVal - rob->snr[3].snrVa
	sprintf(data, "Right Sensor: %lu\r\nLeft Sensor: %lu\r\nDifference = %li\r\n\r\n", rob->snr[2].snrVal, rob->snr[3].snrVal, (int32_t)(rob->snr[2].snrVal-rob->snr[3].snrVal));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f8d3 40cc 	ldr.w	r4, [r3, #204]	; 0xcc
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	f107 0008 	add.w	r0, r7, #8
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	4623      	mov	r3, r4
 800033a:	460a      	mov	r2, r1
 800033c:	491a      	ldr	r1, [pc, #104]	; (80003a8 <robotTelemetry+0x98>)
 800033e:	f003 f9ed 	bl	800371c <siprintf>

	if(rob->uartSelected == rob->uartUSB)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800034a:	429a      	cmp	r2, r3
 800034c:	d109      	bne.n	8000362 <robotTelemetry+0x52>
		HAL_GPIO_WritePin(rob->blthPinPort, rob->blthPin, GPIO_PIN_RESET);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000356:	b29b      	uxth	r3, r3
 8000358:	2200      	movs	r2, #0
 800035a:	4619      	mov	r1, r3
 800035c:	f001 fd2f 	bl	8001dbe <HAL_GPIO_WritePin>
 8000360:	e00e      	b.n	8000380 <robotTelemetry+0x70>

	else if(rob->uartSelected == rob->uartBlth)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800036a:	429a      	cmp	r2, r3
 800036c:	d108      	bne.n	8000380 <robotTelemetry+0x70>
		HAL_GPIO_WritePin(rob->blthPinPort, rob->blthPin, GPIO_PIN_SET);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000376:	b29b      	uxth	r3, r3
 8000378:	2201      	movs	r2, #1
 800037a:	4619      	mov	r1, r3
 800037c:	f001 fd1f 	bl	8001dbe <HAL_GPIO_WritePin>

	HAL_UART_Transmit(rob->uartSelected, (uint8_t*)data, strlen(data), 1000);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000384:	f107 0308 	add.w	r3, r7, #8
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fedf 	bl	800014c <strlen>
 800038e:	4603      	mov	r3, r0
 8000390:	b29a      	uxth	r2, r3
 8000392:	f107 0108 	add.w	r1, r7, #8
 8000396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039a:	4620      	mov	r0, r4
 800039c:	f003 f821 	bl	80033e2 <HAL_UART_Transmit>

}
 80003a0:	bf00      	nop
 80003a2:	37d4      	adds	r7, #212	; 0xd4
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd90      	pop	{r4, r7, pc}
 80003a8:	08003f80 	.word	0x08003f80

080003ac <robotReadSensors>:
		robotSetEnginePwm(rob, 0, 0);
	}
}

void robotReadSensors(Robot* rob)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NUMBER_SNR; i++){
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	e07f      	b.n	80004ba <robotReadSensors+0x10e>
		if(rob->snr[i].snrType == DIGIAL_SNR)
 80003ba:	7bfa      	ldrb	r2, [r7, #15]
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	440b      	add	r3, r1
 80003c8:	334a      	adds	r3, #74	; 0x4a
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d121      	bne.n	8000414 <robotReadSensors+0x68>
			rob->snr[i].snrVal = HAL_GPIO_ReadPin(rob->snr[i].snrPinPort, rob->snr[i].snrPin);
 80003d0:	7bfa      	ldrb	r2, [r7, #15]
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	4613      	mov	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4413      	add	r3, r2
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	440b      	add	r3, r1
 80003de:	334c      	adds	r3, #76	; 0x4c
 80003e0:	6818      	ldr	r0, [r3, #0]
 80003e2:	7bfa      	ldrb	r2, [r7, #15]
 80003e4:	6879      	ldr	r1, [r7, #4]
 80003e6:	4613      	mov	r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	4413      	add	r3, r2
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	440b      	add	r3, r1
 80003f0:	3350      	adds	r3, #80	; 0x50
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	f001 fcca 	bl	8001d90 <HAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	7bfa      	ldrb	r2, [r7, #15]
 8000400:	4618      	mov	r0, r3
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	440b      	add	r3, r1
 800040e:	3354      	adds	r3, #84	; 0x54
 8000410:	6018      	str	r0, [r3, #0]
 8000412:	e04f      	b.n	80004b4 <robotReadSensors+0x108>

		else if(rob->snr[i].snrType == ANALOG_SNR){
 8000414:	7bfa      	ldrb	r2, [r7, #15]
 8000416:	6879      	ldr	r1, [r7, #4]
 8000418:	4613      	mov	r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	00db      	lsls	r3, r3, #3
 8000420:	440b      	add	r3, r1
 8000422:	334a      	adds	r3, #74	; 0x4a
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d144      	bne.n	80004b4 <robotReadSensors+0x108>
			HAL_ADC_ConfigChannel(rob->snr[i].snrAdc, &rob->snr[i].snrAdcChannel);
 800042a:	7bfa      	ldrb	r2, [r7, #15]
 800042c:	6879      	ldr	r1, [r7, #4]
 800042e:	4613      	mov	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	440b      	add	r3, r1
 8000438:	3358      	adds	r3, #88	; 0x58
 800043a:	6818      	ldr	r0, [r3, #0]
 800043c:	7bfa      	ldrb	r2, [r7, #15]
 800043e:	4613      	mov	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4413      	add	r3, r2
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	3358      	adds	r3, #88	; 0x58
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	3304      	adds	r3, #4
 800044e:	4619      	mov	r1, r3
 8000450:	f001 f8b2 	bl	80015b8 <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(rob->snr[i].snrAdc);
 8000454:	7bfa      	ldrb	r2, [r7, #15]
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	4613      	mov	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4413      	add	r3, r2
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	440b      	add	r3, r1
 8000462:	3358      	adds	r3, #88	; 0x58
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fef2 	bl	8001250 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(rob->snr[i].snrAdc, 1000);
 800046c:	7bfa      	ldrb	r2, [r7, #15]
 800046e:	6879      	ldr	r1, [r7, #4]
 8000470:	4613      	mov	r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	4413      	add	r3, r2
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	440b      	add	r3, r1
 800047a:	3358      	adds	r3, #88	; 0x58
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000482:	4618      	mov	r0, r3
 8000484:	f000 ff92 	bl	80013ac <HAL_ADC_PollForConversion>
			rob->snr[i].snrVal = HAL_ADC_GetValue(rob->snr[i].snrAdc);
 8000488:	7bfa      	ldrb	r2, [r7, #15]
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	4613      	mov	r3, r2
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	4413      	add	r3, r2
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	440b      	add	r3, r1
 8000496:	3358      	adds	r3, #88	; 0x58
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	7bfc      	ldrb	r4, [r7, #15]
 800049c:	4618      	mov	r0, r3
 800049e:	f001 f87f 	bl	80015a0 <HAL_ADC_GetValue>
 80004a2:	4601      	mov	r1, r0
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	4623      	mov	r3, r4
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	4423      	add	r3, r4
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	4413      	add	r3, r2
 80004b0:	3354      	adds	r3, #84	; 0x54
 80004b2:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0; i < NUMBER_SNR; i++){
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	3301      	adds	r3, #1
 80004b8:	73fb      	strb	r3, [r7, #15]
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	2b03      	cmp	r3, #3
 80004be:	f67f af7c 	bls.w	80003ba <robotReadSensors+0xe>
		}
	}
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd90      	pop	{r4, r7, pc}

080004ca <robotStartProcedure>:

	robotSetEnginePwm(rob, -40, -40);
}

void robotStartProcedure(Robot* rob)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b082      	sub	sp, #8
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
	// loop until whole procedure is finished
	while(rob->StartProcedureFinished == 0){
 80004d2:	e053      	b.n	800057c <robotStartProcedure+0xb2>

		// read data from sensors
		robotReadSensors(rob);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff69 	bl	80003ac <robotReadSensors>

		// loop until both sensors are switched on
		do{
			robotReadSensors(rob);
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff ff66 	bl	80003ac <robotReadSensors>
		}
		while(rob->snr[0].snrVal == 1 || rob->snr[1].snrVal == 1);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d0f8      	beq.n	80004da <robotStartProcedure+0x10>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d0f4      	beq.n	80004da <robotStartProcedure+0x10>


		// switch on LED to inform that start procedure is on
		robotSwitchLED(rob, 1);
 80004f0:	2101      	movs	r1, #1
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 f864 	bl	80005c0 <robotSwitchLED>

		// counter initialization
		rob->StartProcedureCountNum = 0;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		// counter is set for around 4 seconds
		while(rob->StartProcedureCountNum < START_CNT_NUM){
 8000500:	e011      	b.n	8000526 <robotStartProcedure+0x5c>
			robotReadSensors(rob);
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f7ff ff52 	bl	80003ac <robotReadSensors>

			// if one of sensor is not switched on, stop the counting
			if(rob->snr[0].snrVal == 1 || rob->snr[1].snrVal == 1){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800050c:	2b01      	cmp	r3, #1
 800050e:	d011      	beq.n	8000534 <robotStartProcedure+0x6a>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000514:	2b01      	cmp	r3, #1
 8000516:	d00d      	beq.n	8000534 <robotStartProcedure+0x6a>
				break;
			}
			rob->StartProcedureCountNum++;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		while(rob->StartProcedureCountNum < START_CNT_NUM){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800052c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000530:	4293      	cmp	r3, r2
 8000532:	d9e6      	bls.n	8000502 <robotStartProcedure+0x38>
		}

		// check if counter finished properly
		if(rob->StartProcedureCountNum == START_CNT_NUM){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800053a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800053e:	4293      	cmp	r3, r2
 8000540:	d114      	bne.n	800056c <robotStartProcedure+0xa2>

			// mark that start procedure finished
			rob->StartProcedureFinished = 1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2201      	movs	r2, #1
 8000546:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

			// switch on buzzer for 0.5 second to announce that start procedure finished
			robotSwitchBuzzer(rob, 1);
 800054a:	2101      	movs	r1, #1
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f81f 	bl	8000590 <robotSwitchBuzzer>
			HAL_Delay(500);
 8000552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000556:	f000 fd81 	bl	800105c <HAL_Delay>
			robotSwitchLED(rob, 0);
 800055a:	2100      	movs	r1, #0
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f82f 	bl	80005c0 <robotSwitchLED>

			// switch off LED
			robotSwitchBuzzer(rob, 0);
 8000562:	2100      	movs	r1, #0
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f000 f813 	bl	8000590 <robotSwitchBuzzer>
 800056a:	e007      	b.n	800057c <robotStartProcedure+0xb2>
		}

		//if counter does not finished properly, just switch off LED
		else{
			rob->StartProcedureCountNum = 0;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			robotSwitchLED(rob,0);
 8000574:	2100      	movs	r1, #0
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f822 	bl	80005c0 <robotSwitchLED>
	while(rob->StartProcedureFinished == 0){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0a6      	beq.n	80004d4 <robotStartProcedure+0xa>
		}
	}
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <robotSwitchBuzzer>:
	  robotSetEnginePwm(rob, 40-diff, 40);
	}
}

void robotSwitchBuzzer(Robot* rob, uint8_t state)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	if(state == 0 || state == 1)
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <robotSwitchBuzzer+0x18>
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d105      	bne.n	80005b4 <robotSwitchBuzzer+0x24>
		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, state);
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	461a      	mov	r2, r3
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	4803      	ldr	r0, [pc, #12]	; (80005bc <robotSwitchBuzzer+0x2c>)
 80005b0:	f001 fc05 	bl	8001dbe <HAL_GPIO_WritePin>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40010c00 	.word	0x40010c00

080005c0 <robotSwitchLED>:

void robotSwitchLED(Robot* rob, uint8_t state)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	70fb      	strb	r3, [r7, #3]
	if(state == 0 || state == 1)
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <robotSwitchLED+0x18>
 80005d2:	78fb      	ldrb	r3, [r7, #3]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d105      	bne.n	80005e4 <robotSwitchLED+0x24>
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, state);
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	461a      	mov	r2, r3
 80005dc:	2120      	movs	r1, #32
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <robotSwitchLED+0x2c>)
 80005e0:	f001 fbed 	bl	8001dbe <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40010800 	.word	0x40010800

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fccf 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f82f 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fa01 	bl	8000a04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f9d5 	bl	80009b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000606:	f000 f8bd 	bl	8000784 <MX_TIM2_Init>
  MX_TIM3_Init();
 800060a:	f000 f931 	bl	8000870 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800060e:	f000 f9a5 	bl	800095c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000612:	f000 f879 	bl	8000708 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  	  robotDefaultValuesInit(&rob, &htim3, &htim2, &huart2, &huart1, &huart2, &hadc1);
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <main+0x54>)
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0x58>)
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <main+0x5c>)
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <main+0x58>)
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <main+0x60>)
 8000626:	490b      	ldr	r1, [pc, #44]	; (8000654 <main+0x64>)
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <main+0x68>)
 800062a:	f7ff fd97 	bl	800015c <robotDefaultValuesInit>
  	  robotStartProcedure(&rob);
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <main+0x68>)
 8000630:	f7ff ff4b 	bl	80004ca <robotStartProcedure>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  robotReadSensors(&rob);
 8000634:	4808      	ldr	r0, [pc, #32]	; (8000658 <main+0x68>)
 8000636:	f7ff feb9 	bl	80003ac <robotReadSensors>
	  robotTelemetry(&rob);
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <main+0x68>)
 800063c:	f7ff fe68 	bl	8000310 <robotTelemetry>
	  robotReadSensors(&rob);
 8000640:	e7f8      	b.n	8000634 <main+0x44>
 8000642:	bf00      	nop
 8000644:	200000e0 	.word	0x200000e0
 8000648:	20000280 	.word	0x20000280
 800064c:	20000110 	.word	0x20000110
 8000650:	20000238 	.word	0x20000238
 8000654:	20000098 	.word	0x20000098
 8000658:	20000150 	.word	0x20000150

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000666:	2228      	movs	r2, #40	; 0x28
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 f84e 	bl	800370c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800069c:	2300      	movs	r3, #0
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80006a0:	2300      	movs	r3, #0
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fbc3 	bl	8001e34 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006b4:	f000 fa4c 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fe2d 	bl	8002334 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006e0:	f000 fa36 	bl	8000b50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006e4:	2302      	movs	r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 ffbc 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fa:	f000 fa29 	bl	8000b50 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_ADC1_Init+0x74>)
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <MX_ADC1_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_ADC1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_ADC1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_ADC1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_ADC1_Init+0x74>)
 8000732:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_ADC1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_ADC1_Init+0x74>)
 8000740:	2201      	movs	r2, #1
 8000742:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_ADC1_Init+0x74>)
 8000746:	f000 fcab 	bl	80010a0 <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000750:	f000 f9fe 	bl	8000b50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000754:	230f      	movs	r3, #15
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000758:	2301      	movs	r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_ADC1_Init+0x74>)
 8000766:	f000 ff27 	bl	80015b8 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000770:	f000 f9ee 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000e0 	.word	0x200000e0
 8000780:	40012400 	.word	0x40012400

08000784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b4:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_TIM2_Init+0xe8>)
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_TIM2_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_TIM2_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_TIM2_Init+0xe8>)
 80007ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_TIM2_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_TIM2_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007dc:	4823      	ldr	r0, [pc, #140]	; (800086c <MX_TIM2_Init+0xe8>)
 80007de:	f002 f8b7 	bl	8002950 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007e8:	f000 f9b2 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	4619      	mov	r1, r3
 80007f8:	481c      	ldr	r0, [pc, #112]	; (800086c <MX_TIM2_Init+0xe8>)
 80007fa:	f002 fa0f 	bl	8002c1c <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000804:	f000 f9a4 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_TIM2_Init+0xe8>)
 800080a:	f002 f8f0 	bl	80029ee <HAL_TIM_PWM_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000814:	f000 f99c 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4619      	mov	r1, r3
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_TIM2_Init+0xe8>)
 8000828:	f002 fd30 	bl	800328c <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000832:	f000 f98d 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2208      	movs	r2, #8
 800084a:	4619      	mov	r1, r3
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM2_Init+0xe8>)
 800084e:	f002 f927 	bl	8002aa0 <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000858:	f000 f97a 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM2_Init+0xe8>)
 800085e:	f000 fa19 	bl	8000c94 <HAL_TIM_MspPostInit>

}
 8000862:	bf00      	nop
 8000864:	3738      	adds	r7, #56	; 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000238 	.word	0x20000238

08000870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	; 0x38
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <MX_TIM3_Init+0xe8>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c6:	4823      	ldr	r0, [pc, #140]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008c8:	f002 f842 	bl	8002950 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008d2:	f000 f93d 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e0:	4619      	mov	r1, r3
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008e4:	f002 f99a 	bl	8002c1c <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008ee:	f000 f92f 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008f4:	f002 f87b 	bl	80029ee <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008fe:	f000 f927 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	4619      	mov	r1, r3
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000912:	f002 fcbb 	bl	800328c <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800091c:	f000 f918 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000920:	2360      	movs	r3, #96	; 0x60
 8000922:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000938:	f002 f8b2 	bl	8002aa0 <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000942:	f000 f905 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000948:	f000 f9a4 	bl	8000c94 <HAL_TIM_MspPostInit>

}
 800094c:	bf00      	nop
 800094e:	3738      	adds	r7, #56	; 0x38
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000098 	.word	0x20000098
 8000958:	40000400 	.word	0x40000400

0800095c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART1_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000968:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000994:	f002 fcd8 	bl	8003348 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f8d7 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000110 	.word	0x20000110
 80009ac:	40013800 	.word	0x40013800

080009b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_USART2_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e8:	f002 fcae 	bl	8003348 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f2:	f000 f8ad 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000280 	.word	0x20000280
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a18:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a47      	ldr	r2, [pc, #284]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0310 	and.w	r3, r3, #16
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a30:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a41      	ldr	r2, [pc, #260]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a36:	f043 0320 	orr.w	r3, r3, #32
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0320 	and.w	r3, r3, #32
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a3b      	ldr	r2, [pc, #236]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a35      	ldr	r2, [pc, #212]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_GND_Light_Sensor_Pin|Right_GND_Light_Sensor_Pin|Right_Engine_Directiob_Pin|Right_5V_Light_Sensor_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000a7e:	4830      	ldr	r0, [pc, #192]	; (8000b40 <MX_GPIO_Init+0x13c>)
 8000a80:	f001 f99d 	bl	8001dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Bluetooth_Power_Supply_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f248 0120 	movw	r1, #32800	; 0x8020
 8000a8a:	482e      	ldr	r0, [pc, #184]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a8c:	f001 f997 	bl	8001dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Left_5V_Light_Sensor_Pin|Left_Engine_Direction_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2161      	movs	r1, #97	; 0x61
 8000a94:	482c      	ldr	r0, [pc, #176]	; (8000b48 <MX_GPIO_Init+0x144>)
 8000a96:	f001 f992 	bl	8001dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_GPIO_Init+0x148>)
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4824      	ldr	r0, [pc, #144]	; (8000b40 <MX_GPIO_Init+0x13c>)
 8000ab0:	f001 f814 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_GND_Light_Sensor_Pin Right_GND_Light_Sensor_Pin Right_Engine_Directiob_Pin Right_5V_Light_Sensor_Pin */
  GPIO_InitStruct.Pin = Left_GND_Light_Sensor_Pin|Right_GND_Light_Sensor_Pin|Right_Engine_Directiob_Pin|Right_5V_Light_Sensor_Pin;
 8000ab4:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <MX_GPIO_Init+0x13c>)
 8000ace:	f001 f805 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Contact_Sensor_Pin Left_Contact_Sensor_Pin */
  GPIO_InitStruct.Pin = Right_Contact_Sensor_Pin|Left_Contact_Sensor_Pin;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4817      	ldr	r0, [pc, #92]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000ae6:	f000 fff9 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Bluetooth_Power_Supply_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Bluetooth_Power_Supply_Pin;
 8000aea:	f248 0320 	movw	r3, #32800	; 0x8020
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000b04:	f000 ffea 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_5V_Light_Sensor_Pin Left_Engine_Direction_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = Left_5V_Light_Sensor_Pin|Left_Engine_Direction_Pin|Buzzer_Pin;
 8000b08:	2361      	movs	r3, #97	; 0x61
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <MX_GPIO_Init+0x144>)
 8000b20:	f000 ffdc 	bl	8001adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2028      	movs	r0, #40	; 0x28
 8000b2a:	f000 ffa0 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2e:	2028      	movs	r0, #40	; 0x28
 8000b30:	f000 ffb9 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	10110000 	.word	0x10110000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <Error_Handler+0x6>

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_ADC_MspInit+0x6c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d121      	bne.n	8000c20 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Left_ADC_Light_Sensor_Pin|Right_ADC_Light_Sensor_Pin;
 8000c0c:	2321      	movs	r3, #33	; 0x21
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_ADC_MspInit+0x74>)
 8000c1c:	f000 ff5e 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40012400 	.word	0x40012400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40011000 	.word	0x40011000

08000c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c44:	d10c      	bne.n	8000c60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_TIM_Base_MspInit+0x58>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_TIM_Base_MspInit+0x58>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_TIM_Base_MspInit+0x58>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c5e:	e010      	b.n	8000c82 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_TIM_Base_MspInit+0x5c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d10b      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_TIM_Base_MspInit+0x58>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_TIM_Base_MspInit+0x58>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_TIM_Base_MspInit+0x58>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40000400 	.word	0x40000400

08000c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb2:	d12b      	bne.n	8000d0c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <HAL_TIM_MspPostInit+0xe0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a2e      	ldr	r2, [pc, #184]	; (8000d74 <HAL_TIM_MspPostInit+0xe0>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <HAL_TIM_MspPostInit+0xe0>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4825      	ldr	r0, [pc, #148]	; (8000d78 <HAL_TIM_MspPostInit+0xe4>)
 8000ce2:	f000 fefb 	bl	8001adc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <HAL_TIM_MspPostInit+0xe8>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	6a3b      	ldr	r3, [r7, #32]
 8000cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cf2:	623b      	str	r3, [r7, #32]
 8000cf4:	6a3b      	ldr	r3, [r7, #32]
 8000cf6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cfa:	623b      	str	r3, [r7, #32]
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_TIM_MspPostInit+0xe8>)
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d0a:	e02e      	b.n	8000d6a <HAL_TIM_MspPostInit+0xd6>
  else if(htim->Instance==TIM3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_TIM_MspPostInit+0xec>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d129      	bne.n	8000d6a <HAL_TIM_MspPostInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_TIM_MspPostInit+0xe0>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_TIM_MspPostInit+0xe0>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_TIM_MspPostInit+0xe0>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <HAL_TIM_MspPostInit+0xe4>)
 8000d42:	f000 fecb 	bl	8001adc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_TIM_MspPostInit+0xe8>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
 8000d64:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <HAL_TIM_MspPostInit+0xe8>)
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	6053      	str	r3, [r2, #4]
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	40000400 	.word	0x40000400

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <HAL_UART_MspInit+0xe0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d132      	bne.n	8000e0a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a29      	ldr	r2, [pc, #164]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Bluetooth_Pin;
 8000dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_Bluetooth_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4619      	mov	r1, r3
 8000de8:	4820      	ldr	r0, [pc, #128]	; (8000e6c <HAL_UART_MspInit+0xe8>)
 8000dea:	f000 fe77 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Bluetooth_Pin;
 8000dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART1_RX_Bluetooth_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	4619      	mov	r1, r3
 8000e02:	481a      	ldr	r0, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0xe8>)
 8000e04:	f000 fe6a 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e08:	e028      	b.n	8000e5c <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <HAL_UART_MspInit+0xec>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d123      	bne.n	8000e5c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1e:	61d3      	str	r3, [r2, #28]
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e44:	230c      	movs	r3, #12
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_UART_MspInit+0xe8>)
 8000e58:	f000 fe40 	bl	8001adc <HAL_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40004400 	.word	0x40004400

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eba:	f000 f8b3 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ec6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eca:	f000 ff91 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f002 fbd8 	bl	80036b8 <__errno>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20005000 	.word	0x20005000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	200002c8 	.word	0x200002c8

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f4e:	e003      	b.n	8000f58 <LoopCopyDataInit>

08000f50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f56:	3104      	adds	r1, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f58:	480a      	ldr	r0, [pc, #40]	; (8000f84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f60:	d3f6      	bcc.n	8000f50 <CopyDataInit>
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f64:	e002      	b.n	8000f6c <LoopFillZerobss>

08000f66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f68:	f842 3b04 	str.w	r3, [r2], #4

08000f6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f70:	d3f9      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f72:	f7ff ffe5 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f002 fba5 	bl	80036c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7a:	f7ff fb39 	bl	80005f0 <main>
  bx lr
 8000f7e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f80:	08004038 	.word	0x08004038
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f88:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000f8c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000f90:	200002c8 	.word	0x200002c8

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x28>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fd55 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fdd0 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fd6d 	bl	8001ac2 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 fd35 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x20>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000008 	.word	0x20000008
 8001044:	200002c0 	.word	0x200002c0

08001048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	200002c0 	.word	0x200002c0

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff fff0 	bl	8001048 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_Delay+0x40>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffe0 	bl	8001048 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000008 	.word	0x20000008

080010a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0be      	b.n	8001240 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fd6c 	bl	8000bbc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 fbb1 	bl	800184c <ADC_ConversionStop_Disable>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 8099 	bne.w	800122e <HAL_ADC_Init+0x18e>
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 8095 	bne.w	800122e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800110c:	f023 0302 	bic.w	r3, r3, #2
 8001110:	f043 0202 	orr.w	r2, r3, #2
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001120:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7b1b      	ldrb	r3, [r3, #12]
 8001126:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001128:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	4313      	orrs	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001138:	d003      	beq.n	8001142 <HAL_ADC_Init+0xa2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <HAL_ADC_Init+0xa8>
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001146:	e000      	b.n	800114a <HAL_ADC_Init+0xaa>
 8001148:	2300      	movs	r3, #0
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7d1b      	ldrb	r3, [r3, #20]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d119      	bne.n	800118c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7b1b      	ldrb	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	3b01      	subs	r3, #1
 8001166:	035a      	lsls	r2, r3, #13
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	e00b      	b.n	800118c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	f043 0220 	orr.w	r2, r3, #32
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_ADC_Init+0x1a8>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	430b      	orrs	r3, r1
 80011b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011bc:	d003      	beq.n	80011c6 <HAL_ADC_Init+0x126>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d104      	bne.n	80011d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	051b      	lsls	r3, r3, #20
 80011ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_ADC_Init+0x1ac>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d10b      	bne.n	800120c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800120a:	e018      	b.n	800123e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	f023 0312 	bic.w	r3, r3, #18
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800122c:	e007      	b.n	800123e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001232:	f043 0210 	orr.w	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800123e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	ffe1f7fd 	.word	0xffe1f7fd
 800124c:	ff1f0efe 	.word	0xff1f0efe

08001250 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_ADC_Start+0x1a>
 8001266:	2302      	movs	r3, #2
 8001268:	e098      	b.n	800139c <HAL_ADC_Start+0x14c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fa98 	bl	80017a8 <ADC_Enable>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 8087 	bne.w	8001392 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a41      	ldr	r2, [pc, #260]	; (80013a4 <HAL_ADC_Start+0x154>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d105      	bne.n	80012ae <HAL_ADC_Start+0x5e>
 80012a2:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <HAL_ADC_Start+0x158>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d115      	bne.n	80012da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d026      	beq.n	8001316 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012d8:	e01d      	b.n	8001316 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_ADC_Start+0x158>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d004      	beq.n	80012fa <HAL_ADC_Start+0xaa>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <HAL_ADC_Start+0x154>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10d      	bne.n	8001316 <HAL_ADC_Start+0xc6>
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <HAL_ADC_Start+0x158>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800130e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f023 0206 	bic.w	r2, r3, #6
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
 800132e:	e002      	b.n	8001336 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f06f 0202 	mvn.w	r2, #2
 8001346:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001352:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001356:	d113      	bne.n	8001380 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800135c:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_ADC_Start+0x154>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d105      	bne.n	800136e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_ADC_Start+0x158>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800136a:	2b00      	cmp	r3, #0
 800136c:	d108      	bne.n	8001380 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	e00c      	b.n	800139a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e003      	b.n	800139a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40012800 	.word	0x40012800
 80013a8:	40012400 	.word	0x40012400

080013ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013c2:	f7ff fe41 	bl	8001048 <HAL_GetTick>
 80013c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	f043 0220 	orr.w	r2, r3, #32
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0c8      	b.n	8001580 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d12a      	bne.n	8001452 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001406:	2b00      	cmp	r3, #0
 8001408:	d123      	bne.n	8001452 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800140a:	e01a      	b.n	8001442 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001412:	d016      	beq.n	8001442 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_ADC_PollForConversion+0x7e>
 800141a:	f7ff fe15 	bl	8001048 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d20b      	bcs.n	8001442 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	f043 0204 	orr.w	r2, r3, #4
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e09e      	b.n	8001580 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0dd      	beq.n	800140c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001450:	e06c      	b.n	800152c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001452:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <HAL_ADC_PollForConversion+0x1dc>)
 8001454:	681c      	ldr	r4, [r3, #0]
 8001456:	2002      	movs	r0, #2
 8001458:	f001 f9be 	bl	80027d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800145c:	4603      	mov	r3, r0
 800145e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6919      	ldr	r1, [r3, #16]
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <HAL_ADC_PollForConversion+0x1e0>)
 800146a:	400b      	ands	r3, r1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d118      	bne.n	80014a2 <HAL_ADC_PollForConversion+0xf6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68d9      	ldr	r1, [r3, #12]
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <HAL_ADC_PollForConversion+0x1e4>)
 8001478:	400b      	ands	r3, r1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d111      	bne.n	80014a2 <HAL_ADC_PollForConversion+0xf6>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6919      	ldr	r1, [r3, #16]
 8001484:	4b43      	ldr	r3, [pc, #268]	; (8001594 <HAL_ADC_PollForConversion+0x1e8>)
 8001486:	400b      	ands	r3, r1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d108      	bne.n	800149e <HAL_ADC_PollForConversion+0xf2>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68d9      	ldr	r1, [r3, #12]
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_ADC_PollForConversion+0x1ec>)
 8001494:	400b      	ands	r3, r1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_ADC_PollForConversion+0xf2>
 800149a:	2314      	movs	r3, #20
 800149c:	e020      	b.n	80014e0 <HAL_ADC_PollForConversion+0x134>
 800149e:	2329      	movs	r3, #41	; 0x29
 80014a0:	e01e      	b.n	80014e0 <HAL_ADC_PollForConversion+0x134>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <HAL_ADC_PollForConversion+0x1e8>)
 80014aa:	400b      	ands	r3, r1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d106      	bne.n	80014be <HAL_ADC_PollForConversion+0x112>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68d9      	ldr	r1, [r3, #12]
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_ADC_PollForConversion+0x1ec>)
 80014b8:	400b      	ands	r3, r1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00d      	beq.n	80014da <HAL_ADC_PollForConversion+0x12e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6919      	ldr	r1, [r3, #16]
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_ADC_PollForConversion+0x1f0>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d108      	bne.n	80014de <HAL_ADC_PollForConversion+0x132>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_ADC_PollForConversion+0x1f0>)
 80014d4:	400b      	ands	r3, r1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_ADC_PollForConversion+0x132>
 80014da:	2354      	movs	r3, #84	; 0x54
 80014dc:	e000      	b.n	80014e0 <HAL_ADC_PollForConversion+0x134>
 80014de:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014e6:	e01d      	b.n	8001524 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d016      	beq.n	800151e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_ADC_PollForConversion+0x15a>
 80014f6:	f7ff fda7 	bl	8001048 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d20b      	bcs.n	800151e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	f043 0204 	orr.w	r2, r3, #4
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e030      	b.n	8001580 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8dd      	bhi.n	80014e8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f06f 0212 	mvn.w	r2, #18
 8001534:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800154c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001550:	d115      	bne.n	800157e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001556:	2b00      	cmp	r3, #0
 8001558:	d111      	bne.n	800157e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	20000000 	.word	0x20000000
 800158c:	24924924 	.word	0x24924924
 8001590:	00924924 	.word	0x00924924
 8001594:	12492492 	.word	0x12492492
 8001598:	00492492 	.word	0x00492492
 800159c:	00249249 	.word	0x00249249

080015a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x20>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e0dc      	b.n	8001792 <HAL_ADC_ConfigChannel+0x1da>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d81c      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3b05      	subs	r3, #5
 80015fa:	221f      	movs	r2, #31
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	4019      	ands	r1, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b05      	subs	r3, #5
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
 8001620:	e03c      	b.n	800169c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d81c      	bhi.n	8001664 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	3b23      	subs	r3, #35	; 0x23
 800163c:	221f      	movs	r2, #31
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	4019      	ands	r1, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	3b23      	subs	r3, #35	; 0x23
 8001656:	fa00 f203 	lsl.w	r2, r0, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
 8001662:	e01b      	b.n	800169c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b41      	subs	r3, #65	; 0x41
 8001676:	221f      	movs	r2, #31
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	4019      	ands	r1, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b41      	subs	r3, #65	; 0x41
 8001690:	fa00 f203 	lsl.w	r2, r0, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d91c      	bls.n	80016de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68d9      	ldr	r1, [r3, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	3b1e      	subs	r3, #30
 80016b6:	2207      	movs	r2, #7
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	4019      	ands	r1, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6898      	ldr	r0, [r3, #8]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	3b1e      	subs	r3, #30
 80016d0:	fa00 f203 	lsl.w	r2, r0, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	e019      	b.n	8001712 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6919      	ldr	r1, [r3, #16]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	2207      	movs	r2, #7
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4019      	ands	r1, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6898      	ldr	r0, [r3, #8]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	fa00 f203 	lsl.w	r2, r0, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b10      	cmp	r3, #16
 8001718:	d003      	beq.n	8001722 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800171e:	2b11      	cmp	r3, #17
 8001720:	d132      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_ADC_ConfigChannel+0x1e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d125      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d126      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001748:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b10      	cmp	r3, #16
 8001750:	d11a      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	0c9a      	lsrs	r2, r3, #18
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001768:	e002      	b.n	8001770 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3b01      	subs	r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f9      	bne.n	800176a <HAL_ADC_ConfigChannel+0x1b2>
 8001776:	e007      	b.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f043 0220 	orr.w	r2, r3, #32
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40012400 	.word	0x40012400
 80017a0:	20000000 	.word	0x20000000
 80017a4:	431bde83 	.word	0x431bde83

080017a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d039      	beq.n	800183a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <ADC_Enable+0x9c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <ADC_Enable+0xa0>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	0c9b      	lsrs	r3, r3, #18
 80017e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017e4:	e002      	b.n	80017ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f9      	bne.n	80017e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017f2:	f7ff fc29 	bl	8001048 <HAL_GetTick>
 80017f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017f8:	e018      	b.n	800182c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017fa:	f7ff fc25 	bl	8001048 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d911      	bls.n	800182c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e007      	b.n	800183c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b01      	cmp	r3, #1
 8001838:	d1df      	bne.n	80017fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	431bde83 	.word	0x431bde83

0800184c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d127      	bne.n	80018b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001876:	f7ff fbe7 	bl	8001048 <HAL_GetTick>
 800187a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800187c:	e014      	b.n	80018a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800187e:	f7ff fbe3 	bl	8001048 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d90d      	bls.n	80018a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f043 0210 	orr.w	r2, r3, #16
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e007      	b.n	80018b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d0e3      	beq.n	800187e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4906      	ldr	r1, [pc, #24]	; (8001958 <__NVIC_EnableIRQ+0x34>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff90 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff2d 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff42 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff90 	bl	80019b0 <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5f 	bl	800195c <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff35 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa2 	bl	8001a14 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b08b      	sub	sp, #44	; 0x2c
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	e127      	b.n	8001d40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af0:	2201      	movs	r2, #1
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8116 	bne.w	8001d3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d034      	beq.n	8001b80 <HAL_GPIO_Init+0xa4>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d80d      	bhi.n	8001b36 <HAL_GPIO_Init+0x5a>
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d02b      	beq.n	8001b76 <HAL_GPIO_Init+0x9a>
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d804      	bhi.n	8001b2c <HAL_GPIO_Init+0x50>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d031      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d01c      	beq.n	8001b64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2a:	e048      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d043      	beq.n	8001bb8 <HAL_GPIO_Init+0xdc>
 8001b30:	2b11      	cmp	r3, #17
 8001b32:	d01b      	beq.n	8001b6c <HAL_GPIO_Init+0x90>
          break;
 8001b34:	e043      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b36:	4a89      	ldr	r2, [pc, #548]	; (8001d5c <HAL_GPIO_Init+0x280>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d026      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b3c:	4a87      	ldr	r2, [pc, #540]	; (8001d5c <HAL_GPIO_Init+0x280>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d806      	bhi.n	8001b50 <HAL_GPIO_Init+0x74>
 8001b42:	4a87      	ldr	r2, [pc, #540]	; (8001d60 <HAL_GPIO_Init+0x284>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d020      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b48:	4a86      	ldr	r2, [pc, #536]	; (8001d64 <HAL_GPIO_Init+0x288>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01d      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
          break;
 8001b4e:	e036      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b50:	4a85      	ldr	r2, [pc, #532]	; (8001d68 <HAL_GPIO_Init+0x28c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d019      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b56:	4a85      	ldr	r2, [pc, #532]	; (8001d6c <HAL_GPIO_Init+0x290>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d016      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b5c:	4a84      	ldr	r2, [pc, #528]	; (8001d70 <HAL_GPIO_Init+0x294>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
          break;
 8001b62:	e02c      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e028      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	3304      	adds	r3, #4
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e023      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e01e      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	330c      	adds	r3, #12
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e019      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b92:	2304      	movs	r3, #4
 8001b94:	623b      	str	r3, [r7, #32]
          break;
 8001b96:	e012      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	611a      	str	r2, [r3, #16]
          break;
 8001baa:	e008      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bac:	2308      	movs	r3, #8
 8001bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	615a      	str	r2, [r3, #20]
          break;
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2bff      	cmp	r3, #255	; 0xff
 8001bc2:	d801      	bhi.n	8001bc8 <HAL_GPIO_Init+0xec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	e001      	b.n	8001bcc <HAL_GPIO_Init+0xf0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d802      	bhi.n	8001bda <HAL_GPIO_Init+0xfe>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x104>
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3b08      	subs	r3, #8
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	210f      	movs	r1, #15
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	6a39      	ldr	r1, [r7, #32]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8096 	beq.w	8001d3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0e:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c26:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x29c>)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_GPIO_Init+0x2a0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x19e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4a      	ldr	r2, [pc, #296]	; (8001d80 <HAL_GPIO_Init+0x2a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x19a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_GPIO_Init+0x2a8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x196>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x2ac>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x192>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c8c:	493a      	ldr	r1, [pc, #232]	; (8001d78 <HAL_GPIO_Init+0x29c>)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4938      	ldr	r1, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4933      	ldr	r1, [pc, #204]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cce:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	492e      	ldr	r1, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4929      	ldr	r1, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	4924      	ldr	r1, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	491f      	ldr	r1, [pc, #124]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	491a      	ldr	r1, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60cb      	str	r3, [r1, #12]
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4915      	ldr	r1, [pc, #84]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f47f aed0 	bne.w	8001af0 <HAL_GPIO_Init+0x14>
  }
}
 8001d50:	bf00      	nop
 8001d52:	372c      	adds	r7, #44	; 0x2c
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	10210000 	.word	0x10210000
 8001d60:	10110000 	.word	0x10110000
 8001d64:	10120000 	.word	0x10120000
 8001d68:	10310000 	.word	0x10310000
 8001d6c:	10320000 	.word	0x10320000
 8001d70:	10220000 	.word	0x10220000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40010800 	.word	0x40010800
 8001d80:	40010c00 	.word	0x40010c00
 8001d84:	40011000 	.word	0x40011000
 8001d88:	40011400 	.word	0x40011400
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	807b      	strh	r3, [r7, #2]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dda:	e003      	b.n	8001de4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f806 	bl	8001e20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e26c      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8087 	beq.w	8001f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e54:	4b92      	ldr	r3, [pc, #584]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d00c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e60:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d112      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e>
 8001e6c:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d10b      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7a:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d06c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x12c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d168      	bne.n	8001f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e246      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x76>
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a7f      	ldr	r2, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	e02e      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x98>
 8001eb2:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7a      	ldr	r2, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b78      	ldr	r3, [pc, #480]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a77      	ldr	r2, [pc, #476]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e01d      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xbc>
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a71      	ldr	r2, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6e      	ldr	r2, [pc, #440]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001ef0:	4b6b      	ldr	r3, [pc, #428]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6a      	ldr	r2, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a67      	ldr	r2, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff f89a 	bl	8001048 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff f896 	bl	8001048 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1fa      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0xe4>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff f886 	bl	8001048 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff f882 	bl	8001048 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1e6      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x10c>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d063      	beq.n	8002036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f7a:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d11c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x18c>
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x176>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1ba      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4939      	ldr	r1, [pc, #228]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	e03a      	b.n	8002036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff f83b 	bl	8001048 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f837 	bl	8001048 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e19b      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4927      	ldr	r1, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x270>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff f81a 	bl	8001048 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7ff f816 	bl	8001048 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e17a      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d03a      	beq.n	80020b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d019      	beq.n	800207e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_RCC_OscConfig+0x274>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fffa 	bl	8001048 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7fe fff6 	bl	8001048 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e15a      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002076:	2001      	movs	r0, #1
 8002078:	f000 fada 	bl	8002630 <RCC_Delay>
 800207c:	e01c      	b.n	80020b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RCC_OscConfig+0x274>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7fe ffe0 	bl	8001048 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208a:	e00f      	b.n	80020ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7fe ffdc 	bl	8001048 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d908      	bls.n	80020ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e140      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	42420000 	.word	0x42420000
 80020a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	4b9e      	ldr	r3, [pc, #632]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e9      	bne.n	800208c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a6 	beq.w	8002212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4b97      	ldr	r3, [pc, #604]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10d      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b94      	ldr	r3, [pc, #592]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a93      	ldr	r2, [pc, #588]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b91      	ldr	r3, [pc, #580]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ee:	2301      	movs	r3, #1
 80020f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b8e      	ldr	r3, [pc, #568]	; (800232c <HAL_RCC_OscConfig+0x4f8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <HAL_RCC_OscConfig+0x4f8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a8a      	ldr	r2, [pc, #552]	; (800232c <HAL_RCC_OscConfig+0x4f8>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe ff9d 	bl	8001048 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe ff99 	bl	8001048 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	; 0x64
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0fd      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_RCC_OscConfig+0x4f8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x312>
 8002138:	4b7b      	ldr	r3, [pc, #492]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a7a      	ldr	r2, [pc, #488]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	e02d      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x334>
 800214e:	4b76      	ldr	r3, [pc, #472]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a75      	ldr	r2, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b73      	ldr	r3, [pc, #460]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a72      	ldr	r2, [pc, #456]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
 8002166:	e01c      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x356>
 8002170:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a6c      	ldr	r2, [pc, #432]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e00b      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a66      	ldr	r2, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	4b64      	ldr	r3, [pc, #400]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a63      	ldr	r2, [pc, #396]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe ff4d 	bl	8001048 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe ff49 	bl	8001048 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0ab      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	4b57      	ldr	r3, [pc, #348]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ee      	beq.n	80021b2 <HAL_RCC_OscConfig+0x37e>
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe ff37 	bl	8001048 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe ff33 	bl	8001048 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e095      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ee      	bne.n	80021de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d105      	bne.n	8002212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a47      	ldr	r2, [pc, #284]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8081 	beq.w	800231e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221c:	4b42      	ldr	r3, [pc, #264]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d061      	beq.n	80022ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d146      	bne.n	80022be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0x4fc>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe ff07 	bl	8001048 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe ff03 	bl	8001048 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e067      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d108      	bne.n	8002278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	492d      	ldr	r1, [pc, #180]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a19      	ldr	r1, [r3, #32]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	430b      	orrs	r3, r1
 800228a:	4927      	ldr	r1, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x4fc>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fed7 	bl	8001048 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe fed3 	bl	8001048 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e037      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x46a>
 80022bc:	e02f      	b.n	800231e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_RCC_OscConfig+0x4fc>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fec0 	bl	8001048 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe febc 	bl	8001048 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e020      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x498>
 80022ea:	e018      	b.n	800231e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e013      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
 8002330:	42420060 	.word	0x42420060

08002334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0d0      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d910      	bls.n	8002378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4965      	ldr	r1, [pc, #404]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b8      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002390:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800239a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	494d      	ldr	r1, [pc, #308]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d040      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d115      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e073      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06b      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4936      	ldr	r1, [pc, #216]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7fe fe10 	bl	8001048 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7fe fe0c 	bl	8001048 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e053      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d210      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4922      	ldr	r1, [pc, #136]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e032      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4916      	ldr	r1, [pc, #88]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c2:	f000 f821 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024c6:	4601      	mov	r1, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	fa21 f303 	lsr.w	r3, r1, r3
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1cc>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1d0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fd6e 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08003fe4 	.word	0x08003fe4
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004

08002508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b490      	push	{r4, r7}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800250e:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002510:	1d3c      	adds	r4, r7, #4
 8002512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x40>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x46>
 8002546:	e02d      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800254a:	623b      	str	r3, [r7, #32]
      break;
 800254c:	e02d      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	0c9b      	lsrs	r3, r3, #18
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800255a:	4413      	add	r3, r2
 800255c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002560:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	0c5b      	lsrs	r3, r3, #17
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800257a:	4413      	add	r3, r2
 800257c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002586:	fb02 f203 	mul.w	r2, r2, r3
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	e004      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	623b      	str	r3, [r7, #32]
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a6:	623b      	str	r3, [r7, #32]
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	6a3b      	ldr	r3, [r7, #32]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3728      	adds	r7, #40	; 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc90      	pop	{r4, r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	08003fbc 	.word	0x08003fbc
 80025bc:	08003fcc 	.word	0x08003fcc
 80025c0:	40021000 	.word	0x40021000
 80025c4:	007a1200 	.word	0x007a1200
 80025c8:	003d0900 	.word	0x003d0900

080025cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d0:	4b02      	ldr	r3, [pc, #8]	; (80025dc <HAL_RCC_GetHCLKFreq+0x10>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	20000000 	.word	0x20000000

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e4:	f7ff fff2 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 80025e8:	4601      	mov	r1, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4a03      	ldr	r2, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	08003ff4 	.word	0x08003ff4

08002608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800260c:	f7ff ffde 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002610:	4601      	mov	r1, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0adb      	lsrs	r3, r3, #11
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4a03      	ldr	r2, [pc, #12]	; (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	08003ff4 	.word	0x08003ff4

08002630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <RCC_Delay+0x34>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <RCC_Delay+0x38>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0a5b      	lsrs	r3, r3, #9
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800264c:	bf00      	nop
  }
  while (Delay --);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	60fa      	str	r2, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f9      	bne.n	800264c <RCC_Delay+0x1c>
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000000 	.word	0x20000000
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d07d      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268c:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4a4b      	ldr	r2, [pc, #300]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	61d3      	str	r3, [r2, #28]
 80026a4:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b0:	2301      	movs	r3, #1
 80026b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d118      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c0:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a42      	ldr	r2, [pc, #264]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026cc:	f7fe fcbc 	bl	8001048 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	e008      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7fe fcb8 	bl	8001048 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e06d      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d02e      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	429a      	cmp	r2, r3
 800270e:	d027      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002710:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002718:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002720:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002726:	4a29      	ldr	r2, [pc, #164]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d014      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe fc87 	bl	8001048 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fc83 	bl	8001048 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e036      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ee      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4917      	ldr	r1, [pc, #92]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	4313      	orrs	r3, r2
 8002770:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	4a13      	ldr	r2, [pc, #76]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002782:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	490b      	ldr	r1, [pc, #44]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4904      	ldr	r1, [pc, #16]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42420440 	.word	0x42420440

080027d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b08d      	sub	sp, #52	; 0x34
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80027e2:	f107 040c 	add.w	r4, r7, #12
 80027e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	2300      	movs	r3, #0
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d07f      	beq.n	800290c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800280c:	2b10      	cmp	r3, #16
 800280e:	d002      	beq.n	8002816 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002810:	2b01      	cmp	r3, #1
 8002812:	d048      	beq.n	80028a6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002814:	e08b      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002816:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800281c:	4b48      	ldr	r3, [pc, #288]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d07f      	beq.n	8002928 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002834:	4413      	add	r3, r2
 8002836:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800283a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0c5b      	lsrs	r3, r3, #17
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002854:	4413      	add	r3, r2
 8002856:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002866:	4a37      	ldr	r2, [pc, #220]	; (8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	fbb2 f2f3 	udiv	r2, r2, r3
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002876:	e004      	b.n	8002882 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	4a33      	ldr	r2, [pc, #204]	; (8002948 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288e:	d102      	bne.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002894:	e048      	b.n	8002928 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4a2c      	ldr	r2, [pc, #176]	; (800294c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028a4:	e040      	b.n	8002928 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b6:	d108      	bne.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80028c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c8:	e01f      	b.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d4:	d109      	bne.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80028d6:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80028e2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e8:	e00f      	b.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f4:	d11a      	bne.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d014      	beq.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002902:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002908:	e010      	b.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800290a:	e00f      	b.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800290c:	f7ff fe7c 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	0b9b      	lsrs	r3, r3, #14
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	3301      	adds	r3, #1
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002926:	e002      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800292c:	bf00      	nop
    }
  }
  return (frequency);
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002930:	4618      	mov	r0, r3
 8002932:	3734      	adds	r7, #52	; 0x34
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	08003fd0 	.word	0x08003fd0
 800293c:	08003fe0 	.word	0x08003fe0
 8002940:	40021000 	.word	0x40021000
 8002944:	007a1200 	.word	0x007a1200
 8002948:	003d0900 	.word	0x003d0900
 800294c:	aaaaaaab 	.word	0xaaaaaaab

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e041      	b.n	80029e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe f95c 	bl	8000c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 f9fc 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e041      	b.n	8002a84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d106      	bne.n	8002a1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f839 	bl	8002a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f000 f9ad 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e0ac      	b.n	8002c14 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	f200 809f 	bhi.w	8002c08 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002b05 	.word	0x08002b05
 8002ad4:	08002c09 	.word	0x08002c09
 8002ad8:	08002c09 	.word	0x08002c09
 8002adc:	08002c09 	.word	0x08002c09
 8002ae0:	08002b45 	.word	0x08002b45
 8002ae4:	08002c09 	.word	0x08002c09
 8002ae8:	08002c09 	.word	0x08002c09
 8002aec:	08002c09 	.word	0x08002c09
 8002af0:	08002b87 	.word	0x08002b87
 8002af4:	08002c09 	.word	0x08002c09
 8002af8:	08002c09 	.word	0x08002c09
 8002afc:	08002c09 	.word	0x08002c09
 8002b00:	08002bc7 	.word	0x08002bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f9a0 	bl	8002e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0208 	orr.w	r2, r2, #8
 8002b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0204 	bic.w	r2, r2, #4
 8002b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6999      	ldr	r1, [r3, #24]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	619a      	str	r2, [r3, #24]
      break;
 8002b42:	e062      	b.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f9e6 	bl	8002f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6999      	ldr	r1, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	021a      	lsls	r2, r3, #8
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	619a      	str	r2, [r3, #24]
      break;
 8002b84:	e041      	b.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fa2f 	bl	8002ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0208 	orr.w	r2, r2, #8
 8002ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0204 	bic.w	r2, r2, #4
 8002bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	61da      	str	r2, [r3, #28]
      break;
 8002bc4:	e021      	b.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fa79 	bl	80030c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69d9      	ldr	r1, [r3, #28]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	021a      	lsls	r2, r3, #8
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	61da      	str	r2, [r3, #28]
      break;
 8002c06:	e000      	b.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIM_ConfigClockSource+0x18>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0a6      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x166>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b40      	cmp	r3, #64	; 0x40
 8002c6a:	d067      	beq.n	8002d3c <HAL_TIM_ConfigClockSource+0x120>
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d80b      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x6c>
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d073      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x140>
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d802      	bhi.n	8002c7e <HAL_TIM_ConfigClockSource+0x62>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d06f      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c7c:	e078      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d06c      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x140>
 8002c82:	2b30      	cmp	r3, #48	; 0x30
 8002c84:	d06a      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c86:	e073      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_TIM_ConfigClockSource+0x8c>
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d804      	bhi.n	8002c9a <HAL_TIM_ConfigClockSource+0x7e>
 8002c90:	2b50      	cmp	r3, #80	; 0x50
 8002c92:	d033      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0xe0>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d041      	beq.n	8002d1c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c98:	e06a      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d066      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x152>
 8002ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca4:	d017      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ca6:	e063      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f000 fac9 	bl	800324e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e04c      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f000 fab2 	bl	800324e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cf8:	609a      	str	r2, [r3, #8]
      break;
 8002cfa:	e039      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f000 fa29 	bl	8003160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2150      	movs	r1, #80	; 0x50
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fa80 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002d1a:	e029      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f000 fa47 	bl	80031bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2160      	movs	r1, #96	; 0x60
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fa70 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002d3a:	e019      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f000 fa09 	bl	8003160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fa60 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002d5a:	e009      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f000 fa57 	bl	800321a <TIM_ITRx_SetConfig>
        break;
 8002d6c:	e000      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d007      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0xbc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <TIM_Base_SetConfig+0xc0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d108      	bne.n	8002dce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d007      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <TIM_Base_SetConfig+0xbc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <TIM_Base_SetConfig+0xc0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d108      	bne.n	8002e00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	615a      	str	r2, [r3, #20]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800

08002e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f023 0201 	bic.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f023 0302 	bic.w	r3, r3, #2
 8002e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <TIM_OC1_SetConfig+0xc8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10c      	bne.n	8002ec6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0308 	bic.w	r3, r3, #8
 8002eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <TIM_OC1_SetConfig+0xc8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00

08002f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0210 	bic.w	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 0320 	bic.w	r3, r3, #32
 8002f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <TIM_OC2_SetConfig+0xd0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d10d      	bne.n	8002f98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <TIM_OC2_SetConfig+0xd0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d113      	bne.n	8002fc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00

08002ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <TIM_OC3_SetConfig+0xd0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10d      	bne.n	800306a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <TIM_OC3_SetConfig+0xd0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d113      	bne.n	800309a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	621a      	str	r2, [r3, #32]
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00

080030c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800310e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	031b      	lsls	r3, r3, #12
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0f      	ldr	r2, [pc, #60]	; (800315c <TIM_OC4_SetConfig+0x98>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d109      	bne.n	8003138 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800312a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	40012c00 	.word	0x40012c00

08003160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0201 	bic.w	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 030a 	bic.w	r3, r3, #10
 800319c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f023 0210 	bic.w	r2, r3, #16
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	031b      	lsls	r3, r3, #12
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	f043 0307 	orr.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800324e:	b480      	push	{r7}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003268:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	021a      	lsls	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	431a      	orrs	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4313      	orrs	r3, r2
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e046      	b.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a16      	ldr	r2, [pc, #88]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d009      	beq.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a10      	ldr	r2, [pc, #64]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10c      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4313      	orrs	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	40012c00 	.word	0x40012c00
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800

08003348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e03f      	b.n	80033da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fd08 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800338a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f905 	bl	800359c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b08a      	sub	sp, #40	; 0x28
 80033e6:	af02      	add	r7, sp, #8
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d17c      	bne.n	80034fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_UART_Transmit+0x2c>
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e075      	b.n	80034fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_UART_Transmit+0x3e>
 800341c:	2302      	movs	r3, #2
 800341e:	e06e      	b.n	80034fe <HAL_UART_Transmit+0x11c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003436:	f7fd fe07 	bl	8001048 <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003450:	d108      	bne.n	8003464 <HAL_UART_Transmit+0x82>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e003      	b.n	800346c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003474:	e02a      	b.n	80034cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f840 	bl	8003506 <UART_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e036      	b.n	80034fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	3302      	adds	r3, #2
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	e007      	b.n	80034be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1cf      	bne.n	8003476 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2200      	movs	r2, #0
 80034de:	2140      	movs	r1, #64	; 0x40
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f810 	bl	8003506 <UART_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e006      	b.n	80034fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003516:	e02c      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d028      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <UART_WaitOnFlagUntilTimeout+0x30>
 8003526:	f7fd fd8f 	bl	8001048 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	429a      	cmp	r2, r3
 8003534:	d21d      	bcs.n	8003572 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003544:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00f      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	429a      	cmp	r2, r3
 800358e:	d0c3      	beq.n	8003518 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035d6:	f023 030c 	bic.w	r3, r3, #12
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	430b      	orrs	r3, r1
 80035e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <UART_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003604:	f7ff f800 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	e002      	b.n	8003612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800360c:	f7fe ffe8 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8003610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <UART_SetConfig+0x118>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	0119      	lsls	r1, r3, #4
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009a      	lsls	r2, r3, #2
 800363c:	441a      	add	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fbb2 f2f3 	udiv	r2, r2, r3
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <UART_SetConfig+0x118>)
 800364a:	fba3 0302 	umull	r0, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	2064      	movs	r0, #100	; 0x64
 8003652:	fb00 f303 	mul.w	r3, r0, r3
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	3332      	adds	r3, #50	; 0x32
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <UART_SetConfig+0x118>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	4419      	add	r1, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009a      	lsls	r2, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <UART_SetConfig+0x118>)
 8003682:	fba3 0302 	umull	r0, r3, r3, r2
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2064      	movs	r0, #100	; 0x64
 800368a:	fb00 f303 	mul.w	r3, r0, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	3332      	adds	r3, #50	; 0x32
 8003694:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <UART_SetConfig+0x118>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	f003 020f 	and.w	r2, r3, #15
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	440a      	add	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40013800 	.word	0x40013800
 80036b4:	51eb851f 	.word	0x51eb851f

080036b8 <__errno>:
 80036b8:	4b01      	ldr	r3, [pc, #4]	; (80036c0 <__errno+0x8>)
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	2000000c 	.word	0x2000000c

080036c4 <__libc_init_array>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	2500      	movs	r5, #0
 80036c8:	4e0c      	ldr	r6, [pc, #48]	; (80036fc <__libc_init_array+0x38>)
 80036ca:	4c0d      	ldr	r4, [pc, #52]	; (8003700 <__libc_init_array+0x3c>)
 80036cc:	1ba4      	subs	r4, r4, r6
 80036ce:	10a4      	asrs	r4, r4, #2
 80036d0:	42a5      	cmp	r5, r4
 80036d2:	d109      	bne.n	80036e8 <__libc_init_array+0x24>
 80036d4:	f000 fc34 	bl	8003f40 <_init>
 80036d8:	2500      	movs	r5, #0
 80036da:	4e0a      	ldr	r6, [pc, #40]	; (8003704 <__libc_init_array+0x40>)
 80036dc:	4c0a      	ldr	r4, [pc, #40]	; (8003708 <__libc_init_array+0x44>)
 80036de:	1ba4      	subs	r4, r4, r6
 80036e0:	10a4      	asrs	r4, r4, #2
 80036e2:	42a5      	cmp	r5, r4
 80036e4:	d105      	bne.n	80036f2 <__libc_init_array+0x2e>
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ec:	4798      	blx	r3
 80036ee:	3501      	adds	r5, #1
 80036f0:	e7ee      	b.n	80036d0 <__libc_init_array+0xc>
 80036f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036f6:	4798      	blx	r3
 80036f8:	3501      	adds	r5, #1
 80036fa:	e7f2      	b.n	80036e2 <__libc_init_array+0x1e>
 80036fc:	08004030 	.word	0x08004030
 8003700:	08004030 	.word	0x08004030
 8003704:	08004030 	.word	0x08004030
 8003708:	08004034 	.word	0x08004034

0800370c <memset>:
 800370c:	4603      	mov	r3, r0
 800370e:	4402      	add	r2, r0
 8003710:	4293      	cmp	r3, r2
 8003712:	d100      	bne.n	8003716 <memset+0xa>
 8003714:	4770      	bx	lr
 8003716:	f803 1b01 	strb.w	r1, [r3], #1
 800371a:	e7f9      	b.n	8003710 <memset+0x4>

0800371c <siprintf>:
 800371c:	b40e      	push	{r1, r2, r3}
 800371e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003722:	b500      	push	{lr}
 8003724:	b09c      	sub	sp, #112	; 0x70
 8003726:	ab1d      	add	r3, sp, #116	; 0x74
 8003728:	9002      	str	r0, [sp, #8]
 800372a:	9006      	str	r0, [sp, #24]
 800372c:	9107      	str	r1, [sp, #28]
 800372e:	9104      	str	r1, [sp, #16]
 8003730:	4808      	ldr	r0, [pc, #32]	; (8003754 <siprintf+0x38>)
 8003732:	4909      	ldr	r1, [pc, #36]	; (8003758 <siprintf+0x3c>)
 8003734:	f853 2b04 	ldr.w	r2, [r3], #4
 8003738:	9105      	str	r1, [sp, #20]
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	a902      	add	r1, sp, #8
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	f000 f866 	bl	8003810 <_svfiprintf_r>
 8003744:	2200      	movs	r2, #0
 8003746:	9b02      	ldr	r3, [sp, #8]
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	b01c      	add	sp, #112	; 0x70
 800374c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003750:	b003      	add	sp, #12
 8003752:	4770      	bx	lr
 8003754:	2000000c 	.word	0x2000000c
 8003758:	ffff0208 	.word	0xffff0208

0800375c <__ssputs_r>:
 800375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	688e      	ldr	r6, [r1, #8]
 8003762:	4682      	mov	sl, r0
 8003764:	429e      	cmp	r6, r3
 8003766:	460c      	mov	r4, r1
 8003768:	4690      	mov	r8, r2
 800376a:	4699      	mov	r9, r3
 800376c:	d837      	bhi.n	80037de <__ssputs_r+0x82>
 800376e:	898a      	ldrh	r2, [r1, #12]
 8003770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003774:	d031      	beq.n	80037da <__ssputs_r+0x7e>
 8003776:	2302      	movs	r3, #2
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	6909      	ldr	r1, [r1, #16]
 800377c:	1a6f      	subs	r7, r5, r1
 800377e:	6965      	ldr	r5, [r4, #20]
 8003780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003784:	fb95 f5f3 	sdiv	r5, r5, r3
 8003788:	f109 0301 	add.w	r3, r9, #1
 800378c:	443b      	add	r3, r7
 800378e:	429d      	cmp	r5, r3
 8003790:	bf38      	it	cc
 8003792:	461d      	movcc	r5, r3
 8003794:	0553      	lsls	r3, r2, #21
 8003796:	d530      	bpl.n	80037fa <__ssputs_r+0x9e>
 8003798:	4629      	mov	r1, r5
 800379a:	f000 fb37 	bl	8003e0c <_malloc_r>
 800379e:	4606      	mov	r6, r0
 80037a0:	b950      	cbnz	r0, 80037b8 <__ssputs_r+0x5c>
 80037a2:	230c      	movs	r3, #12
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f8ca 3000 	str.w	r3, [sl]
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b2:	81a3      	strh	r3, [r4, #12]
 80037b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b8:	463a      	mov	r2, r7
 80037ba:	6921      	ldr	r1, [r4, #16]
 80037bc:	f000 fab6 	bl	8003d2c <memcpy>
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ca:	81a3      	strh	r3, [r4, #12]
 80037cc:	6126      	str	r6, [r4, #16]
 80037ce:	443e      	add	r6, r7
 80037d0:	6026      	str	r6, [r4, #0]
 80037d2:	464e      	mov	r6, r9
 80037d4:	6165      	str	r5, [r4, #20]
 80037d6:	1bed      	subs	r5, r5, r7
 80037d8:	60a5      	str	r5, [r4, #8]
 80037da:	454e      	cmp	r6, r9
 80037dc:	d900      	bls.n	80037e0 <__ssputs_r+0x84>
 80037de:	464e      	mov	r6, r9
 80037e0:	4632      	mov	r2, r6
 80037e2:	4641      	mov	r1, r8
 80037e4:	6820      	ldr	r0, [r4, #0]
 80037e6:	f000 faac 	bl	8003d42 <memmove>
 80037ea:	68a3      	ldr	r3, [r4, #8]
 80037ec:	2000      	movs	r0, #0
 80037ee:	1b9b      	subs	r3, r3, r6
 80037f0:	60a3      	str	r3, [r4, #8]
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	441e      	add	r6, r3
 80037f6:	6026      	str	r6, [r4, #0]
 80037f8:	e7dc      	b.n	80037b4 <__ssputs_r+0x58>
 80037fa:	462a      	mov	r2, r5
 80037fc:	f000 fb60 	bl	8003ec0 <_realloc_r>
 8003800:	4606      	mov	r6, r0
 8003802:	2800      	cmp	r0, #0
 8003804:	d1e2      	bne.n	80037cc <__ssputs_r+0x70>
 8003806:	6921      	ldr	r1, [r4, #16]
 8003808:	4650      	mov	r0, sl
 800380a:	f000 fab3 	bl	8003d74 <_free_r>
 800380e:	e7c8      	b.n	80037a2 <__ssputs_r+0x46>

08003810 <_svfiprintf_r>:
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003814:	461d      	mov	r5, r3
 8003816:	898b      	ldrh	r3, [r1, #12]
 8003818:	b09d      	sub	sp, #116	; 0x74
 800381a:	061f      	lsls	r7, r3, #24
 800381c:	4680      	mov	r8, r0
 800381e:	460c      	mov	r4, r1
 8003820:	4616      	mov	r6, r2
 8003822:	d50f      	bpl.n	8003844 <_svfiprintf_r+0x34>
 8003824:	690b      	ldr	r3, [r1, #16]
 8003826:	b96b      	cbnz	r3, 8003844 <_svfiprintf_r+0x34>
 8003828:	2140      	movs	r1, #64	; 0x40
 800382a:	f000 faef 	bl	8003e0c <_malloc_r>
 800382e:	6020      	str	r0, [r4, #0]
 8003830:	6120      	str	r0, [r4, #16]
 8003832:	b928      	cbnz	r0, 8003840 <_svfiprintf_r+0x30>
 8003834:	230c      	movs	r3, #12
 8003836:	f8c8 3000 	str.w	r3, [r8]
 800383a:	f04f 30ff 	mov.w	r0, #4294967295
 800383e:	e0c8      	b.n	80039d2 <_svfiprintf_r+0x1c2>
 8003840:	2340      	movs	r3, #64	; 0x40
 8003842:	6163      	str	r3, [r4, #20]
 8003844:	2300      	movs	r3, #0
 8003846:	9309      	str	r3, [sp, #36]	; 0x24
 8003848:	2320      	movs	r3, #32
 800384a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800384e:	2330      	movs	r3, #48	; 0x30
 8003850:	f04f 0b01 	mov.w	fp, #1
 8003854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003858:	9503      	str	r5, [sp, #12]
 800385a:	4637      	mov	r7, r6
 800385c:	463d      	mov	r5, r7
 800385e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003862:	b10b      	cbz	r3, 8003868 <_svfiprintf_r+0x58>
 8003864:	2b25      	cmp	r3, #37	; 0x25
 8003866:	d13e      	bne.n	80038e6 <_svfiprintf_r+0xd6>
 8003868:	ebb7 0a06 	subs.w	sl, r7, r6
 800386c:	d00b      	beq.n	8003886 <_svfiprintf_r+0x76>
 800386e:	4653      	mov	r3, sl
 8003870:	4632      	mov	r2, r6
 8003872:	4621      	mov	r1, r4
 8003874:	4640      	mov	r0, r8
 8003876:	f7ff ff71 	bl	800375c <__ssputs_r>
 800387a:	3001      	adds	r0, #1
 800387c:	f000 80a4 	beq.w	80039c8 <_svfiprintf_r+0x1b8>
 8003880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003882:	4453      	add	r3, sl
 8003884:	9309      	str	r3, [sp, #36]	; 0x24
 8003886:	783b      	ldrb	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 809d 	beq.w	80039c8 <_svfiprintf_r+0x1b8>
 800388e:	2300      	movs	r3, #0
 8003890:	f04f 32ff 	mov.w	r2, #4294967295
 8003894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003898:	9304      	str	r3, [sp, #16]
 800389a:	9307      	str	r3, [sp, #28]
 800389c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038a0:	931a      	str	r3, [sp, #104]	; 0x68
 80038a2:	462f      	mov	r7, r5
 80038a4:	2205      	movs	r2, #5
 80038a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80038aa:	4850      	ldr	r0, [pc, #320]	; (80039ec <_svfiprintf_r+0x1dc>)
 80038ac:	f000 fa30 	bl	8003d10 <memchr>
 80038b0:	9b04      	ldr	r3, [sp, #16]
 80038b2:	b9d0      	cbnz	r0, 80038ea <_svfiprintf_r+0xda>
 80038b4:	06d9      	lsls	r1, r3, #27
 80038b6:	bf44      	itt	mi
 80038b8:	2220      	movmi	r2, #32
 80038ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038be:	071a      	lsls	r2, r3, #28
 80038c0:	bf44      	itt	mi
 80038c2:	222b      	movmi	r2, #43	; 0x2b
 80038c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038c8:	782a      	ldrb	r2, [r5, #0]
 80038ca:	2a2a      	cmp	r2, #42	; 0x2a
 80038cc:	d015      	beq.n	80038fa <_svfiprintf_r+0xea>
 80038ce:	462f      	mov	r7, r5
 80038d0:	2000      	movs	r0, #0
 80038d2:	250a      	movs	r5, #10
 80038d4:	9a07      	ldr	r2, [sp, #28]
 80038d6:	4639      	mov	r1, r7
 80038d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038dc:	3b30      	subs	r3, #48	; 0x30
 80038de:	2b09      	cmp	r3, #9
 80038e0:	d94d      	bls.n	800397e <_svfiprintf_r+0x16e>
 80038e2:	b1b8      	cbz	r0, 8003914 <_svfiprintf_r+0x104>
 80038e4:	e00f      	b.n	8003906 <_svfiprintf_r+0xf6>
 80038e6:	462f      	mov	r7, r5
 80038e8:	e7b8      	b.n	800385c <_svfiprintf_r+0x4c>
 80038ea:	4a40      	ldr	r2, [pc, #256]	; (80039ec <_svfiprintf_r+0x1dc>)
 80038ec:	463d      	mov	r5, r7
 80038ee:	1a80      	subs	r0, r0, r2
 80038f0:	fa0b f000 	lsl.w	r0, fp, r0
 80038f4:	4318      	orrs	r0, r3
 80038f6:	9004      	str	r0, [sp, #16]
 80038f8:	e7d3      	b.n	80038a2 <_svfiprintf_r+0x92>
 80038fa:	9a03      	ldr	r2, [sp, #12]
 80038fc:	1d11      	adds	r1, r2, #4
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	9103      	str	r1, [sp, #12]
 8003902:	2a00      	cmp	r2, #0
 8003904:	db01      	blt.n	800390a <_svfiprintf_r+0xfa>
 8003906:	9207      	str	r2, [sp, #28]
 8003908:	e004      	b.n	8003914 <_svfiprintf_r+0x104>
 800390a:	4252      	negs	r2, r2
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	9207      	str	r2, [sp, #28]
 8003912:	9304      	str	r3, [sp, #16]
 8003914:	783b      	ldrb	r3, [r7, #0]
 8003916:	2b2e      	cmp	r3, #46	; 0x2e
 8003918:	d10c      	bne.n	8003934 <_svfiprintf_r+0x124>
 800391a:	787b      	ldrb	r3, [r7, #1]
 800391c:	2b2a      	cmp	r3, #42	; 0x2a
 800391e:	d133      	bne.n	8003988 <_svfiprintf_r+0x178>
 8003920:	9b03      	ldr	r3, [sp, #12]
 8003922:	3702      	adds	r7, #2
 8003924:	1d1a      	adds	r2, r3, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	9203      	str	r2, [sp, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	bfb8      	it	lt
 800392e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003932:	9305      	str	r3, [sp, #20]
 8003934:	4d2e      	ldr	r5, [pc, #184]	; (80039f0 <_svfiprintf_r+0x1e0>)
 8003936:	2203      	movs	r2, #3
 8003938:	7839      	ldrb	r1, [r7, #0]
 800393a:	4628      	mov	r0, r5
 800393c:	f000 f9e8 	bl	8003d10 <memchr>
 8003940:	b138      	cbz	r0, 8003952 <_svfiprintf_r+0x142>
 8003942:	2340      	movs	r3, #64	; 0x40
 8003944:	1b40      	subs	r0, r0, r5
 8003946:	fa03 f000 	lsl.w	r0, r3, r0
 800394a:	9b04      	ldr	r3, [sp, #16]
 800394c:	3701      	adds	r7, #1
 800394e:	4303      	orrs	r3, r0
 8003950:	9304      	str	r3, [sp, #16]
 8003952:	7839      	ldrb	r1, [r7, #0]
 8003954:	2206      	movs	r2, #6
 8003956:	4827      	ldr	r0, [pc, #156]	; (80039f4 <_svfiprintf_r+0x1e4>)
 8003958:	1c7e      	adds	r6, r7, #1
 800395a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800395e:	f000 f9d7 	bl	8003d10 <memchr>
 8003962:	2800      	cmp	r0, #0
 8003964:	d038      	beq.n	80039d8 <_svfiprintf_r+0x1c8>
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <_svfiprintf_r+0x1e8>)
 8003968:	bb13      	cbnz	r3, 80039b0 <_svfiprintf_r+0x1a0>
 800396a:	9b03      	ldr	r3, [sp, #12]
 800396c:	3307      	adds	r3, #7
 800396e:	f023 0307 	bic.w	r3, r3, #7
 8003972:	3308      	adds	r3, #8
 8003974:	9303      	str	r3, [sp, #12]
 8003976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003978:	444b      	add	r3, r9
 800397a:	9309      	str	r3, [sp, #36]	; 0x24
 800397c:	e76d      	b.n	800385a <_svfiprintf_r+0x4a>
 800397e:	fb05 3202 	mla	r2, r5, r2, r3
 8003982:	2001      	movs	r0, #1
 8003984:	460f      	mov	r7, r1
 8003986:	e7a6      	b.n	80038d6 <_svfiprintf_r+0xc6>
 8003988:	2300      	movs	r3, #0
 800398a:	250a      	movs	r5, #10
 800398c:	4619      	mov	r1, r3
 800398e:	3701      	adds	r7, #1
 8003990:	9305      	str	r3, [sp, #20]
 8003992:	4638      	mov	r0, r7
 8003994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003998:	3a30      	subs	r2, #48	; 0x30
 800399a:	2a09      	cmp	r2, #9
 800399c:	d903      	bls.n	80039a6 <_svfiprintf_r+0x196>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0c8      	beq.n	8003934 <_svfiprintf_r+0x124>
 80039a2:	9105      	str	r1, [sp, #20]
 80039a4:	e7c6      	b.n	8003934 <_svfiprintf_r+0x124>
 80039a6:	fb05 2101 	mla	r1, r5, r1, r2
 80039aa:	2301      	movs	r3, #1
 80039ac:	4607      	mov	r7, r0
 80039ae:	e7f0      	b.n	8003992 <_svfiprintf_r+0x182>
 80039b0:	ab03      	add	r3, sp, #12
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4622      	mov	r2, r4
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <_svfiprintf_r+0x1ec>)
 80039b8:	a904      	add	r1, sp, #16
 80039ba:	4640      	mov	r0, r8
 80039bc:	f3af 8000 	nop.w
 80039c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80039c4:	4681      	mov	r9, r0
 80039c6:	d1d6      	bne.n	8003976 <_svfiprintf_r+0x166>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	065b      	lsls	r3, r3, #25
 80039cc:	f53f af35 	bmi.w	800383a <_svfiprintf_r+0x2a>
 80039d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039d2:	b01d      	add	sp, #116	; 0x74
 80039d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d8:	ab03      	add	r3, sp, #12
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	4622      	mov	r2, r4
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <_svfiprintf_r+0x1ec>)
 80039e0:	a904      	add	r1, sp, #16
 80039e2:	4640      	mov	r0, r8
 80039e4:	f000 f882 	bl	8003aec <_printf_i>
 80039e8:	e7ea      	b.n	80039c0 <_svfiprintf_r+0x1b0>
 80039ea:	bf00      	nop
 80039ec:	08003ffc 	.word	0x08003ffc
 80039f0:	08004002 	.word	0x08004002
 80039f4:	08004006 	.word	0x08004006
 80039f8:	00000000 	.word	0x00000000
 80039fc:	0800375d 	.word	0x0800375d

08003a00 <_printf_common>:
 8003a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a04:	4691      	mov	r9, r2
 8003a06:	461f      	mov	r7, r3
 8003a08:	688a      	ldr	r2, [r1, #8]
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bfb8      	it	lt
 8003a12:	4613      	movlt	r3, r2
 8003a14:	f8c9 3000 	str.w	r3, [r9]
 8003a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a22:	b112      	cbz	r2, 8003a2a <_printf_common+0x2a>
 8003a24:	3301      	adds	r3, #1
 8003a26:	f8c9 3000 	str.w	r3, [r9]
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	0699      	lsls	r1, r3, #26
 8003a2e:	bf42      	ittt	mi
 8003a30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a34:	3302      	addmi	r3, #2
 8003a36:	f8c9 3000 	strmi.w	r3, [r9]
 8003a3a:	6825      	ldr	r5, [r4, #0]
 8003a3c:	f015 0506 	ands.w	r5, r5, #6
 8003a40:	d107      	bne.n	8003a52 <_printf_common+0x52>
 8003a42:	f104 0a19 	add.w	sl, r4, #25
 8003a46:	68e3      	ldr	r3, [r4, #12]
 8003a48:	f8d9 2000 	ldr.w	r2, [r9]
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	42ab      	cmp	r3, r5
 8003a50:	dc29      	bgt.n	8003aa6 <_printf_common+0xa6>
 8003a52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	3300      	adds	r3, #0
 8003a5a:	bf18      	it	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	0692      	lsls	r2, r2, #26
 8003a60:	d42e      	bmi.n	8003ac0 <_printf_common+0xc0>
 8003a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a66:	4639      	mov	r1, r7
 8003a68:	4630      	mov	r0, r6
 8003a6a:	47c0      	blx	r8
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	d021      	beq.n	8003ab4 <_printf_common+0xb4>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	68e5      	ldr	r5, [r4, #12]
 8003a74:	f003 0306 	and.w	r3, r3, #6
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	bf18      	it	ne
 8003a7c:	2500      	movne	r5, #0
 8003a7e:	f8d9 2000 	ldr.w	r2, [r9]
 8003a82:	f04f 0900 	mov.w	r9, #0
 8003a86:	bf08      	it	eq
 8003a88:	1aad      	subeq	r5, r5, r2
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	6922      	ldr	r2, [r4, #16]
 8003a8e:	bf08      	it	eq
 8003a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bfc4      	itt	gt
 8003a98:	1a9b      	subgt	r3, r3, r2
 8003a9a:	18ed      	addgt	r5, r5, r3
 8003a9c:	341a      	adds	r4, #26
 8003a9e:	454d      	cmp	r5, r9
 8003aa0:	d11a      	bne.n	8003ad8 <_printf_common+0xd8>
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	e008      	b.n	8003ab8 <_printf_common+0xb8>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4652      	mov	r2, sl
 8003aaa:	4639      	mov	r1, r7
 8003aac:	4630      	mov	r0, r6
 8003aae:	47c0      	blx	r8
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d103      	bne.n	8003abc <_printf_common+0xbc>
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abc:	3501      	adds	r5, #1
 8003abe:	e7c2      	b.n	8003a46 <_printf_common+0x46>
 8003ac0:	2030      	movs	r0, #48	; 0x30
 8003ac2:	18e1      	adds	r1, r4, r3
 8003ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ace:	4422      	add	r2, r4
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ad6:	e7c4      	b.n	8003a62 <_printf_common+0x62>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4622      	mov	r2, r4
 8003adc:	4639      	mov	r1, r7
 8003ade:	4630      	mov	r0, r6
 8003ae0:	47c0      	blx	r8
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d0e6      	beq.n	8003ab4 <_printf_common+0xb4>
 8003ae6:	f109 0901 	add.w	r9, r9, #1
 8003aea:	e7d8      	b.n	8003a9e <_printf_common+0x9e>

08003aec <_printf_i>:
 8003aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003af0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003af4:	460c      	mov	r4, r1
 8003af6:	7e09      	ldrb	r1, [r1, #24]
 8003af8:	b085      	sub	sp, #20
 8003afa:	296e      	cmp	r1, #110	; 0x6e
 8003afc:	4617      	mov	r7, r2
 8003afe:	4606      	mov	r6, r0
 8003b00:	4698      	mov	r8, r3
 8003b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b04:	f000 80b3 	beq.w	8003c6e <_printf_i+0x182>
 8003b08:	d822      	bhi.n	8003b50 <_printf_i+0x64>
 8003b0a:	2963      	cmp	r1, #99	; 0x63
 8003b0c:	d036      	beq.n	8003b7c <_printf_i+0x90>
 8003b0e:	d80a      	bhi.n	8003b26 <_printf_i+0x3a>
 8003b10:	2900      	cmp	r1, #0
 8003b12:	f000 80b9 	beq.w	8003c88 <_printf_i+0x19c>
 8003b16:	2958      	cmp	r1, #88	; 0x58
 8003b18:	f000 8083 	beq.w	8003c22 <_printf_i+0x136>
 8003b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003b24:	e032      	b.n	8003b8c <_printf_i+0xa0>
 8003b26:	2964      	cmp	r1, #100	; 0x64
 8003b28:	d001      	beq.n	8003b2e <_printf_i+0x42>
 8003b2a:	2969      	cmp	r1, #105	; 0x69
 8003b2c:	d1f6      	bne.n	8003b1c <_printf_i+0x30>
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	6813      	ldr	r3, [r2, #0]
 8003b32:	0605      	lsls	r5, r0, #24
 8003b34:	f103 0104 	add.w	r1, r3, #4
 8003b38:	d52a      	bpl.n	8003b90 <_printf_i+0xa4>
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6011      	str	r1, [r2, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	da03      	bge.n	8003b4a <_printf_i+0x5e>
 8003b42:	222d      	movs	r2, #45	; 0x2d
 8003b44:	425b      	negs	r3, r3
 8003b46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003b4a:	486f      	ldr	r0, [pc, #444]	; (8003d08 <_printf_i+0x21c>)
 8003b4c:	220a      	movs	r2, #10
 8003b4e:	e039      	b.n	8003bc4 <_printf_i+0xd8>
 8003b50:	2973      	cmp	r1, #115	; 0x73
 8003b52:	f000 809d 	beq.w	8003c90 <_printf_i+0x1a4>
 8003b56:	d808      	bhi.n	8003b6a <_printf_i+0x7e>
 8003b58:	296f      	cmp	r1, #111	; 0x6f
 8003b5a:	d020      	beq.n	8003b9e <_printf_i+0xb2>
 8003b5c:	2970      	cmp	r1, #112	; 0x70
 8003b5e:	d1dd      	bne.n	8003b1c <_printf_i+0x30>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f043 0320 	orr.w	r3, r3, #32
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	e003      	b.n	8003b72 <_printf_i+0x86>
 8003b6a:	2975      	cmp	r1, #117	; 0x75
 8003b6c:	d017      	beq.n	8003b9e <_printf_i+0xb2>
 8003b6e:	2978      	cmp	r1, #120	; 0x78
 8003b70:	d1d4      	bne.n	8003b1c <_printf_i+0x30>
 8003b72:	2378      	movs	r3, #120	; 0x78
 8003b74:	4865      	ldr	r0, [pc, #404]	; (8003d0c <_printf_i+0x220>)
 8003b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b7a:	e055      	b.n	8003c28 <_printf_i+0x13c>
 8003b7c:	6813      	ldr	r3, [r2, #0]
 8003b7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b82:	1d19      	adds	r1, r3, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6011      	str	r1, [r2, #0]
 8003b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e08c      	b.n	8003caa <_printf_i+0x1be>
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b96:	6011      	str	r1, [r2, #0]
 8003b98:	bf18      	it	ne
 8003b9a:	b21b      	sxthne	r3, r3
 8003b9c:	e7cf      	b.n	8003b3e <_printf_i+0x52>
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	6825      	ldr	r5, [r4, #0]
 8003ba2:	1d18      	adds	r0, r3, #4
 8003ba4:	6010      	str	r0, [r2, #0]
 8003ba6:	0628      	lsls	r0, r5, #24
 8003ba8:	d501      	bpl.n	8003bae <_printf_i+0xc2>
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	e002      	b.n	8003bb4 <_printf_i+0xc8>
 8003bae:	0668      	lsls	r0, r5, #25
 8003bb0:	d5fb      	bpl.n	8003baa <_printf_i+0xbe>
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	296f      	cmp	r1, #111	; 0x6f
 8003bb6:	bf14      	ite	ne
 8003bb8:	220a      	movne	r2, #10
 8003bba:	2208      	moveq	r2, #8
 8003bbc:	4852      	ldr	r0, [pc, #328]	; (8003d08 <_printf_i+0x21c>)
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bc4:	6865      	ldr	r5, [r4, #4]
 8003bc6:	2d00      	cmp	r5, #0
 8003bc8:	60a5      	str	r5, [r4, #8]
 8003bca:	f2c0 8095 	blt.w	8003cf8 <_printf_i+0x20c>
 8003bce:	6821      	ldr	r1, [r4, #0]
 8003bd0:	f021 0104 	bic.w	r1, r1, #4
 8003bd4:	6021      	str	r1, [r4, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d13d      	bne.n	8003c56 <_printf_i+0x16a>
 8003bda:	2d00      	cmp	r5, #0
 8003bdc:	f040 808e 	bne.w	8003cfc <_printf_i+0x210>
 8003be0:	4665      	mov	r5, ip
 8003be2:	2a08      	cmp	r2, #8
 8003be4:	d10b      	bne.n	8003bfe <_printf_i+0x112>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	07db      	lsls	r3, r3, #31
 8003bea:	d508      	bpl.n	8003bfe <_printf_i+0x112>
 8003bec:	6923      	ldr	r3, [r4, #16]
 8003bee:	6862      	ldr	r2, [r4, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	bfde      	ittt	le
 8003bf4:	2330      	movle	r3, #48	; 0x30
 8003bf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bfe:	ebac 0305 	sub.w	r3, ip, r5
 8003c02:	6123      	str	r3, [r4, #16]
 8003c04:	f8cd 8000 	str.w	r8, [sp]
 8003c08:	463b      	mov	r3, r7
 8003c0a:	aa03      	add	r2, sp, #12
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7ff fef6 	bl	8003a00 <_printf_common>
 8003c14:	3001      	adds	r0, #1
 8003c16:	d14d      	bne.n	8003cb4 <_printf_i+0x1c8>
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	b005      	add	sp, #20
 8003c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c22:	4839      	ldr	r0, [pc, #228]	; (8003d08 <_printf_i+0x21c>)
 8003c24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003c28:	6813      	ldr	r3, [r2, #0]
 8003c2a:	6821      	ldr	r1, [r4, #0]
 8003c2c:	1d1d      	adds	r5, r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6015      	str	r5, [r2, #0]
 8003c32:	060a      	lsls	r2, r1, #24
 8003c34:	d50b      	bpl.n	8003c4e <_printf_i+0x162>
 8003c36:	07ca      	lsls	r2, r1, #31
 8003c38:	bf44      	itt	mi
 8003c3a:	f041 0120 	orrmi.w	r1, r1, #32
 8003c3e:	6021      	strmi	r1, [r4, #0]
 8003c40:	b91b      	cbnz	r3, 8003c4a <_printf_i+0x15e>
 8003c42:	6822      	ldr	r2, [r4, #0]
 8003c44:	f022 0220 	bic.w	r2, r2, #32
 8003c48:	6022      	str	r2, [r4, #0]
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	e7b7      	b.n	8003bbe <_printf_i+0xd2>
 8003c4e:	064d      	lsls	r5, r1, #25
 8003c50:	bf48      	it	mi
 8003c52:	b29b      	uxthmi	r3, r3
 8003c54:	e7ef      	b.n	8003c36 <_printf_i+0x14a>
 8003c56:	4665      	mov	r5, ip
 8003c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c5c:	fb02 3311 	mls	r3, r2, r1, r3
 8003c60:	5cc3      	ldrb	r3, [r0, r3]
 8003c62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003c66:	460b      	mov	r3, r1
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	d1f5      	bne.n	8003c58 <_printf_i+0x16c>
 8003c6c:	e7b9      	b.n	8003be2 <_printf_i+0xf6>
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	6825      	ldr	r5, [r4, #0]
 8003c72:	1d18      	adds	r0, r3, #4
 8003c74:	6961      	ldr	r1, [r4, #20]
 8003c76:	6010      	str	r0, [r2, #0]
 8003c78:	0628      	lsls	r0, r5, #24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	d501      	bpl.n	8003c82 <_printf_i+0x196>
 8003c7e:	6019      	str	r1, [r3, #0]
 8003c80:	e002      	b.n	8003c88 <_printf_i+0x19c>
 8003c82:	066a      	lsls	r2, r5, #25
 8003c84:	d5fb      	bpl.n	8003c7e <_printf_i+0x192>
 8003c86:	8019      	strh	r1, [r3, #0]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4665      	mov	r5, ip
 8003c8c:	6123      	str	r3, [r4, #16]
 8003c8e:	e7b9      	b.n	8003c04 <_printf_i+0x118>
 8003c90:	6813      	ldr	r3, [r2, #0]
 8003c92:	1d19      	adds	r1, r3, #4
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	681d      	ldr	r5, [r3, #0]
 8003c98:	6862      	ldr	r2, [r4, #4]
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f000 f837 	bl	8003d10 <memchr>
 8003ca2:	b108      	cbz	r0, 8003ca8 <_printf_i+0x1bc>
 8003ca4:	1b40      	subs	r0, r0, r5
 8003ca6:	6060      	str	r0, [r4, #4]
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	6123      	str	r3, [r4, #16]
 8003cac:	2300      	movs	r3, #0
 8003cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb2:	e7a7      	b.n	8003c04 <_printf_i+0x118>
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	462a      	mov	r2, r5
 8003cb8:	4639      	mov	r1, r7
 8003cba:	4630      	mov	r0, r6
 8003cbc:	47c0      	blx	r8
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	d0aa      	beq.n	8003c18 <_printf_i+0x12c>
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	079b      	lsls	r3, r3, #30
 8003cc6:	d413      	bmi.n	8003cf0 <_printf_i+0x204>
 8003cc8:	68e0      	ldr	r0, [r4, #12]
 8003cca:	9b03      	ldr	r3, [sp, #12]
 8003ccc:	4298      	cmp	r0, r3
 8003cce:	bfb8      	it	lt
 8003cd0:	4618      	movlt	r0, r3
 8003cd2:	e7a3      	b.n	8003c1c <_printf_i+0x130>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	464a      	mov	r2, r9
 8003cd8:	4639      	mov	r1, r7
 8003cda:	4630      	mov	r0, r6
 8003cdc:	47c0      	blx	r8
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d09a      	beq.n	8003c18 <_printf_i+0x12c>
 8003ce2:	3501      	adds	r5, #1
 8003ce4:	68e3      	ldr	r3, [r4, #12]
 8003ce6:	9a03      	ldr	r2, [sp, #12]
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	42ab      	cmp	r3, r5
 8003cec:	dcf2      	bgt.n	8003cd4 <_printf_i+0x1e8>
 8003cee:	e7eb      	b.n	8003cc8 <_printf_i+0x1dc>
 8003cf0:	2500      	movs	r5, #0
 8003cf2:	f104 0919 	add.w	r9, r4, #25
 8003cf6:	e7f5      	b.n	8003ce4 <_printf_i+0x1f8>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ac      	bne.n	8003c56 <_printf_i+0x16a>
 8003cfc:	7803      	ldrb	r3, [r0, #0]
 8003cfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d06:	e76c      	b.n	8003be2 <_printf_i+0xf6>
 8003d08:	0800400d 	.word	0x0800400d
 8003d0c:	0800401e 	.word	0x0800401e

08003d10 <memchr>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	b2c9      	uxtb	r1, r1
 8003d14:	4402      	add	r2, r0
 8003d16:	4290      	cmp	r0, r2
 8003d18:	4603      	mov	r3, r0
 8003d1a:	d101      	bne.n	8003d20 <memchr+0x10>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e003      	b.n	8003d28 <memchr+0x18>
 8003d20:	781c      	ldrb	r4, [r3, #0]
 8003d22:	3001      	adds	r0, #1
 8003d24:	428c      	cmp	r4, r1
 8003d26:	d1f6      	bne.n	8003d16 <memchr+0x6>
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd10      	pop	{r4, pc}

08003d2c <memcpy>:
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	1e43      	subs	r3, r0, #1
 8003d30:	440a      	add	r2, r1
 8003d32:	4291      	cmp	r1, r2
 8003d34:	d100      	bne.n	8003d38 <memcpy+0xc>
 8003d36:	bd10      	pop	{r4, pc}
 8003d38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d40:	e7f7      	b.n	8003d32 <memcpy+0x6>

08003d42 <memmove>:
 8003d42:	4288      	cmp	r0, r1
 8003d44:	b510      	push	{r4, lr}
 8003d46:	eb01 0302 	add.w	r3, r1, r2
 8003d4a:	d807      	bhi.n	8003d5c <memmove+0x1a>
 8003d4c:	1e42      	subs	r2, r0, #1
 8003d4e:	4299      	cmp	r1, r3
 8003d50:	d00a      	beq.n	8003d68 <memmove+0x26>
 8003d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003d5a:	e7f8      	b.n	8003d4e <memmove+0xc>
 8003d5c:	4283      	cmp	r3, r0
 8003d5e:	d9f5      	bls.n	8003d4c <memmove+0xa>
 8003d60:	1881      	adds	r1, r0, r2
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	42d3      	cmn	r3, r2
 8003d66:	d100      	bne.n	8003d6a <memmove+0x28>
 8003d68:	bd10      	pop	{r4, pc}
 8003d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d6e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003d72:	e7f7      	b.n	8003d64 <memmove+0x22>

08003d74 <_free_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4605      	mov	r5, r0
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d043      	beq.n	8003e04 <_free_r+0x90>
 8003d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d80:	1f0c      	subs	r4, r1, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bfb8      	it	lt
 8003d86:	18e4      	addlt	r4, r4, r3
 8003d88:	f000 f8d0 	bl	8003f2c <__malloc_lock>
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <_free_r+0x94>)
 8003d8e:	6813      	ldr	r3, [r2, #0]
 8003d90:	4610      	mov	r0, r2
 8003d92:	b933      	cbnz	r3, 8003da2 <_free_r+0x2e>
 8003d94:	6063      	str	r3, [r4, #4]
 8003d96:	6014      	str	r4, [r2, #0]
 8003d98:	4628      	mov	r0, r5
 8003d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d9e:	f000 b8c6 	b.w	8003f2e <__malloc_unlock>
 8003da2:	42a3      	cmp	r3, r4
 8003da4:	d90b      	bls.n	8003dbe <_free_r+0x4a>
 8003da6:	6821      	ldr	r1, [r4, #0]
 8003da8:	1862      	adds	r2, r4, r1
 8003daa:	4293      	cmp	r3, r2
 8003dac:	bf01      	itttt	eq
 8003dae:	681a      	ldreq	r2, [r3, #0]
 8003db0:	685b      	ldreq	r3, [r3, #4]
 8003db2:	1852      	addeq	r2, r2, r1
 8003db4:	6022      	streq	r2, [r4, #0]
 8003db6:	6063      	str	r3, [r4, #4]
 8003db8:	6004      	str	r4, [r0, #0]
 8003dba:	e7ed      	b.n	8003d98 <_free_r+0x24>
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	b10a      	cbz	r2, 8003dc6 <_free_r+0x52>
 8003dc2:	42a2      	cmp	r2, r4
 8003dc4:	d9fa      	bls.n	8003dbc <_free_r+0x48>
 8003dc6:	6819      	ldr	r1, [r3, #0]
 8003dc8:	1858      	adds	r0, r3, r1
 8003dca:	42a0      	cmp	r0, r4
 8003dcc:	d10b      	bne.n	8003de6 <_free_r+0x72>
 8003dce:	6820      	ldr	r0, [r4, #0]
 8003dd0:	4401      	add	r1, r0
 8003dd2:	1858      	adds	r0, r3, r1
 8003dd4:	4282      	cmp	r2, r0
 8003dd6:	6019      	str	r1, [r3, #0]
 8003dd8:	d1de      	bne.n	8003d98 <_free_r+0x24>
 8003dda:	6810      	ldr	r0, [r2, #0]
 8003ddc:	6852      	ldr	r2, [r2, #4]
 8003dde:	4401      	add	r1, r0
 8003de0:	6019      	str	r1, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	e7d8      	b.n	8003d98 <_free_r+0x24>
 8003de6:	d902      	bls.n	8003dee <_free_r+0x7a>
 8003de8:	230c      	movs	r3, #12
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	e7d4      	b.n	8003d98 <_free_r+0x24>
 8003dee:	6820      	ldr	r0, [r4, #0]
 8003df0:	1821      	adds	r1, r4, r0
 8003df2:	428a      	cmp	r2, r1
 8003df4:	bf01      	itttt	eq
 8003df6:	6811      	ldreq	r1, [r2, #0]
 8003df8:	6852      	ldreq	r2, [r2, #4]
 8003dfa:	1809      	addeq	r1, r1, r0
 8003dfc:	6021      	streq	r1, [r4, #0]
 8003dfe:	6062      	str	r2, [r4, #4]
 8003e00:	605c      	str	r4, [r3, #4]
 8003e02:	e7c9      	b.n	8003d98 <_free_r+0x24>
 8003e04:	bd38      	pop	{r3, r4, r5, pc}
 8003e06:	bf00      	nop
 8003e08:	20000090 	.word	0x20000090

08003e0c <_malloc_r>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	1ccd      	adds	r5, r1, #3
 8003e10:	f025 0503 	bic.w	r5, r5, #3
 8003e14:	3508      	adds	r5, #8
 8003e16:	2d0c      	cmp	r5, #12
 8003e18:	bf38      	it	cc
 8003e1a:	250c      	movcc	r5, #12
 8003e1c:	2d00      	cmp	r5, #0
 8003e1e:	4606      	mov	r6, r0
 8003e20:	db01      	blt.n	8003e26 <_malloc_r+0x1a>
 8003e22:	42a9      	cmp	r1, r5
 8003e24:	d903      	bls.n	8003e2e <_malloc_r+0x22>
 8003e26:	230c      	movs	r3, #12
 8003e28:	6033      	str	r3, [r6, #0]
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	bd70      	pop	{r4, r5, r6, pc}
 8003e2e:	f000 f87d 	bl	8003f2c <__malloc_lock>
 8003e32:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <_malloc_r+0xac>)
 8003e34:	6814      	ldr	r4, [r2, #0]
 8003e36:	4621      	mov	r1, r4
 8003e38:	b991      	cbnz	r1, 8003e60 <_malloc_r+0x54>
 8003e3a:	4c20      	ldr	r4, [pc, #128]	; (8003ebc <_malloc_r+0xb0>)
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	b91b      	cbnz	r3, 8003e48 <_malloc_r+0x3c>
 8003e40:	4630      	mov	r0, r6
 8003e42:	f000 f863 	bl	8003f0c <_sbrk_r>
 8003e46:	6020      	str	r0, [r4, #0]
 8003e48:	4629      	mov	r1, r5
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f000 f85e 	bl	8003f0c <_sbrk_r>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d124      	bne.n	8003e9e <_malloc_r+0x92>
 8003e54:	230c      	movs	r3, #12
 8003e56:	4630      	mov	r0, r6
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	f000 f868 	bl	8003f2e <__malloc_unlock>
 8003e5e:	e7e4      	b.n	8003e2a <_malloc_r+0x1e>
 8003e60:	680b      	ldr	r3, [r1, #0]
 8003e62:	1b5b      	subs	r3, r3, r5
 8003e64:	d418      	bmi.n	8003e98 <_malloc_r+0x8c>
 8003e66:	2b0b      	cmp	r3, #11
 8003e68:	d90f      	bls.n	8003e8a <_malloc_r+0x7e>
 8003e6a:	600b      	str	r3, [r1, #0]
 8003e6c:	18cc      	adds	r4, r1, r3
 8003e6e:	50cd      	str	r5, [r1, r3]
 8003e70:	4630      	mov	r0, r6
 8003e72:	f000 f85c 	bl	8003f2e <__malloc_unlock>
 8003e76:	f104 000b 	add.w	r0, r4, #11
 8003e7a:	1d23      	adds	r3, r4, #4
 8003e7c:	f020 0007 	bic.w	r0, r0, #7
 8003e80:	1ac3      	subs	r3, r0, r3
 8003e82:	d0d3      	beq.n	8003e2c <_malloc_r+0x20>
 8003e84:	425a      	negs	r2, r3
 8003e86:	50e2      	str	r2, [r4, r3]
 8003e88:	e7d0      	b.n	8003e2c <_malloc_r+0x20>
 8003e8a:	684b      	ldr	r3, [r1, #4]
 8003e8c:	428c      	cmp	r4, r1
 8003e8e:	bf16      	itet	ne
 8003e90:	6063      	strne	r3, [r4, #4]
 8003e92:	6013      	streq	r3, [r2, #0]
 8003e94:	460c      	movne	r4, r1
 8003e96:	e7eb      	b.n	8003e70 <_malloc_r+0x64>
 8003e98:	460c      	mov	r4, r1
 8003e9a:	6849      	ldr	r1, [r1, #4]
 8003e9c:	e7cc      	b.n	8003e38 <_malloc_r+0x2c>
 8003e9e:	1cc4      	adds	r4, r0, #3
 8003ea0:	f024 0403 	bic.w	r4, r4, #3
 8003ea4:	42a0      	cmp	r0, r4
 8003ea6:	d005      	beq.n	8003eb4 <_malloc_r+0xa8>
 8003ea8:	1a21      	subs	r1, r4, r0
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f000 f82e 	bl	8003f0c <_sbrk_r>
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d0cf      	beq.n	8003e54 <_malloc_r+0x48>
 8003eb4:	6025      	str	r5, [r4, #0]
 8003eb6:	e7db      	b.n	8003e70 <_malloc_r+0x64>
 8003eb8:	20000090 	.word	0x20000090
 8003ebc:	20000094 	.word	0x20000094

08003ec0 <_realloc_r>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	4607      	mov	r7, r0
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	460e      	mov	r6, r1
 8003ec8:	b921      	cbnz	r1, 8003ed4 <_realloc_r+0x14>
 8003eca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ece:	4611      	mov	r1, r2
 8003ed0:	f7ff bf9c 	b.w	8003e0c <_malloc_r>
 8003ed4:	b922      	cbnz	r2, 8003ee0 <_realloc_r+0x20>
 8003ed6:	f7ff ff4d 	bl	8003d74 <_free_r>
 8003eda:	4625      	mov	r5, r4
 8003edc:	4628      	mov	r0, r5
 8003ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee0:	f000 f826 	bl	8003f30 <_malloc_usable_size_r>
 8003ee4:	42a0      	cmp	r0, r4
 8003ee6:	d20f      	bcs.n	8003f08 <_realloc_r+0x48>
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4638      	mov	r0, r7
 8003eec:	f7ff ff8e 	bl	8003e0c <_malloc_r>
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d0f2      	beq.n	8003edc <_realloc_r+0x1c>
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4622      	mov	r2, r4
 8003efa:	f7ff ff17 	bl	8003d2c <memcpy>
 8003efe:	4631      	mov	r1, r6
 8003f00:	4638      	mov	r0, r7
 8003f02:	f7ff ff37 	bl	8003d74 <_free_r>
 8003f06:	e7e9      	b.n	8003edc <_realloc_r+0x1c>
 8003f08:	4635      	mov	r5, r6
 8003f0a:	e7e7      	b.n	8003edc <_realloc_r+0x1c>

08003f0c <_sbrk_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4c05      	ldr	r4, [pc, #20]	; (8003f28 <_sbrk_r+0x1c>)
 8003f12:	4605      	mov	r5, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	f7fc ffdc 	bl	8000ed4 <_sbrk>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_sbrk_r+0x1a>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_sbrk_r+0x1a>
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	200002c4 	.word	0x200002c4

08003f2c <__malloc_lock>:
 8003f2c:	4770      	bx	lr

08003f2e <__malloc_unlock>:
 8003f2e:	4770      	bx	lr

08003f30 <_malloc_usable_size_r>:
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f18      	subs	r0, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfbc      	itt	lt
 8003f3a:	580b      	ldrlt	r3, [r1, r0]
 8003f3c:	18c0      	addlt	r0, r0, r3
 8003f3e:	4770      	bx	lr

08003f40 <_init>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr

08003f4c <_fini>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr
